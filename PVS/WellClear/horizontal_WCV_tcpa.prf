(horizontal_WCV_tcpa
 (tcpa_timevar 0
  (tcpa_timevar-1 nil 3606478523
   ("" (expand "pre_timevar?")
    (("" (skeep)
      (("" (expand "pre_le?")
        (("" (flatten)
          (("" (expand "tcpa")
            (("" (case-replace "v=zero")
              (("1" (assert) nil nil)
               ("2" (assert)
                (("2" (expand "horizontal_tca" 2)
                  (("2" (lemma "v_neq_zero")
                    (("2" (insteep)
                      (("2" (assert) (("2" (cross-mult 2) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors_2D vectors)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (v_neq_zero formula-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (tcpa const-decl "real" timevars nil)
    (pre_le? const-decl "bool" horizontal_WCV nil)
    (pre_timevar? const-decl "bool" horizontal_WCV nil))
   nil
   (tcpa_timevar subtype "timevars.tcpa"
    "(horizontal_WCV[horizontal_WCV_tcpa.TCPA, horizontal_WCV_tcpa.DTHR].pre_timevar?)")))
 (horizontal_WCV_tcpa_symm 0
  (horizontal_WCV_tcpa_symm-2 nil 3606331657
   ("" (skeep)
    (("" (rewrite "horizontal_WCV_symm")
      (("" (rewrite "tcpa_symm") nil nil)) nil))
    nil)
   ((tcpa_timevar name-judgement "(pre_timevar?)" horizontal_WCV_tcpa
     nil)
    (horizontal_WCV_symm formula-decl nil horizontal_WCV nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (timevar? const-decl "bool" timevars nil)
    (TimeVar type-eq-decl nil timevars nil)
    (tcpa const-decl "real" timevars nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (TCPA formal-const-decl "nnreal" horizontal_WCV_tcpa nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tcpa nil)
    (neg_cont name-judgement "continuous_vv_fun" vect_cont_2D
     vect_analysis)
    (tcpa_symm formula-decl nil timevars nil))
   nil)
  (horizontal_WCV_tcpa_symm-1 nil 3598454031
   ("" (skeep)
    (("" (expand "horizontal_WCV_tcpa")
      (("" (rewrite "sqv_neg")
        (("" (rewrite "tcpa_symm" :dir rl)
          (("" (case-replace "-s + tcpa(s, v) * -v = -(s+tcpa(s,v)*v)")
            (("1" (rewrite "sqv_neg") nil nil)
             ("2" (hide 2) (("2" (grind :exclude "tcpa") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((neg_cont name-judgement "continuous_vv_fun" vect_cont_2D
     vect_analysis)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv_neg formula-decl nil vectors_2D vectors))
   nil))
 (horizontal_WCV_tcpa_interval_TCC1 0
  (horizontal_WCV_tcpa_interval_TCC1-1 nil 3592299698
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (horizontal_WCV_tcpa_interval subtype "0" "Lookahead[0, T]")))
 (horizontal_WCV_tcpa_interval_TCC2 0
  (horizontal_WCV_tcpa_interval_TCC2-1 nil 3592299698
   ("" (skeep)
    (("" (splash 3)
      (("1" (flatten)
        (("1" (lemma "Delta_ge_0_2[DTHR]")
          (("1" (inst?)
            (("1" (assert)
              (("1" (inst 1 "0") (("1" (assert) nil nil)) nil)) nil)
             ("2" (flatten) nil nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tcpa nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors) nil
    (sqv_zero formula-decl nil vectors_2D vectors))
   nil
   (horizontal_WCV_tcpa_interval subtype "horizontal_WCV_tcpa.v"
    "{nzv | reals.>=(horizontal[horizontal_WCV_tcpa.DTHR].Delta(horizontal_WCV_tcpa.s, horizontal.nzv), 0)}")))
 (horizontal_WCV_tcpa_interval_TCC3 0
  (horizontal_WCV_tcpa_interval_TCC3-2 nil 3621845332
   ("" (skeep)
    (("" (case "v = zero")
      (("1" (replaces -1) (("1" (assert) nil nil)) nil)
       ("2" (assert)
        (("2" (lemma "horizontal_sep_outside_Theta[DTHR]")
          (("2" (inst?)
            (("2" (assert)
              (("2" (inst - "0")
                (("2" (assert)
                  (("2" (split -)
                    (("1" (expand "min")
                      (("1" (lift-if) (("1" (ground) nil nil)) nil))
                      nil)
                     ("2" (lemma "Delta_ge_0_2[DTHR]")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (inst + "0") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tcpa nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (horizontal_sep_outside_Theta formula-decl nil horizontal ACCoRD)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (horizontal_WCV_tcpa_interval subtype
    "real_defs.min(horizontal_WCV_tcpa.T, horizontal[horizontal_WCV_tcpa.DTHR].Theta_D(horizontal_WCV_tcpa.s, horizontal_WCV_tcpa.v, 1))"
    "Lookahead[0, T]")))
 (horizontal_WCV_tcpa_interval_TCC4 0
  (horizontal_WCV_tcpa_interval_TCC4-1 nil 3592299698
   ("" (skeep) (("" (replaces -1) (("" (assert) nil nil)) nil)) nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors))
   nil
   (horizontal_WCV_tcpa_interval subtype "horizontal_WCV_tcpa.v"
    "Nz_vect2")))
 (horizontal_WCV_tcpa_interval_TCC5 0
  (horizontal_WCV_tcpa_interval_TCC5-1 nil 3592299698
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (horizontal_WCV_tcpa_interval subtype "horizontal_WCV_tcpa.T"
    "Lookahead[0, T]")))
 (horizontal_WCV_tcpa_interval_TCC6 0
  (horizontal_WCV_tcpa_interval_TCC6-1 nil 3592299698
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (horizontal_WCV_tcpa_interval subtype "0" "Lookahead[0, T]")))
 (horizontal_WCV_tcpa_interval_TCC7 0
  (horizontal_WCV_tcpa_interval_TCC7-1 nil 3592299698
   ("" (skeep) (("" (assert) (("" (min_max) nil nil)) nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max_le formula-decl nil real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (TCPA formal-const-decl "nnreal" horizontal_WCV_tcpa nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (max_ge formula-decl nil real_defs nil))
   nil
   (horizontal_WCV_tcpa_interval subtype
    "real_defs.max(0, (number_fields.-)(definitions.horizontal_tca(horizontal_WCV_tcpa.s, horizontal_WCV_tcpa.v), horizontal_WCV_tcpa.TCPA))"
    "Lookahead[0, T]")))
 (horizontal_WCV_tcpa_interval_TCC8 0
  (horizontal_WCV_tcpa_interval_TCC8-3 nil 3621846173
   ("" (skeep)
    (("" (assert)
      (("" (eval-expr "FALSE")
        (("" (replaces -1)
          (("" (split)
            (("1" (rewrite "min_ge")
              (("1" (expand "horizontal_tca")
                (("1" (cross-mult 1) nil nil)) nil))
              nil)
             ("2" (rewrite "min_le") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (min_le formula-decl nil real_defs nil)
    (min_ge formula-decl nil real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors_2D vectors)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (FALSE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_tcpa_interval subtype
    "real_defs.min(horizontal_WCV_tcpa.T, definitions.horizontal_tca(horizontal_WCV_tcpa.s, horizontal_WCV_tcpa.v))"
    "Lookahead[0, T]")))
 (horizontal_WCV_tcpa_interval_TCC9 0
  (horizontal_WCV_tcpa_interval_TCC9-1 nil 3592299698
   ("" (skeep)
    (("" (splash 8)
      (("1" (flatten) (("1" (assert) nil nil)) nil)
       ("2" (flatten)
        (("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tcpa nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors))
   nil
   (horizontal_WCV_tcpa_interval subtype "horizontal_WCV_tcpa.v"
    "{nzv | reals.>=(horizontal[horizontal_WCV_tcpa.DTHR].Delta(horizontal_WCV_tcpa.s, horizontal.nzv), 0)}")))
 (horizontal_WCV_tcpa_interval_TCC10 0
  (horizontal_WCV_tcpa_interval_TCC10-1 nil 3592299698
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_tcpa_interval subtype "horizontal_WCV_tcpa.T"
    "Lookahead[0, T]")))
 (horizontal_WCV_tcpa_interval_TCC11 0
  (horizontal_WCV_tcpa_interval_TCC11-1 nil 3592299698
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (horizontal_WCV_tcpa_interval subtype "0" "Lookahead[0, T]")))
 (horizontal_WCV_tcpa_interval_TCC12 0
  (horizontal_WCV_tcpa_interval_TCC12-2 nil 3595003548
   ("" (skeep*) (("" (assert) (("" (min_max) nil nil)) nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max_le formula-decl nil real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tcpa nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (nnreal type-eq-decl nil real_types nil)
    (TCPA formal-const-decl "nnreal" horizontal_WCV_tcpa nil)
    (max_ge formula-decl nil real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_tcpa_interval subtype
    "real_defs.max(0, horizontal_WCV_tcpa.tmin)" "Lookahead[0, T]"))
  (horizontal_WCV_tcpa_interval_TCC12-1 nil 3592299698
   ("" (skeep)
    (("" (assert)
      (("" (assert)
        (("" (case "v = zero")
          (("1" (replaces -1) (("1" (assert) nil nil)) nil)
           ("2" (assert)
            (("2" (case "Theta_D[DMOD](s,v,-1)>=0")
              (("1" (assert)
                (("1" (lemma "horizontal_sep_outside_Theta[DMOD]")
                  (("1" (inst - "v" "s" "horizontal_tca(s,v)")
                    (("1" (assert)
                      (("1" (split -)
                        (("1" (flatten)
                          (("1" (case "horizontal_tca(s,v)>=0")
                            (("1" (assert)
                              (("1"
                                (expand "min")
                                (("1"
                                  (lift-if)
                                  (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "horizontal_tca" 1)
                              (("2" (cross-mult 1) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (lemma "Delta_ge_0_2[DMOD]")
                          (("2" (inst?)
                            (("2" (assert) (("2" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "horizontal_sep_outside_Theta[DMOD]")
                (("2" (inst - "v" "s" "horizontal_tca(s,v)")
                  (("2" (assert)
                    (("2" (split -)
                      (("1" (flatten)
                        (("1" (case "horizontal_tca(s,v)>=0")
                          (("1" (expand "min")
                            (("1" (lift-if) (("1" (ground) nil nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (expand "horizontal_tca" 1)
                              (("2" (cross-mult 1) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "Delta_ge_0_2[DMOD]")
                        (("2" (inst?)
                          (("2" (assert) (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (lemma "Delta_ge_0_2[DMOD]")
                (("3" (inst?)
                  (("3" (assert) (("3" (inst?) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (scal_zero formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (Sign type-eq-decl nil sign reals)
    (Delta const-decl "real" horizontal ACCoRD)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (horizontal_sep_outside_Theta formula-decl nil horizontal ACCoRD)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (horizontal_tca const-decl "real" definitions ACCoRD))
   nil
   (horizontal_WCV_tcpa_interval subtype
    "real_defs.max(0, horizontal_WCV_tcpa.tmin)" "Lookahead[0, T]")))
 (horizontal_WCV_tcpa_interval_TCC13 0
  (horizontal_WCV_tcpa_interval_TCC13-3 nil 3621845556
   ("" (skeep*)
    (("" (assert)
      (("" (eval-expr "FALSE")
        (("" (rewrite "min_le")
          (("" (rewrite "min_ge")
            (("" (lemma "Theta_D_ge_0[DTHR]")
              (("" (inst?)
                (("" (assert)
                  (("" (lemma "Theta_D_le[DTHR]")
                    (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (min_le formula-decl nil real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tcpa nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (Theta_D_ge_0 formula-decl nil horizontal ACCoRD)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Theta_D_le formula-decl nil horizontal ACCoRD)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (Sp_vect2 type-eq-decl nil horizontal ACCoRD)
    (min_ge formula-decl nil real_defs nil)
    (FALSE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_tcpa_interval subtype
    "real_defs.min(horizontal_WCV_tcpa.T, horizontal[horizontal_WCV_tcpa.DTHR].Theta_D(horizontal_WCV_tcpa.s, horizontal_WCV_tcpa.v, 1))"
    "Lookahead[0, T]")))
 (horizontal_WCV_tcpa_eq 0
  (horizontal_WCV_tcpa_eq-1 nil 3595004284
   ("" (skeep)
    (("" (expand "horizontal_WCV")
      (("" (expand "horizontal_WCV_tcpa0")
        (("" (case-replace "sqv(s) <= sq(DTHR)")
          (("" (assert)
            (("" (expand "tcpa")
              (("" (case-replace "v = zero")
                (("1" (assert) nil nil)
                 ("2" (assert)
                  (("2" (case-replace "sqv(v) /= 0")
                    (("1" (flatten)
                      (("1" (case "s*v = 0")
                        (("1" (assert)
                          (("1" (expand "horizontal_tca")
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (iff)
                          (("2" (lemma "horizontal_tca_nzv_lt_0")
                            (("2" (inst?) (("2" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (hide 3)
                        (("2" (rewrite "sqv_eq_0") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((horizontal_WCV const-decl "bool" horizontal_WCV nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tcpa nil)
    (tcpa const-decl "real" timevars nil)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (horizontal_tca_nzv_lt_0 formula-decl nil definitions ACCoRD)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (scal_zero formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (tcpa_timevar name-judgement "(pre_timevar?)" horizontal_WCV_tcpa
     nil)
    (horizontal_WCV_tcpa0 const-decl "bool" horizontal_WCV_tcpa0 nil))
   shostak))
 (horizontal_WCV_tcpa_rew_TCC1 0
  (horizontal_WCV_tcpa_rew_TCC1-1 nil 3598459414
   ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (horizontal_WCV_tcpa_rew subtype "horizontal_WCV_tcpa.v"
    "Nz_vect2")))
 (horizontal_WCV_tcpa_rew 0
  (horizontal_WCV_tcpa_rew-1 nil 3598459445
   ("" (skeep)
    (("" (rewrite "horizontal_WCV_tcpa_eq")
      (("" (expand "horizontal_WCV_tcpa0")
        (("" (ground)
          (("1" (case "s*v = 0")
            (("1" (expand "horizontal_tca")
              (("1" (replaces -1) (("1" (assert) nil nil)) nil)) nil)
             ("2" (assert) nil nil))
            nil)
           ("2" (rewrite "sqv_eq_0")
            (("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((horizontal_WCV_tcpa_eq formula-decl nil horizontal_WCV_tcpa nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "real" vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (horizontal_WCV_tcpa0 const-decl "bool" horizontal_WCV_tcpa0 nil))
   shostak))
 (horizontal_WCV_tcpa_interval_eq 0
  (horizontal_WCV_tcpa_interval_eq-1 nil 3595004302
   ("" (skeep)
    (("" (expand "horizontal_WCV_tcpa_interval")
      (("" (expand "horizontal_WCV_tcpa0_interval")
        (("" (case-replace "sqv(v) = 0 AND sqv(s) <= sq(DTHR)")
          (("" (replace 1)
            (("" (case-replace "sqv(v) = 0")
              (("" (replace 1)
                (("" (case-replace "v=zero")
                  (("1" (assert) nil nil)
                   ("2" (case-replace "sqv(s) <= sq(DTHR)")
                    (("2" (replace 1)
                      (("2" (case-replace "s * v > 0")
                        (("2" (replace 1)
                          (("2"
                            (case-replace
                             "sqv(s + horizontal_tca(s, v) * v) > sq(DTHR) AND
                   sqv(s + horizontal_tca(s, v) * v) <= sq(DTHR) AND
                    Theta_D[DTHR](s, v, -1) <= T")
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil)
                             ("2" (replace 1)
                              (("2"
                                (case-replace
                                 "sqv(s + horizontal_tca(s, v) * v) > sq(DTHR) AND
                       sqv(s + horizontal_tca(s, v) * v) <= sq(DTHR)")
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (replace 1)
                                  (("2" (propax) nil nil))
                                  nil)
                                 ("3" (flatten) nil nil)
                                 ("4" (flatten) nil nil))
                                nil))
                              nil)
                             ("3" (flatten) (("3" (assert) nil nil))
                              nil)
                             ("4" (flatten) nil nil)
                             ("5" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((horizontal_WCV_tcpa_interval const-decl "EntryExit[0, T]"
     horizontal_WCV_tcpa nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tcpa nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "real" vectors_2D vectors)
    (horizontal_WCV_tcpa0_interval const-decl
     "[# entry: Lookahead[0, T], exit: Lookahead[0, T] #]"
     horizontal_WCV_tcpa0 nil))
   shostak))
 (horizontal_WCV_tcpa_interval_def 0
  (horizontal_WCV_tcpa_interval_def-1 nil 3621850022
   ("" (skeep)
    (("" (rewrite "horizontal_WCV_tcpa_eq")
      (("" (rewrite "horizontal_WCV_tcpa_interval_eq")
        (("" (lemma "horizontal_WCV_tcpa0_interval_def")
          (("" (insteep) nil nil)) nil))
        nil))
      nil))
    nil)
   ((horizontal_WCV_tcpa_eq formula-decl nil horizontal_WCV_tcpa nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (horizontal_WCV_tcpa0_interval_def formula-decl nil
     horizontal_WCV_tcpa0 nil)
    (TCPA formal-const-decl "nnreal" horizontal_WCV_tcpa nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tcpa nil)
    (horizontal_WCV_tcpa_interval_eq formula-decl nil
     horizontal_WCV_tcpa nil))
   shostak))
 (horizontal_WCV_tcpa_interval_correct 0
  (horizontal_WCV_tcpa_interval_correct-1 nil 3625225606
   ("" (expand "horizontal_interval_correct?")
    (("" (skeep)
      (("" (rewrite "horizontal_WCV_tcpa_eq")
        (("" (rewrite "horizontal_WCV_tcpa_interval_eq")
          (("" (lemma "horizontal_WCV_tcpa0_interval_def")
            (("" (insteep) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((horizontal_WCV_tcpa_interval_eq formula-decl nil
     horizontal_WCV_tcpa nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tcpa nil)
    (TCPA formal-const-decl "nnreal" horizontal_WCV_tcpa nil)
    (horizontal_WCV_tcpa0_interval_def formula-decl nil
     horizontal_WCV_tcpa0 nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (horizontal_WCV_tcpa_eq formula-decl nil horizontal_WCV_tcpa nil)
    (horizontal_interval_correct? const-decl "bool" horizontal_WCV
     nil))
   nil))
 (horizontal_WCV_tcpa_interval_sound 0
  (horizontal_WCV_tcpa_interval_sound-3 nil 3621850820
   ("" (rewrite "horizontal_interval_correct_is_sound")
    (("" (rewrite "horizontal_WCV_tcpa_interval_correct") nil nil))
    nil)
   ((horizontal_WCV_tcpa_interval_correct formula-decl nil
     horizontal_WCV_tcpa nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tcpa nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TCPA formal-const-decl "nnreal" horizontal_WCV_tcpa nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (horizontal_WCV_tcpa_interval const-decl "EntryExit[0, T]"
     horizontal_WCV_tcpa nil)
    (HorizontalInterval type-eq-decl nil horizontal_WCV nil)
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (tcpa const-decl "real" timevars nil)
    (TimeVar type-eq-decl nil timevars nil)
    (timevar? const-decl "bool" timevars nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (horizontal_interval_correct_is_sound formula-decl nil
     horizontal_WCV nil)
    (tcpa_timevar name-judgement "(pre_timevar?)" horizontal_WCV_tcpa
     nil))
   nil)
  (horizontal_WCV_tcpa_interval_sound-2 nil 3621850086
   ("" (skeep)
    (("" (expand "horizontal_interval_sound?")
      (("" (skeep)
        (("" (expand "nonempty?")
          (("" (lemma "horizontal_WCV_tcpa_interval_def")
            (("" (split)
              (("1" (skeep)
                (("1" (insteep)
                  (("1" (skoletin* -)
                    (("1" (replaces -4 :dir rl)
                      (("1" (replaces (-2 -3) :dir rl)
                        (("1" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (tcpa const-decl "real" timevars nil)
    (horizontal_WCV const-decl "bool" horizontal_WCV nil)
    (TimeVar type-eq-decl nil timevars nil)
    (timevar? const-decl "bool" timevars nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Lookahead type-eq-decl nil Lookahead ACCoRD))
   nil)
  (horizontal_WCV_tcpa_interval_sound-1 nil 3621844849
   ("" (skeep)
    (("" (expand "horizontal_interval_sound?")
      (("" (skeep)
        (("" (expand "nonempty?")
          (("" (rewrite "horizontal_WCV_tcpa_interval_eq")
            (("" (rewrite "horizontal_WCV_tcpa_eq")
              (("" (lemma "horizontal_WCV_tcpa0_interval_def")
                (("" (insteep -1)
                  (("" (skoletin* -1)
                    (("" (replaces -4 :dir rl)
                      (("" (replaces (-2 -3) :dir rl)
                        (("" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vector type-eq-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (horizontal_WCV_tcpa0 const-decl "bool" horizontal_WCV_tcpa0 nil)
    (horizontal_WCV_tcpa0_interval const-decl
     "[# entry: Lookahead[0, T], exit: Lookahead[0, T] #]"
     horizontal_WCV_tcpa0 nil)
    (horizontal_WCV_tcpa0_interval_def formula-decl nil
     horizontal_WCV_tcpa0 nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors))
   nil)))

