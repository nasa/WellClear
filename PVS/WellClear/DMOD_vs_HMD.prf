(DMOD_vs_HMD
 (tau_mod_def_TCC1 0
  (tau_mod_def_TCC1-1 nil 3664625665 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (tau_mod_def subtype
    "(vectors_2D.*(vect_3D_2D.vect2(DMOD_vs_HMD.s), vect_3D_2D.vect2(DMOD_vs_HMD.v)))"
    "nznum")))
 (tau_mod_def_TCC2 0
  (tau_mod_def_TCC2-1 nil 3664625665
   ("" (skeep*)
    (("" (cross-mult 1)
      (("" (lemma "sq_ge")
        (("" (inst?)
          (("" (assert)
            (("" (rewrite "sq_norm") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (div_mult_neg_ge1 formula-decl nil real_props nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors) nil
    (/= const-decl "boolean" notequal nil) nil
    (< const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (sq_norm formula-decl nil vectors_2D vectors)
    (sq_ge formula-decl nil sq reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (tau_mod_def subtype
    "number_fields./(((number_fields.-)(sq.sq(DMOD_vs_HMD.DMOD), vectors_2D.sqv(vect_3D_2D.vect2(DMOD_vs_HMD.s)))), (vectors_2D.*(vect_3D_2D.vect2(DMOD_vs_HMD.s), vect_3D_2D.vect2(DMOD_vs_HMD.v))))"
    "{rr: reals.real | booleans.IMPLIES(booleans.AND(reals.<(vectors_2D.*(vect_3D_2D.vect2(DMOD_vs_HMD.s), vect_3D_2D.vect2(DMOD_vs_HMD.v)), 0), reals.>=(vectors_2D.norm(vect_3D_2D.vect2(DMOD_vs_HMD.s)), DMOD_vs_HMD.DMOD)), reals.>=(rr, 0))}")))
 (taumod_TCC1 0
  (taumod_TCC1-1 nil 3664625665 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (taumod subtype "DMOD_vs_HMD.v"
    "{v | vectors_2D.*(vect_3D_2D.vect2(DMOD_vs_HMD.s), vect_3D_2D.vect2(DMOD_vs_HMD.v)) /= 0}")))
 (extension 0
            (extension-1 nil 3664626399
             ("" (skeep*)
              (("" (expand "WCV")
                (("" (flatten)
                  (("" (assert)
                    (("" (split +)
                      (("1" (expand "horizontal_WCV")
                        (("1" (case "sqv(vect2(s))<=sq(DMOD)")
                          (("1" (hide -7)
                            (("1" (flatten)
                              (("1"
                                (hide 2)
                                (("1"
                                  (lemma "sq_le")
                                  (("1"
                                    (inst - "DMOD" "DMODs")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (lemma "sq_le")
                                (("2"
                                  (inst - "HMOD" "HMODs")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split +)
                                        (("1"
                                          (expand "taumod")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand
                                                   "tau_mod_def")
                                                  (("1"
                                                    (cross-mult -4)
                                                    (("1"
                                                      (cross-mult 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (copy -9)
                                            (("2"
                                              (expand "taumod")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (expand
                                                     "tau_mod_def")
                                                    (("2"
                                                      (case
                                                       "NOT TAUMODs>=TAUMOD")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (mult-by
                                                         -1
                                                         "-(vect2(s)*vect2(v))")
                                                        (("2"
                                                          (cross-mult
                                                           -3)
                                                          (("2"
                                                            (cross-mult
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "sq_le")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "DMOD"
                                                                   "DMODs")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "vertical_WCV")
                        (("2" (flatten)
                          (("2" (split)
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ((WCV const-decl "bool" DMOD_vs_HMD nil)
              (real_ge_is_total_order name-judgement
               "(total_order?[real])" real_props nil)
              (vertical_WCV const-decl "bool" vertical_WCV nil)
              (horizontal_WCV const-decl "bool" DMOD_vs_HMD nil)
              (tcpa_timevar name-judgement "TimeVar" timevars nil)
              (real_lt_is_strict_total_order name-judgement
               "(strict_total_order?[real])" real_props nil)
              (div_mult_neg_le2 formula-decl nil real_props nil)
              (nonpos_real nonempty-type-eq-decl nil real_types nil)
              (< const-decl "bool" reals nil)
              (negreal nonempty-type-eq-decl nil real_types nil)
              (* const-decl "real" vectors_2D vectors)
              (numfield nonempty-type-eq-decl nil number_fields nil)
              (- const-decl "[numfield, numfield -> numfield]"
                 number_fields nil)
              (real_minus_real_is_real application-judgement "real"
               reals nil)
              (real_times_real_is_real application-judgement "real"
               reals nil)
              (tau_mod_def const-decl "{rr: real |
   vect2(s) * vect2(v) < 0 AND norm(vect2(s)) >= DMOD IMPLIES rr >= 0}"
               DMOD_vs_HMD nil)
              (taumod const-decl "real" DMOD_vs_HMD nil)
              (minus_real_is_real application-judgement "real" reals
               nil)
              (both_sides_times_pos_ge1_imp formula-decl nil
               extra_real_props nil)
              (- const-decl "[numfield -> numfield]" number_fields nil)
              (div_mult_neg_le1 formula-decl nil real_props nil)
              (real_div_nzreal_is_real application-judgement "real"
               reals nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (minus_odd_is_odd application-judgement "odd_int"
               integers nil)
              (real_le_is_total_order name-judgement
               "(total_order?[real])" real_props nil)
              (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
               vect_analysis)
              (sq_nz_pos application-judgement "posreal" sq reals)
              (sq_le formula-decl nil sq reals)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (<= const-decl "bool" reals nil)
              (Vector type-eq-decl nil vectors_2D vectors)
              (>= const-decl "bool" reals nil)
              (nnreal type-eq-decl nil real_types nil)
              (sqv const-decl "nnreal" vectors_2D vectors)
              (Vect3 type-eq-decl nil vectors_3D_def vectors)
              (Vect2 type-eq-decl nil vectors_2D_def vectors)
              (vect2 const-decl "Vect2" vect_3D_2D vectors)
              (nonneg_real nonempty-type-eq-decl nil real_types nil)
              (sq const-decl "nonneg_real" sq reals)
              (> const-decl "bool" reals nil)
              (posreal nonempty-type-eq-decl nil real_types nil)
              (boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (TRUE const-decl "bool" booleans nil))
             shostak))
 (taumod_decreasing 0
  (taumod_decreasing-1 nil 3664632254
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (lemma "tau_current_increasing[DMODs]")
          (("1"
            (name "rr"
                  "tau_current_min_unbounded[DMODs](s, v, zero, zero)")
            (("1"
              (name "tr"
                    "unbounded_nominal_tau[DMODs](s, v, zero,zero, rr)")
              (("1"
                (case "EXISTS (t1,t2:nnreal): tr<=t1 AND t1<t2 AND t2<tcpa(s,v)")
                (("1" (skeep -)
                  (("1" (inst - "zero" "s" "zero" "v" "t1" "t2")
                    (("1" (assert)
                      (("1" (lemma "Delta_ge_0_2[DMODs]")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (hide -2)
                                (("1"
                                  (split -)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst + "t")
                                      (("1"
                                        (rewrite "sq_le" 1 :dir rl)
                                        (("1"
                                          (rewrite "sq_norm")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (split -)
                                      (("1"
                                        (inst - "t1" "t2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "FORALL (tt:nnreal): tt<tcpa(s,v) IMPLIES tmod(DMODs)(s, v)(tt)=tau_current[DMODs](vect2(s) + tt * vect2(v), vect2(v), zero, zero)")
                                            (("1"
                                              (inst-cp - "t1")
                                              (("1"
                                                (inst - "t2")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (expand "tmod" 1)
                                                  (("2"
                                                    (expand
                                                     "tau_current"
                                                     1)
                                                    (("2"
                                                      (expand "taumod")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "tau_mod_def")
                                                              (("1"
                                                                (rewrite
                                                                 "vect2_add")
                                                                (("1"
                                                                  (rewrite
                                                                   "vect2_scal")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "tcpa")
                                                                (("2"
                                                                  (expand
                                                                   "horizontal_tca")
                                                                  (("2"
                                                                    (cross-mult
                                                                     -1)
                                                                    (("2"
                                                                      (ground)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-2
                                                                          1))
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "vectors_2D.sqv_eq_0")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep)
                                              (("3"
                                                (expand "tcpa" -1)
                                                (("3"
                                                  (expand
                                                   "horizontal_tca")
                                                  (("3"
                                                    (cross-mult -1)
                                                    (("3"
                                                      (ground)
                                                      (("1"
                                                        (hide-all-but
                                                         (-2 -3))
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "vectors_2D.sqv_eq_0")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "t1<tcpa(s,v)")
                                        (("1"
                                          (expand "tcpa" -1)
                                          (("1"
                                            (expand "horizontal_tca")
                                            (("1"
                                              (cross-mult -1)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (hide-all-but (-2 1))
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "vectors_2D.sqv_eq_0")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil)
                                       ("3"
                                        (expand "tcpa" -3)
                                        (("3"
                                          (expand "horizontal_tca")
                                          (("3"
                                            (cross-mult -3)
                                            (("3"
                                              (ground)
                                              (("1"
                                                (hide-all-but (-2 1))
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "vectors_2D.sqv_eq_0")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "tcpa(s,v)>0")
                  (("1" (case "tr<tcpa(s,v)")
                    (("1"
                      (inst + "max(tr,0)+1/5*(tcpa(s,v)-max(tr,0))"
                       "max(tr,0)+1/2*(tcpa(s,v)-max(tr,0))")
                      (("1" (assert)
                        (("1" (hide-all-but (-1 -2 1))
                          (("1" (grind :exclude "tcpa") nil nil)) nil))
                        nil)
                       ("2" (assert) nil nil) ("3" (assert) nil nil))
                      nil)
                     ("2" (hide -4)
                      (("2" (expand "tr" 1)
                        (("2" (expand "unbounded_nominal_tau" 1)
                          (("2" (assert)
                            (("2" (expand "tau_current_min_unbounded")
                              (("2"
                                (case "rr>0")
                                (("1"
                                  (expand "tcpa")
                                  (("1"
                                    (expand "horizontal_tca")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replaces -3 1 :dir rl)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "posreal_div_posreal_is_posreal")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (case
                                               "Delta[DMODs](vect2(s), vect2(v))<0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma "sqrt_pos")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "Delta_ge_0_2[DMODs]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (skeep*)
                                                      (("2"
                                                        (inst + "t")
                                                        (("2"
                                                          (rewrite
                                                           "sq_le"
                                                           4
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (rewrite
                                                             "sq_norm")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil)
             ("2" (assert)
              (("2" (lemma "Delta_ge_0_2[DMODs]")
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (inst + "t")
                        (("2" (rewrite "sq_le" 2 :dir rl)
                          (("2" (rewrite "sq_norm") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skeep)
          (("2" (expand "tmod")
            (("2" (lemma "tau_current_decreasing_Delta_nonneg[DMODs]")
              (("2" (inst - "zero" "s" "zero" "v" "t1" "t2")
                (("2" (assert)
                  (("2" (lemma "Delta_ge_0_2[DMODs]")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (hide -1)
                            (("2" (split -)
                              (("1"
                                (assert)
                                (("1"
                                  (split -)
                                  (("1"
                                    (case
                                     "FORALL (tt:real): tt<tcpa(s,v) IMPLIES tmod(DMODs)(s, v)(tt)=tau_current[DMODs](vect2(s) + tt * vect2(v), vect2(v), zero, zero)")
                                    (("1"
                                      (inst-cp - "t1")
                                      (("1"
                                        (inst - "t2")
                                        (("1"
                                          (expand "tmod")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand "tmod" 1)
                                          (("2"
                                            (expand "tau_current" 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "taumod" 1)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (expand
                                                       "tau_mod_def")
                                                      (("1"
                                                        (rewrite
                                                         "vect2_add")
                                                        (("1"
                                                          (rewrite
                                                           "vect2_scal")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand "tcpa")
                                                        (("2"
                                                          (expand
                                                           "horizontal_tca")
                                                          (("2"
                                                            (cross-mult
                                                             -1)
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-2
                                                                  1))
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "vectors_2D.sqv_eq_0")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep)
                                      (("3"
                                        (expand "tcpa" -1)
                                        (("3"
                                          (expand "horizontal_tca")
                                          (("3"
                                            (cross-mult -1)
                                            (("3"
                                              (ground)
                                              (("1"
                                                (hide-all-but (-2 -3))
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "vectors_2D.sqv_eq_0")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "t1<tcpa(s,v)")
                                    (("1"
                                      (expand "tcpa" -1)
                                      (("1"
                                        (expand "horizontal_tca")
                                        (("1"
                                          (cross-mult -1)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (hide-all-but (-2 1))
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "vectors_2D.sqv_eq_0")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("3"
                                    (expand "tcpa" -4)
                                    (("3"
                                      (expand "horizontal_tca")
                                      (("3"
                                        (cross-mult -4)
                                        (("3"
                                          (ground)
                                          (("1"
                                            (hide-all-but (-2 1))
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "vectors_2D.sqv_eq_0")
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1)
                                (("2"
                                  (skeep*)
                                  (("2"
                                    (inst + "t")
                                    (("2"
                                      (rewrite "sq_le" -1 :dir rl)
                                      (("2"
                                        (rewrite "sq_norm")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (tau_current_increasing formula-decl nil tcas_tau TCASII)
    (unbounded_nominal_tau const-decl "real" tcas_tau TCASII)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (sqrt_pos judgement-tcc nil sqrt reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tcpa_timevar name-judgement "TimeVar" timevars nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sub_zero_right formula-decl nil vectors_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_norm formula-decl nil vectors_2D vectors)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq_le formula-decl nil sq reals)
    (norm const-decl "nnreal" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (taumod const-decl "real" DMOD_vs_HMD nil)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (+ const-decl "Vector" vectors_3D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_neg_lt2 formula-decl nil extra_real_props nil)
    (tau_mod_def const-decl "{rr: real |
   vect2(s) * vect2(v) < 0 AND norm(vect2(s)) >= DMOD IMPLIES rr >= 0}"
     DMOD_vs_HMD nil)
    (vect2_scal formula-decl nil vect_3D_2D vectors)
    (vect2_add formula-decl nil vect_3D_2D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (tau_current const-decl "{rr: real |
   (so - si) * (vo - vi) < 0 AND norm(so - si) >= DMOD IMPLIES rr >= 0}"
     tcas_tau TCASII)
    (* const-decl "real" vectors_2D vectors)
    (tmod const-decl "real" DMOD_vs_HMD nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (tcpa const-decl "real" timevars nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (<= const-decl "bool" reals nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (Vector type-eq-decl nil vectors_2D vectors) nil
    (nnreal type-eq-decl nil real_types nil)
    (tau_current_min_unbounded const-decl "nnreal" tcas_tau TCASII)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (tau_current_decreasing_Delta_nonneg formula-decl nil tcas_tau
     TCASII))
   shostak))
 (convergence 0
  (convergence-2 nil 3664701816
   ("" (skeep*)
    (("" (label "slem" -4)
      (("" (hide "slem")
        (("" (skoletin)
          (("" (lift-if)
            (("" (assert)
              (("" (ground)
                (("1" (expand "WCV")
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (split)
                        (("1" (expand "horizontal_WCV")
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (split -)
                                (("1"
                                  (expand "tcpa")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split -)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "sqv_decreasing_before_horizontal_tca")
                                            (("1"
                                              (inst - "v" "s")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -2 :dir rl)
                                                  (("1"
                                                    (inst - "t" "0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (rewrite
                                                         "vect2_add")
                                                        (("1"
                                                          (rewrite
                                                           "vect2_scal")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "vect2_add")
                                            (("2"
                                              (rewrite "vect2_scal")
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (case
                                     "NOT sqv(vect2(s + t * v) + tcpa(vect2(s + t * v), vect2(v)) * vect2(v)) = sqv(vect2(s) + tcpa(vect2(s), vect2(v)) * vect2(v))")
                                    (("1"
                                      (hide 3)
                                      (("1"
                                        (expand "tcpa" (-1 1))
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (split -)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "horizontal_sq_dtca_eq"
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (rewrite
                                                     "horizontal_sq_dtca_eq"
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (expand
                                                       "horizontal_sq_dtca")
                                                      (("1"
                                                        (case
                                                         "sq(det(vect2(s + t * v), vect2(v))) =
                        sq(det(vect2(s), vect2(v)))")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite "vect2_add")
                                                  (("2"
                                                    (rewrite
                                                     "vect2_scal")
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (split +)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "taumod" +)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand
                                                   "tau_mod_def")
                                                  (("1"
                                                    (cross-mult 1)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -6 -8)
                                                  (("2"
                                                    (copy -8)
                                                    (("2"
                                                      (expand
                                                       "tcpa"
                                                       -1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (case
                                                             "t < horizontal_tca(vect2(s), vect2(v))")
                                                            (("1"
                                                              (expand
                                                               "horizontal_tca"
                                                               -1)
                                                              (("1"
                                                                (cross-mult
                                                                 -1)
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-2
                                                                      2))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "tcpa")
                                                              (("2"
                                                                (case
                                                                 "NOT t= horizontal_tca(vect2(s), vect2(v))")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (rewrite
                                                                       "vect2_add")
                                                                      (("2"
                                                                        (rewrite
                                                                         "vect2_scal")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "sq_le")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "HMODs"
                                                                               "DMODs")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "NOT t = 0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   -4)
                                                                  (("2"
                                                                    (expand
                                                                     "tcpa")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "sq_le")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "HMODs"
                                                                           "DMODs")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "taumod_decreasing")
                                          (("2"
                                            (inst - "DMODs" "s" "v")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case "tcpa(s,v)>0")
                                                (("1"
                                                  (case
                                                   "vect2(v)/=zero")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (split -)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "0"
                                                             "t")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "t<tcpa(s,v)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "tmod")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "NOT t = tcpa(s,v)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (rewrite
                                                                       "vect2_add"
                                                                       +)
                                                                      (("2"
                                                                        (rewrite
                                                                         "vect2_scal"
                                                                         +)
                                                                        (("2"
                                                                          (lemma
                                                                           "sq_le")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "HMODs"
                                                                             "DMODs")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst?)
                                                            (("2"
                                                              (rewrite
                                                               "sq_le"
                                                               1
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (rewrite
                                                                 "sq_norm")
                                                                (("2"
                                                                  (lemma
                                                                   "sq_le")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "HMODs"
                                                                     "DMODs")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (expand "tcpa")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "tcpa(s,v)=0")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma "sq_le")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "HMODs"
                                                           "DMODs")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "vect2_add"
                                                               +)
                                                              (("1"
                                                                (rewrite
                                                                 "vect2_scal"
                                                                 +)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "tcpa(s,v)>=0")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand "tcpa" 1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "vz_distr_add")
                          (("2" (rewrite "vz_scal")
                            (("2" (replace -1) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "WCV")
                  (("2" (flatten)
                    (("2" (assert)
                      (("2" (split +)
                        (("1" (expand "horizontal_WCV")
                          (("1" (flatten)
                            (("1" (split -)
                              (("1"
                                (rewrite "vect2_add")
                                (("1"
                                  (rewrite "vect2_scal")
                                  (("1"
                                    (replace -2)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "taumod")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -4)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "tcoa")
                          (("2" (assert)
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("2"
                                  (case "NOT t<=(-s`z/v`z)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (expand "vertical_WCV")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split -)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (cross-mult -2)
                                              (("1"
                                                (rewrite
                                                 "vz_distr_add")
                                                (("1"
                                                  (rewrite "vz_scal")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (case
                                                           "NOT s`z<0")
                                                          (("1"
                                                            (mult-by
                                                             1
                                                             "v`z")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (mult-by
                                                             -2
                                                             "t")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "NOT v`z<0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (mult-by
                                                             -1
                                                             "t")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (split +)
                                              (("1"
                                                (expand "tcoa" +)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (split +)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (mult-by
                                                           1
                                                           "sq(v`z)")
                                                          (("1"
                                                            (hide-all-but
                                                             (-1 1))
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "sq_eq_0")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (ground)
                                                      (("2"
                                                        (cross-mult -2)
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (case
                                                             "(s+t*v)`z=0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "t*v`z+s`z<0")
                                                              (("1"
                                                                (mult-by
                                                                 -1
                                                                 "v`z")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (rewrite
                                                                   "vz_distr_add")
                                                                  (("2"
                                                                    (rewrite
                                                                     "vz_scal")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "(s+t*v)`z=0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "(s+t*v)`z>0")
                                                              (("1"
                                                                (mult-by
                                                                 -1
                                                                 "-v`z")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (rewrite
                                                                   "vz_distr_add")
                                                                  (("2"
                                                                    (rewrite
                                                                     "vz_scal")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "NOT tcoa((s + t * v)`z, v`z) = tcoa(s`z,v`z)-t")
                                                (("1"
                                                  (expand "tcoa" 1)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (cross-mult -2)
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (rewrite
                                                             "vz_distr_add")
                                                            (("1"
                                                              (rewrite
                                                               "vz_scal")
                                                              (("1"
                                                                (case
                                                                 "s`z+t*v`z<0")
                                                                (("1"
                                                                  (mult-by
                                                                   -1
                                                                   "v`z")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "vz_distr_add")
                                                            (("2"
                                                              (rewrite
                                                               "vz_scal")
                                                              (("2"
                                                                (case
                                                                 "s`z+t*v`z>0")
                                                                (("1"
                                                                  (mult-by
                                                                   -1
                                                                   "-v`z")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "tcoa")
                  (("3" (reveal "slem")
                    (("3" (assert)
                      (("3" (delabel "slem")
                        (("3" (case "NOT s`z*v`z<0")
                          (("1" (lemma "nzreal_times_nzreal_is_nzreal")
                            (("1" (inst?) (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (hide -7)
                            (("2" (expand "WCV")
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split)
                                    (("1"
                                      (expand "horizontal_WCV")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "sqv_decreasing_before_horizontal_tca")
                                                  (("1"
                                                    (expand "tcpa")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -
                                                           "0"
                                                           "t")
                                                          (("1"
                                                            (rewrite
                                                             "vect2_add"
                                                             +)
                                                            (("1"
                                                              (rewrite
                                                               "vect2_scal"
                                                               +)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -)
                                                                  (("1"
                                                                    (case
                                                                     "NOT t = 0")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "horizontal_tca")
                                                                    (("2"
                                                                      (cross-mult
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (expand
                                                                       "min")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split +)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "tcpa")
                                                      (("1"
                                                        (case
                                                         "horizontal_tca(vect2(s + t * v), vect2(v))=horizontal_tca(vect2(s ), vect2(v))-t")
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           +)
                                                          (("1"
                                                            (hide-all-but
                                                             (-1 1))
                                                            (("1"
                                                              (grind
                                                               :exclude
                                                               "horizontal_tca")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "horizontal_tca")
                                                          (("2"
                                                            (cross-mult
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (rewrite
                                                                   "vect2_add")
                                                                  (("2"
                                                                    (rewrite
                                                                     "vect2_scal")
                                                                    (("2"
                                                                      (field)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "taumod" 1)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "tcpa")
                                                          (("2"
                                                            (split +)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "tau_mod_def")
                                                                (("1"
                                                                  (cross-mult
                                                                   1)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "vect2(s+t*v)*vect2(v) = 0")
                                                              (("1"
                                                                (case
                                                                 "t = horizontal_tca(s,v)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite
                                                                     "vect2_add"
                                                                     +)
                                                                    (("1"
                                                                      (rewrite
                                                                       "vect2_scal"
                                                                       +)
                                                                      (("1"
                                                                        (lemma
                                                                         "sq_le")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "HMODs"
                                                                           "DMODs")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "horizontal_tca")
                                                                  (("2"
                                                                    (cross-mult
                                                                     1)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "vect2(s+t*v)*vect2(v) <=0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (2
                                                                    3))
                                                                  (("2"
                                                                    (case
                                                                     "NOT t <= horizontal_tca(s,v)")
                                                                    (("1"
                                                                      (expand
                                                                       "min")
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "horizontal_tca"
                                                                       -1)
                                                                      (("2"
                                                                        (cross-mult
                                                                         -1)
                                                                        (("2"
                                                                          (ground)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-2
                                                                              1))
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "vectors_2D.sqv_eq_0")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (lemma
                                                     "taumod_decreasing")
                                                    (("3"
                                                      (insteep -)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (case
                                                           "tcpa(s,v)>0")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (split
                                                                   -)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "0"
                                                                     "t")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -)
                                                                        (("1"
                                                                          (expand
                                                                           "tmod")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "t=tcpa(s,v)")
                                                                          (("1"
                                                                            (lemma
                                                                             "sq_le")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "HMODs"
                                                                               "DMODs")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "vect2_add"
                                                                                     +)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "vect2_scal"
                                                                                       +)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "t<=tcpa(s,v)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "min")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (rewrite
                                                                       "sq_le"
                                                                       1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite
                                                                         "sq_norm")
                                                                        (("2"
                                                                          (lemma
                                                                           "sq_le")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "HMODs"
                                                                             "DMODs")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "tcpa(s,v)>=0")
                                                            (("1"
                                                              (case
                                                               "NOT t = 0")
                                                              (("1"
                                                                (expand
                                                                 "min")
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "vertical_WCV")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "vz_distr_add")
                                                (("1"
                                                  (rewrite "vz_scal")
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (expand "abs")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (case
                                                             "v`z>0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (mult-by
                                                                 -1
                                                                 "t")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (mult-by
                                                               -2
                                                               "-v`z")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "v`z>0")
                                                            (("1"
                                                              (case
                                                               "t<=-s`z/v`z")
                                                              (("1"
                                                                (cross-mult
                                                                 -1)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "min")
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (mult-by
                                                               -1
                                                               "-v`z")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (case
                                                             "v`z<0")
                                                            (("1"
                                                              (case
                                                               "t<=-s`z/v`z")
                                                              (("1"
                                                                (cross-mult
                                                                 -1)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "min")
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (mult-by
                                                               1
                                                               "s`z")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (case
                                                             "v`z<0")
                                                            (("1"
                                                              (mult-by
                                                               -1
                                                               "t")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (mult-by
                                                               1
                                                               "s`z")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (split +)
                                                (("1"
                                                  (expand "tcoa" 1)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (mult-by
                                                         1
                                                         "sq(v`z)")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "sq_eq_0")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "t<-(s`z/v`z)")
                                                        (("1"
                                                          (mult-by
                                                           -1
                                                           "sq(v`z)")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "sq_eq_0")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "NOT t = -(s`z/v`z)")
                                                          (("1"
                                                            (expand
                                                             "min")
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "(s+t*v)`z=0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "vz_distr_add")
                                                              (("2"
                                                                (rewrite
                                                                 "vz_scal")
                                                                (("2"
                                                                  (neg-formula
                                                                   -1)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "tcoa((s+t*v)`z,v`z)<=tcoa(s`z,v`z)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide (-1 2))
                                                    (("2"
                                                      (expand "tcoa" 1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (neg-formula
                                                             1)
                                                            (("1"
                                                              (rewrite
                                                               "vz_distr_add")
                                                              (("1"
                                                                (rewrite
                                                                 "vz_scal")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "(s + t * v)`z * v`z = 0")
                                                            (("1"
                                                              (case
                                                               "(s+t*v)`z=0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (mult-by
                                                                 1
                                                                 "v`z")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "(s + t * v)`z * v`z <= 0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 (2 3))
                                                                (("2"
                                                                  (case
                                                                   "s`z/v`z<0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (cross-mult
                                                                     1)
                                                                    (("2"
                                                                      (ground)
                                                                      (("1"
                                                                        (mult-by
                                                                         1
                                                                         "v`z")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (mult-by
                                                                         2
                                                                         "-v`z")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (tcpa const-decl "real" timevars nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (tcoa const-decl "real" timevars nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (WCV const-decl "bool" DMOD_vs_HMD nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nzreal_times_nzreal_is_nzreal judgement-tcc nil real_types nil)
    (both_sides_times_neg_le1 formula-decl nil real_props nil)
    (div_mult_pos_neg_lt1 formula-decl nil extra_real_props nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (neg_cont name-judgement "continuous_vv_fun" vect_cont_2D
     vect_analysis)
    (div_cancel1 formula-decl nil real_props nil)
    (scal_neg_1 formula-decl nil vectors_2D vectors) nil
    (div_cancel3 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (sqv_eq_0 formula-decl nil vectors_2D vectors) nil nil
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (div_mult_pos_neg_le2 formula-decl nil extra_real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs_nat formula-decl nil abs_lems reals)
    (both_sides_times_pos_le1 formula-decl nil real_props nil) nil
    (sq_eq_0 formula-decl nil sq reals)
    (vertical_WCV const-decl "bool" vertical_WCV nil)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (vz_distr_add formula-decl nil vectors_3D vectors)
    (vz_scal formula-decl nil vectors_3D vectors)
    (horizontal_WCV const-decl "bool" DMOD_vs_HMD nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (taumod_decreasing formula-decl nil DMOD_vs_HMD nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (tmod const-decl "real" DMOD_vs_HMD nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (sq_norm formula-decl nil vectors_2D vectors)
    (sq_le formula-decl nil sq reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_neg_lt2 formula-decl nil extra_real_props nil)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (add_zero_right formula-decl nil vectors_3D vectors)
    (scal_0 formula-decl nil vectors_3D vectors)
    (tau_mod_def const-decl "{rr: real |
   vect2(s) * vect2(v) < 0 AND norm(vect2(s)) >= DMOD IMPLIES rr >= 0}"
     DMOD_vs_HMD nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "real" vectors_2D vectors)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_neg_le2 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (taumod const-decl "real" DMOD_vs_HMD nil)
    (horizontal_sq_dtca_eq formula-decl nil definitions ACCoRD)
    (horizontal_sq_dtca const-decl "real" definitions ACCoRD)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (det const-decl "real" det_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (vect2_scal formula-decl nil vect_3D_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vect2_add formula-decl nil vect_3D_2D vectors)
    (sqv_decreasing_before_horizontal_tca formula-decl nil definitions
     ACCoRD)
    (scal_zero formula-decl nil vectors_2D vectors)
    (tcpa_timevar name-judgement "TimeVar" timevars nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (convergence-1 nil 3664642412
   ("" (skeep*)
    (("" (skoletin)
      (("" (lift-if)
        (("" (assert)
          (("" (ground)
            (("1" (expand "WCV")
              (("1" (flatten)
                (("1" (assert)
                  (("1" (split)
                    (("1" (expand "horizontal_WCV")
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (split -)
                            (("1" (expand "tcpa")
                              (("1"
                                (lift-if)
                                (("1"
                                  (split -)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma
                                         "sqv_decreasing_before_horizontal_tca")
                                        (("1"
                                          (inst - "v" "s")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2 :dir rl)
                                              (("1"
                                                (inst - "t" "0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "vect2_add")
                                                    (("1"
                                                      (rewrite
                                                       "vect2_scal")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (rewrite "vect2_add")
                                        (("2"
                                          (rewrite "vect2_scal")
                                          (("2"
                                            (replace -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (case
                                 "NOT sqv(vect2(s + t * v) + tcpa(vect2(s + t * v), vect2(v)) * vect2(v)) = sqv(vect2(s) + tcpa(vect2(s), vect2(v)) * vect2(v))")
                                (("1"
                                  (hide 3)
                                  (("1"
                                    (expand "tcpa" (-1 1))
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (split -)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (rewrite
                                               "horizontal_sq_dtca_eq"
                                               :dir
                                               rl)
                                              (("1"
                                                (rewrite
                                                 "horizontal_sq_dtca_eq"
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (expand
                                                   "horizontal_sq_dtca")
                                                  (("1"
                                                    (case
                                                     "sq(det(vect2(s + t * v), vect2(v))) =
       sq(det(vect2(s), vect2(v)))")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (rewrite "vect2_add")
                                              (("2"
                                                (rewrite "vect2_scal")
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (split +)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "taumod" +)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (expand "tau_mod_def")
                                              (("1"
                                                (cross-mult 1)
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -6 -8)
                                              (("2"
                                                (copy -8)
                                                (("2"
                                                  (expand "tcpa" -1)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (ground)
                                                      (("1"
                                                        (case
                                                         "t < horizontal_tca(vect2(s), vect2(v))")
                                                        (("1"
                                                          (expand
                                                           "horizontal_tca"
                                                           -1)
                                                          (("1"
                                                            (cross-mult
                                                             -1)
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-2
                                                                  2))
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "tcpa")
                                                          (("2"
                                                            (case
                                                             "NOT t= horizontal_tca(vect2(s), vect2(v))")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (rewrite
                                                                   "vect2_add")
                                                                  (("2"
                                                                    (rewrite
                                                                     "vect2_scal")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "sq_le")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "HMODs"
                                                                           "DMODs")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "NOT t = 0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (replace -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide -4)
                                                              (("2"
                                                                (expand
                                                                 "tcpa")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "sq_le")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "HMODs"
                                                                       "DMODs")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "taumod_decreasing")
                                      (("2"
                                        (inst - "DMODs" "s" "v")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case "tcpa(s,v)>0")
                                            (("1"
                                              (case "vect2(v)/=zero")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (split -)
                                                      (("1"
                                                        (inst
                                                         -
                                                         "0"
                                                         "t")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "t<tcpa(s,v)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "tmod")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "NOT t = tcpa(s,v)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (rewrite
                                                                   "vect2_add"
                                                                   +)
                                                                  (("2"
                                                                    (rewrite
                                                                     "vect2_scal"
                                                                     +)
                                                                    (("2"
                                                                      (lemma
                                                                       "sq_le")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "HMODs"
                                                                         "DMODs")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst?)
                                                        (("2"
                                                          (rewrite
                                                           "sq_le"
                                                           1
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (rewrite
                                                             "sq_norm")
                                                            (("2"
                                                              (lemma
                                                               "sq_le")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "HMODs"
                                                                 "DMODs")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (expand "tcpa")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "tcpa(s,v)=0")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma "sq_le")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "HMODs"
                                                       "DMODs")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "vect2_add"
                                                           +)
                                                          (("1"
                                                            (rewrite
                                                             "vect2_scal"
                                                             +)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "tcpa(s,v)>=0")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (expand "tcpa" 1)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "vz_distr_add")
                      (("2" (rewrite "vz_scal")
                        (("2" (replace -1) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "WCV")
              (("2" (flatten)
                (("2" (assert)
                  (("2" (split +)
                    (("1" (expand "horizontal_WCV")
                      (("1" (flatten)
                        (("1" (split -)
                          (("1" (rewrite "vect2_add")
                            (("1" (rewrite "vect2_scal")
                              (("1"
                                (replace -2)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (expand "taumod")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -4)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "tcoa")
                      (("2" (assert)
                        (("2" (lift-if)
                          (("2" (ground)
                            (("2" (case "NOT t<=(-s`z/v`z)")
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "vertical_WCV")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (cross-mult -2)
                                          (("1"
                                            (rewrite "vz_distr_add")
                                            (("1"
                                              (rewrite "vz_scal")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (case
                                                       "NOT s`z<0")
                                                      (("1"
                                                        (mult-by
                                                         1
                                                         "v`z")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (mult-by
                                                         -2
                                                         "t")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "NOT v`z<0")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (mult-by
                                                         -1
                                                         "t")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (split +)
                                          (("1"
                                            (expand "tcoa" +)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (split +)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (mult-by
                                                       1
                                                       "sq(v`z)")
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 1))
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "sq_eq_0")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (ground)
                                                  (("2"
                                                    (cross-mult -2)
                                                    (("2"
                                                      (ground)
                                                      (("1"
                                                        (case
                                                         "(s+t*v)`z=0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "t*v`z+s`z<0")
                                                          (("1"
                                                            (mult-by
                                                             -1
                                                             "v`z")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (rewrite
                                                               "vz_distr_add")
                                                              (("2"
                                                                (rewrite
                                                                 "vz_scal")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "(s+t*v)`z=0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "(s+t*v)`z>0")
                                                          (("1"
                                                            (mult-by
                                                             -1
                                                             "-v`z")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (rewrite
                                                               "vz_distr_add")
                                                              (("2"
                                                                (rewrite
                                                                 "vz_scal")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "NOT tcoa((s + t * v)`z, v`z) = tcoa(s`z,v`z)-t")
                                            (("1"
                                              (expand "tcoa" 1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (cross-mult -2)
                                                    (("2"
                                                      (ground)
                                                      (("1"
                                                        (rewrite
                                                         "vz_distr_add")
                                                        (("1"
                                                          (rewrite
                                                           "vz_scal")
                                                          (("1"
                                                            (case
                                                             "s`z+t*v`z<0")
                                                            (("1"
                                                              (mult-by
                                                               -1
                                                               "v`z")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "vz_distr_add")
                                                        (("2"
                                                          (rewrite
                                                           "vz_scal")
                                                          (("2"
                                                            (case
                                                             "s`z+t*v`z>0")
                                                            (("1"
                                                              (mult-by
                                                               -1
                                                               "-v`z")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replaces -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "tcoa") (("3" (postpone) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (when_HMOD_gt_DMOD 0
  (when_HMOD_gt_DMOD-3 nil 3664717332
   ("" (skeep)
    (("" (split)
      (("1" (name "av" "(HMODs+DMODs)/2")
        (("1" (name "ss" "(# x:=-av,y:=av,z:=0 #)")
          (("1" (name "vv" "(# x:=av,y:=0,z:=0 #)")
            (("1" (inst + "ss" "vv")
              (("1" (split)
                (("1" (replaces -1 :dir rl)
                  (("1" (replaces -1 :dir rl) (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (case "tcpa(ss,vv)=1")
                  (("1" (replaces -1)
                    (("1" (replaces -1 :dir rl)
                      (("1" (replaces -1 :dir rl)
                        (("1" (grind :exclude ("sqv" "sq"))
                          (("1" (case "NOT -av+1*av=0")
                            (("1" (assert) nil nil)
                             ("2" (replaces -1)
                              (("2"
                                (grind)
                                (("2"
                                  (lemma "sq_lt")
                                  (("2"
                                    (inst - "DMODs" "av")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "tcpa")
                      (("2" (lift-if)
                        (("2" (ground)
                          (("1" (expand "horizontal_tca")
                            (("1" (replaces -1 :dir rl)
                              (("1"
                                (replaces -1 :dir rl)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replaces -2 :dir rl)
                            (("2" (expand "vect2")
                              (("2"
                                (expand "zero")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (case "tcpa(ss,vv)=1")
                  (("1" (replaces -1)
                    (("1" (replaces -1 :dir rl)
                      (("1" (replaces -1 :dir rl)
                        (("1" (grind :exclude ("sqv" "sq"))
                          (("1" (case "NOT -av+1*av=0")
                            (("1" (assert) nil nil)
                             ("2" (replaces -1)
                              (("2"
                                (grind)
                                (("2"
                                  (lemma "sq_lt")
                                  (("2"
                                    (inst - "av" "HMODs")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (replaces -1 :dir rl)
                      (("2" (replaces -1 :dir rl)
                        (("2" (grind)
                          (("2" (grind)
                            (("2" (case "av = 0")
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "zero")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep*)
        (("2"
          (name "K"
                "sqv(vect2(s) + tcpa(vect2(s), vect2(v)) * vect2(v)) -sq(DMODs)")
          (("2" (case "K>0")
            (("1"
              (case "EXISTS (epsil:posreal): FORALL (t:real): abs(t-tcpa(s,v))<=epsil IMPLIES abs(vect2(s+t*v)*vect2(v))<=K/M")
              (("1" (skeep)
                (("1" (inst + "epsil")
                  (("1" (skeep)
                    (("1" (inst - "t")
                      (("1" (split -)
                        (("1" (expand "tmod")
                          (("1" (expand "taumod")
                            (("1" (lift-if)
                              (("1"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "tau_mod_def")
                                    (("1"
                                      (cross-mult 1)
                                      (("1"
                                        (neg-formula 1)
                                        (("1"
                                          (case
                                           "sqv(vect2(s + t * v)) - sq(DMODs) >=K")
                                          (("1"
                                            (expand "abs" -3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (cross-mult -3)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma
                                               "horizontal_tca_min")
                                              (("2"
                                                (inst - "v" "s" "t")
                                                (("1"
                                                  (rewrite "vect2_add")
                                                  (("1"
                                                    (rewrite
                                                     "vect2_scal")
                                                    (("1"
                                                      (rewrite
                                                       "horizontal_sq_dtca_eq")
                                                      (("1"
                                                        (expand "tcpa")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "vect2(v)/=zero")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (copy -8)
                                    (("2"
                                      (expand "tcpa" -1)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (ground)
                                          (("2"
                                            (expand "horizontal_tca")
                                            (("2"
                                              (cross-mult -1)
                                              (("2"
                                                (ground)
                                                (("2"
                                                  (hide-all-but (-2 2))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "abs")
                          (("2" (lift-if) (("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (inst + "K/(2*M*sqv(vect2(v)))")
                  (("1" (skeep*)
                    (("1" (name "dep" "t - tcpa(vect2(s), vect2(v))")
                      (("1" (replace -1)
                        (("1"
                          (case "NOT vect2(s + t * v) * vect2(v) = (vect2(s) + tcpa(vect2(s), vect2(v)) * vect2(v))*vect2(v) + dep*sqv(vect2(v))")
                          (("1" (hide-all-but 1)
                            (("1" (expand "dep")
                              (("1" (grind :exclude "tcpa") nil nil))
                              nil))
                            nil)
                           ("2"
                            (case "(vect2(s) + tcpa(vect2(s), vect2(v)) * vect2(v)) * vect2(v)=0")
                            (("1" (replaces -1)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "abs_mult")
                                    (("1"
                                      (cross-mult -2)
                                      (("1"
                                        (cross-mult 1)
                                        (("1"
                                          (expand "abs" 1 1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "tcpa" 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (ground)
                                  (("1"
                                    (lemma "horizontal_tca_dot_zero")
                                    (("1" (inst?) nil nil))
                                    nil)
                                   ("2"
                                    (replaces -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2"
                      (case "FORALL (ez:real): (ez>=0 AND ez>0) IFF ez>0")
                      (("1" (rewrite -1 1)
                        (("1" (hide -1)
                          (("1" (cross-mult 1)
                            (("1" (ground)
                              (("1"
                                (lemma
                                 "posreal_times_posreal_is_posreal")
                                (("1"
                                  (inst - "sqv(vect2(v))" "M")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (lemma "vectors_2D.sqv_eq_0")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replaces -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2"
                            (lemma "posreal_times_posreal_is_posreal")
                            (("2" (inst - "sqv(vect2(v))" "M")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (lemma "vectors_2D.sqv_eq_0")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replaces -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (lemma "posreal_times_posreal_is_posreal")
                    (("3" (inst - "sqv(vect2(v))" "M")
                      (("1" (assert) nil nil)
                       ("2" (lemma "vectors_2D.sqv_eq_0")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (replaces -1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "vect2_add")
              (("2" (rewrite "vect2_scal") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((div_mult_pos_neg_gt1 formula-decl nil extra_real_props nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (abs_mult formula-decl nil real_props nil)
    (div_mult_pos_neg_le2 formula-decl nil extra_real_props nil)
    (horizontal_tca_dot_zero formula-decl nil definitions ACCoRD)
    (scal_0 formula-decl nil vectors_2D vectors)
    (dep skolem-const-decl "real" DMOD_vs_HMD nil)
    (K skolem-const-decl "real" DMOD_vs_HMD nil)
    (M skolem-const-decl "posreal" DMOD_vs_HMD nil)
    (taumod const-decl "real" DMOD_vs_HMD nil)
    (tau_mod_def const-decl "{rr: real |
   vect2(s) * vect2(v) < 0 AND norm(vect2(s)) >= DMOD IMPLIES rr >= 0}"
     DMOD_vs_HMD nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (neg_one_times formula-decl nil extra_tegies nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (both_sides_times_neg_ge1 formula-decl nil real_props nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (vect2_scal formula-decl nil vect_3D_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors)
    (horizontal_sq_dtca_eq formula-decl nil definitions ACCoRD)
    (vect2_add formula-decl nil vect_3D_2D vectors)
    (horizontal_tca_min formula-decl nil definitions ACCoRD)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (s skolem-const-decl "Vect3" DMOD_vs_HMD nil)
    (t skolem-const-decl "nnreal" DMOD_vs_HMD nil)
    (v skolem-const-decl "Vect3" DMOD_vs_HMD nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_neg_ge1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_neg_lt2 formula-decl nil extra_real_props nil)
    (tmod const-decl "real" DMOD_vs_HMD nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (* const-decl "real" vectors_2D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (sq_lt formula-decl nil sq reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (tcpa const-decl "real" timevars nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (tcpa_timevar name-judgement "TimeVar" timevars nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (even_nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   nil)
  (when_HMOD_gt_DMOD-2 nil 3664713193
   ("" (skeep)
    (("" (split)
      (("1" (name "av" "(HMODs+DMODs)/2")
        (("1" (name "ss" "(# x:=-av,y:=av,z:=0 #)")
          (("1" (name "vv" "(# x:=av,y:=0,z:=0 #)")
            (("1" (inst + "ss" "vv")
              (("1" (split)
                (("1" (replaces -1 :dir rl)
                  (("1" (replaces -1 :dir rl) (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (case "tcpa(ss,vv)=1")
                  (("1" (replaces -1)
                    (("1" (replaces -1 :dir rl)
                      (("1" (replaces -1 :dir rl)
                        (("1" (grind :exclude ("sqv" "sq"))
                          (("1" (case "NOT -av+1*av=0")
                            (("1" (assert) nil nil)
                             ("2" (replaces -1)
                              (("2"
                                (grind)
                                (("2"
                                  (lemma "sq_lt")
                                  (("2"
                                    (inst - "DMODs" "av")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "tcpa")
                      (("2" (lift-if)
                        (("2" (ground)
                          (("1" (expand "horizontal_tca")
                            (("1" (replaces -1 :dir rl)
                              (("1"
                                (replaces -1 :dir rl)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replaces -2 :dir rl)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (case "tcpa(ss,vv)=1")
                  (("1" (replaces -1)
                    (("1" (replaces -1 :dir rl)
                      (("1" (replaces -1 :dir rl)
                        (("1" (grind :exclude ("sqv" "sq"))
                          (("1" (case "NOT -av+1*av=0")
                            (("1" (assert) nil nil)
                             ("2" (replaces -1)
                              (("2"
                                (grind)
                                (("2"
                                  (lemma "sq_lt")
                                  (("2"
                                    (inst - "av" "HMODs")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (replaces -1 :dir rl)
                      (("2" (replaces -1 :dir rl)
                        (("2" (grind)
                          (("2" (grind)
                            (("2" (case "av = 0")
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "zero")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep*)
        (("2"
          (name "K" "sqv(s + tcpa(vect2(s), vect2(v)) * v) -sq(DMODs)")
          (("2" (case "K>0")
            (("1"
              (case "EXISTS (epsil:posreal): FORALL (t:real): abs(t-tcpa(s,v))<=epsil IMPLIES abs(vect2(s+t*v)*vect2(v))<=K/M")
              (("1" (skeep)
                (("1" (inst + "epsil")
                  (("1" (skeep)
                    (("1" (inst - "t")
                      (("1" (split -)
                        (("1" (expand "tmod")
                          (("1" (expand "taumod")
                            (("1" (lift-if)
                              (("1"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "tau_mod_def")
                                    (("1"
                                      (cross-mult 1)
                                      (("1"
                                        (neg-formula 1)
                                        (("1"
                                          (case
                                           "sqv(vect2(s + t * v)) - sq(DMODs) >=K")
                                          (("1"
                                            (expand "abs" -3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (cross-mult -3)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma
                                               "horizontal_tca_min")
                                              (("2"
                                                (inst - "v" "s" "t")
                                                (("1"
                                                  (rewrite "vect2_add")
                                                  (("1"
                                                    (rewrite
                                                     "vect2_scal")
                                                    (("1"
                                                      (rewrite
                                                       "horizontal_sq_dtca_eq")
                                                      (("1"
                                                        (expand "tcpa")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "vect2(v)/=zero")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (postpone) nil nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (when_HMOD_gt_DMOD-1 nil 3664711834
   ("" (skeep)
    (("" (split)
      (("1" (name "av" "(HMODs+DMODs)/2")
        (("1" (name "ss" "(# x:=-av,y:=av,z:=0 #)")
          (("1" (name "vv" "(# x:=av,y:=0,z:=0 #)")
            (("1" (inst + "ss" "vv")
              (("1" (split)
                (("1" (replaces -1 :dir rl)
                  (("1" (replaces -1 :dir rl) (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (case "tcpa(ss,vv)=1")
                  (("1" (replaces -1)
                    (("1" (replaces -1 :dir rl)
                      (("1" (replaces -1 :dir rl)
                        (("1" (grind :exclude ("sqv" "sq"))
                          (("1" (case "NOT -av+1*av=0")
                            (("1" (assert) nil nil)
                             ("2" (replaces -1)
                              (("2"
                                (grind)
                                (("2"
                                  (lemma "sq_lt")
                                  (("2"
                                    (inst - "DMODs" "av")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "tcpa")
                      (("2" (lift-if)
                        (("2" (ground)
                          (("1" (expand "horizontal_tca")
                            (("1" (replaces -1 :dir rl)
                              (("1"
                                (replaces -1 :dir rl)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replaces -2 :dir rl)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (case "tcpa(ss,vv)=1")
                  (("1" (replaces -1)
                    (("1" (replaces -1 :dir rl)
                      (("1" (replaces -1 :dir rl)
                        (("1" (grind :exclude ("sqv" "sq"))
                          (("1" (case "NOT -av+1*av=0")
                            (("1" (assert) nil nil)
                             ("2" (replaces -1)
                              (("2"
                                (grind)
                                (("2"
                                  (lemma "sq_lt")
                                  (("2"
                                    (inst - "av" "HMODs")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (replaces -1 :dir rl)
                      (("2" (replaces -1 :dir rl)
                        (("2" (grind)
                          (("2" (grind)
                            (("2" (case "av = 0")
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "zero")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep*)
        (("2"
          (name "K" "sqv(s + tcpa(vect2(s), vect2(v)) * v) -sq(DMODs)")
          (("2" (case "K>0")
            (("1"
              (case "EXISTS (epsil:posreal): FORALL (t:real): abs(t-tcpa(s,v))<=epsil IMPLIES abs((s+t*v)*v)<=K/M")
              (("1" (skeep)
                (("1" (inst + "epsil")
                  (("1" (skeep)
                    (("1" (inst - "t")
                      (("1" (split -)
                        (("1" (expand "tmod")
                          (("1" (expand "taumod")
                            (("1" (lift-if)
                              (("1"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "tau_mod_def")
                                    (("1"
                                      (cross-mult 1)
                                      (("1"
                                        (neg-formula 1)
                                        (("1"
                                          (case
                                           "sqv(vect2(s + t * v)) - sq(DMODs) >=K")
                                          (("1"
                                            (expand "abs" -3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (postpone) nil nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

