(horizontal_WCV_tcpa0
 (horizontal_WCV_tcpa0_TCC1 0
  (horizontal_WCV_tcpa0_TCC1-1 nil 3592297853
   ("" (subtype-tcc) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (horizontal_WCV_tcpa0 subtype "horizontal_WCV_tcpa0.v" "Nz_vect2")))
 (horizontal_WCV_tcpa0_interval_TCC1 0
  (horizontal_WCV_tcpa0_interval_TCC1-1 nil 3592299698
   ("" (subtype-tcc) nil nil)
   ((* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil (horizontal_WCV_tcpa0_interval subtype "0" "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC2 0
  (horizontal_WCV_tcpa0_interval_TCC2-1 nil 3592299698
   ("" (subtype-tcc) nil nil)
   ((* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (horizontal_WCV_tcpa0_interval subtype "horizontal_WCV_tcpa0.T"
    "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC3 0
  (horizontal_WCV_tcpa0_interval_TCC3-1 nil 3592299698
   ("" (subtype-tcc) nil nil)
   ((* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (horizontal_WCV_tcpa0_interval subtype "horizontal_WCV_tcpa0.T"
    "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC4 0
  (horizontal_WCV_tcpa0_interval_TCC4-1 nil 3592299698
   ("" (subtype-tcc) nil nil)
   ((* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil (horizontal_WCV_tcpa0_interval subtype "0" "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC5 0
  (horizontal_WCV_tcpa0_interval_TCC5-1 nil 3592299698
   ("" (subtype-tcc) nil nil)
   ((* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil (horizontal_WCV_tcpa0_interval subtype "0" "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC6 0
  (horizontal_WCV_tcpa0_interval_TCC6-1 nil 3592299698
   ("" (skeep)
    (("" (case "v = zero")
      (("1" (replaces -1) (("1" (assert) nil nil)) nil)
       ("2" (assert)
        (("2" (lemma "Delta_ge_0_2[DMOD]")
          (("2" (inst?)
            (("2" (assert)
              (("2" (inst + "0") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (DMOD formal-const-decl "posreal" horizontal_WCV_tcpa0 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors))
   nil
   (horizontal_WCV_tcpa0_interval subtype "horizontal_WCV_tcpa0.v"
    "{nzv | reals.>=(horizontal[horizontal_WCV_tcpa0.DMOD].Delta(horizontal_WCV_tcpa0.s, horizontal.nzv), 0)}")))
 (horizontal_WCV_tcpa0_interval_TCC7 0
  (horizontal_WCV_tcpa0_interval_TCC7-1 nil 3592299698
   ("" (skeep)
    (("" (case "v = zero")
      (("1" (replaces -1) (("1" (assert) nil nil)) nil)
       ("2" (assert)
        (("2" (lemma "horizontal_sep_outside_Theta[DMOD]")
          (("2" (inst?)
            (("2" (assert)
              (("2" (inst - "0")
                (("2" (assert)
                  (("2" (split -)
                    (("1" (expand "min")
                      (("1" (lift-if) (("1" (ground) nil nil)) nil))
                      nil)
                     ("2" (lemma "Delta_ge_0_2[DMOD]")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (inst + "0") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (DMOD formal-const-decl "posreal" horizontal_WCV_tcpa0 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (horizontal_sep_outside_Theta formula-decl nil horizontal ACCoRD)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (horizontal_WCV_tcpa0_interval subtype
    "real_defs.min(horizontal_WCV_tcpa0.T, horizontal[horizontal_WCV_tcpa0.DMOD].Theta_D(horizontal_WCV_tcpa0.s, horizontal_WCV_tcpa0.v, 1))"
    "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC8 0
  (horizontal_WCV_tcpa0_interval_TCC8-1 nil 3592299698
   ("" (subtype-tcc) nil nil)
   ((* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (horizontal_WCV_tcpa0_interval subtype "horizontal_WCV_tcpa0.T"
    "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC9 0
  (horizontal_WCV_tcpa0_interval_TCC9-1 nil 3592299698
   ("" (skeep)
    (("" (case "v = zero")
      (("1" (replaces -1) (("1" (assert) nil nil)) nil)
       ("2" (assert)
        (("2" (lemma "Delta_ge_0_2[DMOD]")
          (("2" (inst - "v" "s")
            (("2" (assert)
              (("2" (inst + "0") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals))
   nil (horizontal_WCV_tcpa0_interval subtype "0" "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC10 0
  (horizontal_WCV_tcpa0_interval_TCC10-1 nil 3592299698
   ("" (skeep)
    (("" (case "v = zero")
      (("1" (replaces -1) (("1" (assert) nil nil)) nil)
       ("2" (assert)
        (("2" (lemma "Delta_ge_0_2[DMOD]")
          (("2" (inst?) (("2" (assert) (("2" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (scal_zero formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (DMOD formal-const-decl "posreal" horizontal_WCV_tcpa0 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (/= const-decl "boolean" notequal nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors))
   nil
   (horizontal_WCV_tcpa0_interval subtype "horizontal_WCV_tcpa0.v"
    "{nzv | reals.>=(horizontal[horizontal_WCV_tcpa0.DMOD].Delta(horizontal_WCV_tcpa0.s, horizontal.nzv), 0)}")))
 (horizontal_WCV_tcpa0_interval_TCC11 0
  (horizontal_WCV_tcpa0_interval_TCC11-2 nil 3794744162
   ("" (skeep)
    (("" (assert)
      (("" (assert)
        (("" (case "v = zero")
          (("1" (replaces -1) (("1" (assert) nil nil)) nil)
           ("2" (assert)
            (("2" (case "Theta_D[DMOD](s,v,-1)>=0")
              (("1" (assert)
                (("1" (lemma "horizontal_sep_outside_Theta[DMOD]")
                  (("1" (inst - "v" "s" "horizontal_tca(s,v)")
                    (("1" (assert)
                      (("1" (split -)
                        (("1" (flatten)
                          (("1" (case "horizontal_tca(s,v)>=0")
                            (("1" (assert)
                              (("1"
                                (expand "min")
                                (("1"
                                  (lift-if)
                                  (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "horizontal_tca" 1)
                              (("2" (cross-mult 1) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (lemma "Delta_ge_0_2[DMOD]")
                          (("2" (inst?)
                            (("2" (assert) (("2" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "horizontal_sep_outside_Theta[DMOD]")
                (("2" (inst - "v" "s" "horizontal_tca(s,v)")
                  (("2" (assert)
                    (("2" (split -)
                      (("1" (flatten)
                        (("1" (case "horizontal_tca(s,v)>=0")
                          (("1" (expand "min")
                            (("1" (lift-if) (("1" (ground) nil nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (expand "horizontal_tca" 1)
                              (("2" (cross-mult 1) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "Delta_ge_0_2[DMOD]")
                        (("2" (inst?)
                          (("2" (assert) (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (lemma "Delta_ge_0_2[DMOD]")
                (("3" (inst?)
                  (("3" (assert) (("3" (inst?) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((horizontal_tca const-decl "real" definitions ACCoRD)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (horizontal_sep_outside_Theta formula-decl nil horizontal ACCoRD)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DMOD formal-const-decl "posreal" horizontal_WCV_tcpa0 nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (horizontal_WCV_tcpa0_interval subtype
    "real_defs.min(horizontal_WCV_tcpa0.T, horizontal[horizontal_WCV_tcpa0.DMOD].Theta_D(horizontal_WCV_tcpa0.s, horizontal_WCV_tcpa0.v, 1))"
    "Lookahead[0, T]"))
  (horizontal_WCV_tcpa0_interval_TCC11-1 nil 3592299698
   ("" (skeep)
    (("" (case "v = zero")
      (("1" (replaces -1) (("1" (assert) nil nil)) nil)
       ("2" (assert)
        (("2" (lemma "Delta_ge_0_2[DMOD]")
          (("2" (inst?) (("2" (assert) (("2" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (scal_zero formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (horizontal_WCV_tcpa0_interval subtype
    "real_defs.min(horizontal_WCV_tcpa0.T, horizontal[horizontal_WCV_tcpa0.DMOD].Theta_D(horizontal_WCV_tcpa0.s, horizontal_WCV_tcpa0.v, 1))"
    "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC12 0
  (horizontal_WCV_tcpa0_interval_TCC12-1 nil 3592299698
   ("" (skeep)
    (("" (assert)
      (("" (assert)
        (("" (case "v = zero")
          (("1" (replaces -1) (("1" (assert) nil nil)) nil)
           ("2" (assert)
            (("2" (case "Theta_D[DMOD](s,v,-1)>=0")
              (("1" (assert)
                (("1" (lemma "horizontal_sep_outside_Theta[DMOD]")
                  (("1" (inst - "v" "s" "horizontal_tca(s,v)")
                    (("1" (assert)
                      (("1" (split -)
                        (("1" (flatten)
                          (("1" (case "horizontal_tca(s,v)>=0")
                            (("1" (assert)
                              (("1"
                                (expand "min")
                                (("1"
                                  (lift-if)
                                  (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "horizontal_tca" 1)
                              (("2" (cross-mult 1) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (lemma "Delta_ge_0_2[DMOD]")
                          (("2" (inst?)
                            (("2" (assert) (("2" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "horizontal_sep_outside_Theta[DMOD]")
                (("2" (inst - "v" "s" "horizontal_tca(s,v)")
                  (("2" (assert)
                    (("2" (split -)
                      (("1" (flatten)
                        (("1" (case "horizontal_tca(s,v)>=0")
                          (("1" (expand "min")
                            (("1" (lift-if) (("1" (ground) nil nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (expand "horizontal_tca" 1)
                              (("2" (cross-mult 1) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "Delta_ge_0_2[DMOD]")
                        (("2" (inst?)
                          (("2" (assert) (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (lemma "Delta_ge_0_2[DMOD]")
                (("3" (inst?)
                  (("3" (assert) (("3" (inst?) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (scal_zero formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (DMOD formal-const-decl "posreal" horizontal_WCV_tcpa0 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (horizontal_sep_outside_Theta formula-decl nil horizontal ACCoRD)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (horizontal_tca const-decl "real" definitions ACCoRD))
   nil
   (horizontal_WCV_tcpa0_interval subtype "horizontal_WCV_tcpa0.T"
    "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC13 0
  (horizontal_WCV_tcpa0_interval_TCC13-1 nil 3592299698
   ("" (skeep)
    (("" (case "v = zero")
      (("1" (replaces -1) (("1" (assert) nil nil)) nil)
       ("2" (assert)
        (("2" (assert)
          (("2" (case "Theta_D[DMOD](s,v,1)>=0")
            (("1" (assert)
              (("1" (expand "min")
                (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
              nil)
             ("2" (lemma "horizontal_sep_outside_Theta[DMOD]")
              (("2" (inst - "v" "s" "horizontal_tca(s,v)")
                (("2" (assert)
                  (("2" (split -)
                    (("1" (flatten)
                      (("1" (case "horizontal_tca(s,v)>=0")
                        (("1" (assert) nil nil)
                         ("2" (expand "horizontal_tca" 1)
                          (("2" (cross-mult 1) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (lemma "Delta_ge_0_2[DMOD]")
                      (("2" (inst?)
                        (("2" (assert) (("2" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (lemma "Delta_ge_0_2[DMOD]")
              (("3" (inst?)
                (("3" (assert) (("3" (inst?) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (scal_zero formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   nil (horizontal_WCV_tcpa0_interval subtype "0" "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC14 0
  (horizontal_WCV_tcpa0_interval_TCC14-1 nil 3592299698
   ("" (skeep)
    (("" (case "v = zero")
      (("1" (replaces -1) (("1" (assert) nil nil)) nil)
       ("2" (assert)
        (("2" (case "horizontal_tca(s,v)>=0")
          (("1" (expand "min")
            (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)
           ("2" (expand "horizontal_tca" 1)
            (("2" (cross-mult 1) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (scal_zero formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   nil
   (horizontal_WCV_tcpa0_interval subtype "horizontal_WCV_tcpa0.T"
    "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC15 0
  (horizontal_WCV_tcpa0_interval_TCC15-1 nil 3592299698
   ("" (skeep)
    (("" (case "v = zero")
      (("1" (replaces -1) (("1" (assert) nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (scal_zero formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   nil (horizontal_WCV_tcpa0_interval subtype "0" "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC16 0
  (horizontal_WCV_tcpa0_interval_TCC16-1 nil 3592301451
   ("" (subtype-tcc) nil nil)
   ((* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (discr2b const-decl "real" quadratic_2b reals)
    (root2b const-decl "real" quadratic_2b reals)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (horizontal_WCV_tcpa0_interval subtype "horizontal_WCV_tcpa0.T"
    "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC17 0
  (horizontal_WCV_tcpa0_interval_TCC17-1 nil 3592301451
   ("" (skeep)
    (("" (assert)
      (("" (case "horizontal_tca(s,v)>=0")
        (("1" (expand "min")
          (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)
         ("2" (expand "horizontal_tca" 1)
          (("2" (cross-mult 1) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (horizontal_WCV_tcpa0_interval subtype "0" "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC18 0
  (horizontal_WCV_tcpa0_interval_TCC18-2 nil 3794744208
   ("" (skeep) (("" (assert) (("" (rewrite "max_le") nil nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TCPA formal-const-decl "nnreal" horizontal_WCV_tcpa0 nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (max_le formula-decl nil real_defs nil))
   nil
   (horizontal_WCV_tcpa0_interval subtype
    "real_defs.max(0, (number_fields.-)(definitions.horizontal_tca(horizontal_WCV_tcpa0.s, horizontal_WCV_tcpa0.v), horizontal_WCV_tcpa0.TCPA))"
    "Lookahead[0, T]"))
  (horizontal_WCV_tcpa0_interval_TCC18-1 nil 3592306049
   ("" (subtype-tcc) nil nil)
   ((sq const-decl "nonneg_real" sq reals)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (Delta const-decl "real" horizontal ACCoRD)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (discr2b const-decl "real" quadratic_2b reals)
    (root2b const-decl "real" quadratic_2b reals)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (horizontal_WCV_tcpa0_interval subtype
    "real_defs.max(0, (number_fields.-)(definitions.horizontal_tca(horizontal_WCV_tcpa0.s, horizontal_WCV_tcpa0.v), horizontal_WCV_tcpa0.TCPA))"
    "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC19 0
  (horizontal_WCV_tcpa0_interval_TCC19-2 nil 3794744312
   ("" (skeep)
    (("" (case "horizontal_tca(s,v)>=0")
      (("1" (expand "min")
        (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)
       ("2" (expand "horizontal_tca" 1)
        (("2" (cross-mult 1) (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (minus_real_is_real application-judgement "real" reals nil)
    (> const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (v skolem-const-decl "Vect2" horizontal_WCV_tcpa0 nil)
    (* const-decl "real" vectors_2D vectors)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (horizontal_tca const-decl "real" definitions ACCoRD))
   nil
   (horizontal_WCV_tcpa0_interval subtype
    "real_defs.min(horizontal_WCV_tcpa0.T, definitions.horizontal_tca(horizontal_WCV_tcpa0.s, horizontal_WCV_tcpa0.v))"
    "Lookahead[0, T]"))
  (horizontal_WCV_tcpa0_interval_TCC19-1 nil 3592306049
   ("" (skeep)
    (("" (split 9)
      (("1" (rewrite "max_ge") nil nil)
       ("2" (rewrite "max_le") (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((TCPA formal-const-decl "nnreal" horizontal_WCV_tcpa0 nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (max_ge formula-decl nil real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (max_le formula-decl nil real_defs nil))
   nil
   (horizontal_WCV_tcpa0_interval subtype
    "real_defs.min(horizontal_WCV_tcpa0.T, definitions.horizontal_tca(horizontal_WCV_tcpa0.s, horizontal_WCV_tcpa0.v))"
    "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC20 0
  (horizontal_WCV_tcpa0_interval_TCC20-2 nil 3794744338
   ("" (skeep)
    (("" (assert)
      (("" (flatten) (("" (replaces -1) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((scal_zero formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (horizontal_WCV_tcpa0_interval subtype "horizontal_WCV_tcpa0.v"
    "{nzv | reals.>=(horizontal[horizontal_WCV_tcpa0.DMOD].Delta(horizontal_WCV_tcpa0.s, horizontal.nzv), 0)}"))
  (horizontal_WCV_tcpa0_interval_TCC20-1 nil 3592306049
   ("" (skeep)
    (("" (case "horizontal_tca(s,v)>=0")
      (("1" (expand "min")
        (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)
       ("2" (expand "horizontal_tca" 1)
        (("2" (cross-mult 1) (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((horizontal_tca const-decl "real" definitions ACCoRD)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors_2D vectors) nil
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil
   (horizontal_WCV_tcpa0_interval subtype "horizontal_WCV_tcpa0.v"
    "{nzv | reals.>=(horizontal[horizontal_WCV_tcpa0.DMOD].Delta(horizontal_WCV_tcpa0.s, horizontal.nzv), 0)}")))
 (horizontal_WCV_tcpa0_interval_TCC21 0
  (horizontal_WCV_tcpa0_interval_TCC21-1 nil 3592307902
   ("" (skeep)
    (("" (assert)
      (("" (flatten) (("" (replaces -1) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors))
   nil
   (horizontal_WCV_tcpa0_interval subtype "horizontal_WCV_tcpa0.T"
    "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC22 0
  (horizontal_WCV_tcpa0_interval_TCC22-1 nil 3592307902
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (horizontal_WCV_tcpa0_interval subtype "0" "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC23 0
  (horizontal_WCV_tcpa0_interval_TCC23-2 nil 3794744373
   ("" (skeep*) (("" (rewrite "max_le") (("" (assert) nil nil)) nil))
    nil)
   ((max_le formula-decl nil real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DMOD formal-const-decl "posreal" horizontal_WCV_tcpa0 nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (nnreal type-eq-decl nil real_types nil)
    (TCPA formal-const-decl "nnreal" horizontal_WCV_tcpa0 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_tcpa0_interval subtype
    "real_defs.max(0, horizontal_WCV_tcpa0.tmin)" "Lookahead[0, T]"))
  (horizontal_WCV_tcpa0_interval_TCC23-1 nil 3592310613
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (horizontal_WCV_tcpa0_interval subtype
    "real_defs.max(0, horizontal_WCV_tcpa0.tmin)" "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_TCC24 0
  (horizontal_WCV_tcpa0_interval_TCC24-2 nil 3794744412
   ("" (skeep*)
    (("" (case "v = zero")
      (("1" (replaces -1) (("1" (assert) nil nil)) nil)
       ("2" (assert)
        (("2" (case "NOT Theta_D[DMOD](s, v, 1)<0")
          (("1" (expand "min")
            (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)
           ("2" (case "NOT (s*v<=0 AND sqv(s)>sq(DMOD))")
            (("1" (ground) nil nil)
             ("2" (hide-all-but (- 1 3))
              (("2" (flatten)
                (("2" (lemma "Theta_D_horizontal_dir[DMOD]")
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (mult-by -4 "sqv(v)")
                        (("2" (grind :exclude "Theta_D") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (* const-decl "real" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (Theta_D_horizontal_dir formula-decl nil horizontal ACCoRD)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (< const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DMOD formal-const-decl "posreal" horizontal_WCV_tcpa0 nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors))
   nil
   (horizontal_WCV_tcpa0_interval subtype
    "real_defs.min(horizontal_WCV_tcpa0.T, horizontal[horizontal_WCV_tcpa0.DMOD].Theta_D(horizontal_WCV_tcpa0.s, horizontal_WCV_tcpa0.v, 1))"
    "Lookahead[0, T]"))
  (horizontal_WCV_tcpa0_interval_TCC24-1 nil 3592310613
   ("" (skeep*)
    (("" (split 11)
      (("1" (rewrite "max_ge") nil nil)
       ("2" (rewrite "max_le") (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((TCPA formal-const-decl "nnreal" horizontal_WCV_tcpa0 nil)
    (nnreal type-eq-decl nil real_types nil)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (DMOD formal-const-decl "posreal" horizontal_WCV_tcpa0 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (max_ge formula-decl nil real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_le formula-decl nil real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_tcpa0_interval subtype
    "real_defs.min(horizontal_WCV_tcpa0.T, horizontal[horizontal_WCV_tcpa0.DMOD].Theta_D(horizontal_WCV_tcpa0.s, horizontal_WCV_tcpa0.v, 1))"
    "Lookahead[0, T]")))
 (horizontal_WCV_tcpa0_interval_def 0
  (horizontal_WCV_tcpa0_interval_def-1 nil 3592302951
   ("" (skeep)
    (("" (skoletin 1)
      (("" (skoletin 1)
        (("" (label "final" 1)
          (("" (label "nwcexitdef" -1)
            (("" (label "nwcentrydef" -2)
              (("" (label "nwcentryexitdef" -3)
                (("" (hide "final")
                  (("" (expand "horizontal_WCV_tcpa0_interval")
                    (("" (lift-if)
                      (("" (split -)
                        (("1" (flatten)
                          (("1" (lemma "sqv_eq_0")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (reveal "final")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "horizontal_WCV_tcpa0")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split -)
                            (("1" (flatten)
                              (("1"
                                (lemma "sqv_eq_0")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (reveal "final")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (replace
                                               "nwcentryexitdef")
                                              (("1"
                                                (replace "nwcexitdef")
                                                (("1"
                                                  (replace
                                                   "nwcentrydef")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (invoke
                                                       (case "%1")
                                                       (! 1 2))
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (replace 1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replaces
                                                             -2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "horizontal_WCV_tcpa0"
                                                                 -1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (case "v = zero")
                                (("1"
                                  (replaces -1)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (delabel +)
                                  (("2"
                                    (label "iggypop" (2 3))
                                    (("2"
                                      (delabel "iggypop")
                                      (("2"
                                        (split -)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (reveal "final")
                                              (("1"
                                                (replace "nwcentrydef")
                                                (("1"
                                                  (replace
                                                   "nwcexitdef")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split +)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "min")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (expand
                                                                     "horizontal_WCV_tcpa0")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "sqv(s + t * v) <= sq(DMOD)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -7)
                                                                            (("1"
                                                                              (lemma
                                                                               "horizontal_sep_outside_Theta[DMOD]")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "v"
                                                                                 "s"
                                                                                 "t")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "Delta_ge_0_2[DMOD]")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           +
                                                                                           "t")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (lemma
                                                                               "Theta_D_horizontal_dir[DMOD]")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -)
                                                                                    (("1"
                                                                                      (mult-by
                                                                                       2
                                                                                       "sqv(v)")
                                                                                      (("1"
                                                                                        (grind
                                                                                         :exclude
                                                                                         ("Theta_D"
                                                                                          "min"
                                                                                          "Delta"
                                                                                          "horizontal_tca"))
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "Delta_ge_0_2[DMOD]")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "0")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "Delta_ge_0_2[DMOD]")
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "0")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (case
                                                               "NOT t<=Theta_D[DMOD](s,v,1)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -2)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "horizontal_WCV_tcpa0")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lemma
                                                                         "horizontal_sep_outside_Theta[DMOD]")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "horizontal_sep_outside_Theta[DMOD]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "v"
                                                                                   "s"
                                                                                   "0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "Delta_ge_0_2[DMOD]")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "Delta_ge_0_2[DMOD]")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "0")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (lemma
                                                                 "Delta_ge_0_2[DMOD]")
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (inst
                                                                       +
                                                                       "0")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (label "iggypop" +)
                                              (("2"
                                                (delabel "iggypop")
                                                (("2"
                                                  (hide 4)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (reveal
                                                         "final")
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (replace
                                                             "nwcexitdef")
                                                            (("1"
                                                              (replace
                                                               "nwcentrydef")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (invoke
                                                                   (case
                                                                    "%1")
                                                                   (!
                                                                    1
                                                                    2))
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "horizontal_WCV_tcpa0"
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "t = 0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "NOT (s+t*v)*v>0")
                                                                              (("1"
                                                                                (case
                                                                                 "NOT t > 0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (mult-by
                                                                                   -1
                                                                                   "sqv(v)")
                                                                                  (("2"
                                                                                    (grind
                                                                                     :exclude
                                                                                     ("Theta_D"
                                                                                      "min"
                                                                                      "Delta"
                                                                                      "horizontal_tca"))
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "sqv_increasing_after_horizontal_tca")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "v"
                                                                                     "s")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "t"
                                                                                         "0")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (case
                                                                                             "0>=horizontal_tca(s,v)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "horizontal_tca"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (cross-mult
                                                                                                   1)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (label
                                                               "iggypop"
                                                               +)
                                                              (("1"
                                                                (delabel
                                                                 "iggypop")
                                                                (("1"
                                                                  (reveal
                                                                   "final")
                                                                  (("1"
                                                                    (case
                                                                     "NOT sqv(s + t * v + horizontal_tca(s + t * v, v) * v) > sq(HMD)")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-1
                                                                        +))
                                                                      (("1"
                                                                        (hide
                                                                         2)
                                                                        (("1"
                                                                          (case
                                                                           "horizontal_tca(s+t*v,v) = horizontal_tca(s,v) - t")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("1"
                                                                                (grind
                                                                                 :exclude
                                                                                 "horizontal_tca")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             (-1
                                                                              2))
                                                                            (("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (grind)
                                                                                (("2"
                                                                                  (field)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (split
                                                                       +)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (replace
                                                                           -6)
                                                                          (("1"
                                                                            (replace
                                                                             "nwcexitdef")
                                                                            (("1"
                                                                              (replace
                                                                               "nwcentrydef")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "horizontal_WCV_tcpa0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "horizontal_sep_outside_Theta[DMOD]")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "v"
                                                                                         "s"
                                                                                         "t")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "min")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "max")
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (lift-if)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (ground)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "Delta_ge_0_2[DMOD]")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "horizontal_tca(s,v)")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replace
                                                                           -7)
                                                                          (("2"
                                                                            (replace
                                                                             -8)
                                                                            (("2"
                                                                              (replace
                                                                               -9)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (case
                                                                                   "NOT Delta[DMOD](s,v)>=0")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "Delta_ge_0_2[DMOD]")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "NOT (Theta_D[DMOD](s,v,-1)<=t AND t<=Theta_D[DMOD](s,v,1))")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "min"
                                                                                       (-2
                                                                                        -3))
                                                                                      (("1"
                                                                                        (expand
                                                                                         "max"
                                                                                         (-2
                                                                                          -3))
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "horizontal_WCV_tcpa0")
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "horizontal_sep_outside_Theta[DMOD]")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("4"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split -)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (reveal
                                                                     "final")
                                                                    (("1"
                                                                      (replace
                                                                       -3)
                                                                      (("1"
                                                                        (replace
                                                                         -4)
                                                                        (("1"
                                                                          (replace
                                                                           -5)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (invoke
                                                                               (case
                                                                                "%1")
                                                                               (!
                                                                                1
                                                                                2))
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "horizontal_WCV_tcpa0"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         -)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "horizontal_sep_outside_Theta[DMOD]")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "Delta_ge_0_2[DMOD]")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (case
                                                                                             "horizontal_tca(s+t*v,v) = horizontal_tca(s,v) - t")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 (-2
                                                                                                  -5))
                                                                                                (("1"
                                                                                                  (grind
                                                                                                   :exclude
                                                                                                   "horizontal_tca")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               -)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 3)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  (("1"
                                                                                                    (field)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (field)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (split
                                                                     -)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (reveal
                                                                               "final")
                                                                              (("1"
                                                                                (replace
                                                                                 -2)
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -4)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (invoke
                                                                                         (case
                                                                                          "%1")
                                                                                         (!
                                                                                          1
                                                                                          2))
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "horizontal_WCV_tcpa0")
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "horizontal_tca_min")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "horizontal_sq_dtca_eq")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "horizontal_tca(s+t*v,v) = horizontal_tca(s,v) - t")
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (-1
                                                                                                            -4))
                                                                                                          (("1"
                                                                                                            (grind
                                                                                                             :exclude
                                                                                                             "horizontal_tca")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         -)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            (("2"
                                                                                                              (field)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (split
                                                                             -)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "NOT FORALL (tr:real): sqv(s+tr*v)>sq(DMOD)")
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "Delta_ge_0_2[DMOD]")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "tr")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (label
                                                                                     "ippyzop"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (reveal
                                                                                         "final")
                                                                                        (("2"
                                                                                          (replace
                                                                                           -4)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -5)
                                                                                            (("2"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -7)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "horizontal_WCV_tcpa0")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "Delta_ge_0_2[DMOD]")
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "horizontal_tca(s+t*v,v) = horizontal_tca(s,v) - t")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   -)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     (2
                                                                                                                      3))
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      (("2"
                                                                                                                        (field)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (split
                                                                                 -)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (reveal
                                                                                           "final")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -3)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -4)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "horizontal_WCV_tcpa0")
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "Delta_ge_0_2[DMOD]")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "v"
                                                                                                             "s")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               +)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "horizontal_tca(s+t*v,v) = horizontal_tca(s,v) - t")
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "max")
                                                                                                                    (("1"
                                                                                                                      (lift-if)
                                                                                                                      (("1"
                                                                                                                        (ground)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   -)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     (2
                                                                                                                      3
                                                                                                                      4
                                                                                                                      5))
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      (("2"
                                                                                                                        (field)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (case
                                                                                                                 "t <= horizontal_tca(s,v)")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "min"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (lift-if)
                                                                                                                    (("1"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "horizontal_tca"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (cross-mult
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (hide-all-but
                                                                                                                       (-2
                                                                                                                        1))
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "t <= horizontal_tca(s,v)")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "horizontal_WCV_tcpa0"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "horizontal_tca(s+t*v,v) = horizontal_tca(s,v) - t")
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (grind
                                                                                                                           :exclude
                                                                                                                           "horizontal_tca")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       (2
                                                                                                                        3
                                                                                                                        4
                                                                                                                        5))
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        (("2"
                                                                                                                          (field)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "horizontal_tca"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (cross-mult
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (hide-all-but
                                                                                                                       (-1
                                                                                                                        1))
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (assert)
                                                                                                                  (("3"
                                                                                                                    (case
                                                                                                                     "horizontal_tca(s+t*v,v) = horizontal_tca(s,v) - t")
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "min")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "max")
                                                                                                                          (("1"
                                                                                                                            (lift-if)
                                                                                                                            (("1"
                                                                                                                              (lift-if)
                                                                                                                              (("1"
                                                                                                                                (lift-if)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       -)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         (2
                                                                                                                          3
                                                                                                                          4
                                                                                                                          5))
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          (("2"
                                                                                                                            (field)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "min"
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (lift-if)
                                                                                                            (("2"
                                                                                                              (ground)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (split
                                                                                     -)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (label
                                                                                         "iggypop"
                                                                                         +)
                                                                                        (("1"
                                                                                          (delabel
                                                                                           "iggypop")
                                                                                          (("1"
                                                                                            (reveal
                                                                                             "final")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (invoke
                                                                                                       (case
                                                                                                        "%1")
                                                                                                       (!
                                                                                                        1
                                                                                                        2))
                                                                                                      (("1"
                                                                                                        (ground)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "horizontal_WCV_tcpa0")
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "horizontal_sep_outside_Theta[DMOD]")
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "horizontal_tca(s+t*v,v) = horizontal_tca(s,v) - t")
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       -)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         (2
                                                                                                                          3
                                                                                                                          4
                                                                                                                          5))
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          (("2"
                                                                                                                            (field)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (hide
                                                                                         3)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (reveal
                                                                                               "final")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (split)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "horizontal_WCV_tcpa0")
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "sqv(s + t * v) <= sq(DMOD)")
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "horizontal_sep_outside_Theta[DMOD]")
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           +)
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "t>=min(Theta_D[DMOD](s, v, -1),
                                                                                                                         horizontal_tca(s, v) - TCPA - T)")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "min")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "max")
                                                                                                                                (("1"
                                                                                                                                  (lift-if)
                                                                                                                                  (("1"
                                                                                                                                    (lift-if)
                                                                                                                                    (("1"
                                                                                                                                      (lift-if)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "min"
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (lift-if)
                                                                                                                                  (("2"
                                                                                                                                    (ground)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "min"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (lift-if)
                                                                                                                              (("2"
                                                                                                                                (ground)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (reveal
                                                                                                                       "final")
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             +)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "NOT t>=horizontal_tca(s, v) - TCPA")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "horizontal_tca(s+t*v,v) = horizontal_tca(s,v) - t")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide
                                                                                                                                     (2
                                                                                                                                      3
                                                                                                                                      4
                                                                                                                                      5
                                                                                                                                      6
                                                                                                                                      7))
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -)
                                                                                                                                      (("2"
                                                                                                                                        (grind)
                                                                                                                                        (("2"
                                                                                                                                          (field)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (expand
                                                                                                                                 "min"
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "max"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (lift-if)
                                                                                                                                    (("2"
                                                                                                                                      (lift-if)
                                                                                                                                      (("2"
                                                                                                                                        (lift-if)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (expand
                                                                                                                               "min"
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (lift-if)
                                                                                                                                (("2"
                                                                                                                                  (ground)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "Theta_D_horizontal_dir[DMOD]")
                                                                                                                                    (("2"
                                                                                                                                      (inst?)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (mult-by
                                                                                                                                           1
                                                                                                                                           "sqv(v)")
                                                                                                                                          (("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             (-1
                                                                                                                                              -4
                                                                                                                                              1))
                                                                                                                                            (("2"
                                                                                                                                              (grind
                                                                                                                                               :exclude
                                                                                                                                               "Theta_D")
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "horizontal_WCV_tcpa0")
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "Theta_D_le[DMOD]")
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "horizontal_sep_outside_Theta[DMOD]")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "v"
                                                                                                                         "s"
                                                                                                                         "t")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             +)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "horizontal_tca(s+t*v,v) = horizontal_tca(s,v) - t")
                                                                                                                              (("1"
                                                                                                                                (replaces
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (hide-all-but
                                                                                                                                   (1
                                                                                                                                    5))
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 (-
                                                                                                                                  2
                                                                                                                                  3
                                                                                                                                  4
                                                                                                                                  5
                                                                                                                                  6))
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  (("2"
                                                                                                                                    (field)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (lemma
                                                                                                                               "Theta_D_horizontal_dir[DMOD]")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "-1"
                                                                                                                                 "s"
                                                                                                                                 "v")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "posreal_times_posreal_is_posreal")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "sqv(v)"
                                                                                                                                       "Theta_D[DMOD](s,v,-1)-t")
                                                                                                                                      (("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         (-1
                                                                                                                                          -2
                                                                                                                                          1))
                                                                                                                                        (("2"
                                                                                                                                          (grind
                                                                                                                                           :exclude
                                                                                                                                           "Theta_D")
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (case
                                                                                                                               "horizontal_tca(s+t*v,v) = horizontal_tca(s,v) - t")
                                                                                                                              (("1"
                                                                                                                                (replaces
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -4)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "max"
                                                                                                                                       -3)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "min")
                                                                                                                                        (("1"
                                                                                                                                          (lift-if)
                                                                                                                                          (("1"
                                                                                                                                            (lift-if)
                                                                                                                                            (("1"
                                                                                                                                              (lift-if)
                                                                                                                                              (("1"
                                                                                                                                                (ground)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 (2
                                                                                                                                  3
                                                                                                                                  4
                                                                                                                                  5
                                                                                                                                  6
                                                                                                                                  7))
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -)
                                                                                                                                  (("2"
                                                                                                                                    (grind)
                                                                                                                                    (("2"
                                                                                                                                      (field)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (horizontal_WCV_tcpa0_interval const-decl
     "[# entry: Lookahead[0, T], exit: Lookahead[0, T] #]"
     horizontal_WCV_tcpa0 nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (horizontal_WCV_tcpa0 const-decl "bool" horizontal_WCV_tcpa0 nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (HMD formal-const-decl "posreal" horizontal_WCV_tcpa0 nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (Theta_D_le formula-decl nil horizontal ACCoRD)
    (TCPA formal-const-decl "nnreal" horizontal_WCV_tcpa0 nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (horizontal_sq_dtca_eq formula-decl nil definitions ACCoRD)
    (horizontal_tca_min formula-decl nil definitions ACCoRD)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (sqv_increasing_after_horizontal_tca formula-decl nil definitions
     ACCoRD)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Theta_D_horizontal_dir formula-decl nil horizontal ACCoRD)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (Theta_D const-decl "real" horizontal ACCoRD) nil nil
    (Delta const-decl "real" horizontal ACCoRD)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (* const-decl "real" vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (horizontal_sep_outside_Theta formula-decl nil horizontal ACCoRD)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (/= const-decl "boolean" notequal nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (DMOD formal-const-decl "posreal" horizontal_WCV_tcpa0 nil)
    (sq const-decl "nonneg_real" sq reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_eq_0 formula-decl nil vectors_2D vectors))
   shostak)))

