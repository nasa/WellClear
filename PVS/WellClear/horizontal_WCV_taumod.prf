(horizontal_WCV_taumod
 (taumod_TCC1 0
  (taumod_TCC1-1 nil 3598455785
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (taumod subtype "horizontal_WCV_taumod.v"
    "{v | vectors_2D.*(horizontal_WCV_taumod.s, tcas_tau.v) /= 0}")))
 (taumod_timevar 0
  (taumod_timevar-1 nil 3606394108
   ("" (expand "timevar?")
    (("" (skeep) (("" (expand "taumod") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (taumod const-decl "real" horizontal_WCV_taumod nil)
    (timevar? const-decl "bool" timevars nil))
   nil
   (taumod_timevar subtype "horizontal_WCV_taumod.taumod" "TimeVar")))
 (taumod_pre_timevar 0
  (taumod_pre_timevar-1 nil 3606398815
   ("" (expand "pre_timevar?")
    (("" (skeep)
      (("" (expand "pre_le?")
        (("" (flatten)
          (("" (expand "taumod")
            (("" (assert)
              (("" (expand "tau_mod_def") (("" (cross-mult 1) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tcpa_timevar name-judgement "TimeVar" timevars nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_neg_gt1 formula-decl nil extra_real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_taumod nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (* const-decl "real" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (tau_mod_def const-decl
     "{rr: real | s * v < 0 AND norm(s) >= DMOD IMPLIES rr >= 0}"
     tcas_tau TCASII)
    (taumod const-decl "real" horizontal_WCV_taumod nil)
    (pre_le? const-decl "bool" horizontal_WCV nil)
    (pre_timevar? const-decl "bool" horizontal_WCV nil))
   shostak
   (taumod_pre_timevar subtype "horizontal_WCV_taumod.taumod"
    "(horizontal_WCV[horizontal_WCV_taumod.TAUMOD, horizontal_WCV_taumod.DTHR].pre_timevar?)")))
 (taumod_symm 0
  (taumod_symm-1 nil 3598456675
   ("" (expand "symmetric?")
    (("" (skeep)
      (("" (expand "taumod")
        (("" (expand "tau_mod_def")
          (("" (rewrite "sqv_neg")
            (("" (case-replace "-s*-v = s*v")
              (("" (hide 2) (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tau_mod_def const-decl
     "{rr: real | s * v < 0 AND norm(s) >= DMOD IMPLIES rr >= 0}"
     tcas_tau TCASII)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "real" vectors_2D vectors) nil
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (neg_cont name-judgement "continuous_vv_fun" vect_cont_2D
     vect_analysis)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (sqv_neg formula-decl nil vectors_2D vectors)
    (taumod const-decl "real" horizontal_WCV_taumod nil)
    (symmetric? const-decl "bool" timevars nil))
   shostak))
 (horizontal_WCV_taumod_symm 0
  (horizontal_WCV_taumod_symm-2 nil 3606334565
   ("" (skeep)
    (("" (rewrite "horizontal_WCV_symm")
      (("" (rewrite "taumod_symm") nil nil)) nil))
    nil)
   ((taumod_pre_timevar name-judgement "(pre_timevar?)"
     horizontal_WCV_taumod nil)
    (horizontal_WCV_symm formula-decl nil horizontal_WCV nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (timevar? const-decl "bool" timevars nil)
    (TimeVar type-eq-decl nil timevars nil)
    (taumod const-decl "real" horizontal_WCV_taumod nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (TAUMOD formal-const-decl "nnreal" horizontal_WCV_taumod nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_taumod nil)
    (neg_cont name-judgement "continuous_vv_fun" vect_cont_2D
     vect_analysis)
    (taumod_symm formula-decl nil horizontal_WCV_taumod nil))
   nil)
  (horizontal_WCV_taumod_symm-1 nil 3598456846
   ("" (skeep)
    (("" (expand "horizontal_WCV_taumod")
      (("" (rewrite "sqv_neg")
        (("" (rewrite "tcpa_symm" :dir rl)
          (("" (case-replace "-s + tcpa(s, v) * -v = -(s+tcpa(s,v)*v)")
            (("1" (rewrite "sqv_neg")
              (("1" (hide -1)
                (("1" (rewrite "taumod_symm" :dir rl) nil nil)) nil))
              nil)
             ("2" (hide 2) (("2" (grind :exclude "tcpa") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((neg_cont name-judgement "continuous_vv_fun" vect_cont_2D
     vect_analysis)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv_neg formula-decl nil vectors_2D vectors))
   nil))
 (horizontal_WCV_taumod_RA 0
  (horizontal_WCV_taumod_RA-1 nil 3598226362
   ("" (skeep)
    (("" (beta)
      (("" (split)
        (("1" (flatten)
          (("1" (expand "horizontal_WCV")
            (("1" (expand "horizontal_RA")
              (("1" (splash -1)
                (("1" (flatten)
                  (("1" (expand "taumod")
                    (("1" (case-replace "(so - si) * (vo - vi) < 0")
                      (("1" (rewrite "tau_mod_eq" :dir rl)
                        (("1" (rewrite "tau_mod_current")
                          (("1" (assert)
                            (("1" (inst?)
                              (("1"
                                (expand "tcpa")
                                (("1"
                                  (case-replace "vo-vi = zero")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lemma "horizontal_tca_gt_0")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "norm(so - si) <= DTHR")
                  (("1" (assert)
                    (("1" (inst 1 "0") (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (both-sides-f 1 "sq")
                      (("1" (rewrite "sq_norm") nil nil)
                       ("2" (rewrite "sq_le") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "horizontal_WCV")
            (("2" (expand "horizontal_RA")
              (("2" (flatten)
                (("2" (copy 1)
                  (("2" (both-sides-f 1 "sqrt")
                    (("1" (rewrite "norm" :dir rl)
                      (("1" (rewrite "sqrt_sq")
                        (("1" (assert)
                          (("1" (split -1)
                            (("1" (propax) nil nil)
                             ("2" (flatten)
                              (("2"
                                (expand "taumod")
                                (("2"
                                  (assert)
                                  (("2"
                                    (rewrite "tau_mod_eq" :dir rl)
                                    (("2"
                                      (rewrite "tau_mod_current")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split 4)
                                          (("1"
                                            (skeep -2)
                                            (("1"
                                              (expand "tcpa")
                                              (("1"
                                                (case-replace
                                                 "vo-vi /= zero")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (lemma
                                                     "horizontal_tca_min")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "vo-vi"
                                                       "so-si"
                                                       "t")
                                                      (("1"
                                                        (rewrite
                                                         "horizontal_sq_dtca_eq")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -)
                                            (("2"
                                              (expand "tau_current")
                                              (("2"
                                                (cross-mult 1)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "sqrt_le") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sqrt_le formula-decl nil sqrt reals)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (horizontal_sq_dtca_eq formula-decl nil definitions ACCoRD)
    (horizontal_tca_min formula-decl nil definitions ACCoRD)
    (tau_current const-decl "{rr: real |
   (so - si) * (vo - vi) < 0 AND norm(so - si) >= DMOD IMPLIES rr >= 0}"
     tcas_tau TCASII)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_neg_le2 formula-decl nil real_props nil)
    (sqrt_sq formula-decl nil sqrt reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (horizontal_RA const-decl "bool" horizontal_RA TCASII)
    (norm const-decl "nnreal" vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (sq_norm formula-decl nil vectors_2D vectors)
    (sq_le formula-decl nil sq reals)
    (* const-decl "real" vectors_2D vectors)
    (< const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (tau_mod_current formula-decl nil tcas_tau TCASII) nil nil nil nil
    (zero const-decl "Vector" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (horizontal_tca_gt_0 formula-decl nil definitions ACCoRD)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tau_mod_eq formula-decl nil tcas_tau TCASII)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (tcpa_timevar name-judgement "TimeVar" timevars nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TAUMOD formal-const-decl "nnreal" horizontal_WCV_taumod nil)
    (taumod const-decl "real" horizontal_WCV_taumod nil)
    (tcpa const-decl "real" timevars nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_taumod nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors) nil
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (horizontal_WCV const-decl "bool" horizontal_WCV nil))
   nil))
 (horizontal_WCV_taumod_rew_TCC1 0
  (horizontal_WCV_taumod_rew_TCC1-1 nil 3598459630
   ("" (skeep) (("" (replaces -2) (("" (assert) nil nil)) nil)) nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dot_zero_right formula-decl nil vectors_2D vectors))
   nil
   (horizontal_WCV_taumod_rew subtype "horizontal_WCV_taumod.v"
    "Nz_vect2")))
 (horizontal_WCV_taumod_rew 0
  (horizontal_WCV_taumod_rew-2 nil 3606334677
   ("" (skeep)
    (("" (expand "horizontal_WCV")
      (("" (case-replace "sqv(s) <= sq(DTHR)")
        (("1" (assert) nil nil)
         ("2" (assert)
          (("2" (expand "tcpa")
            (("2" (expand "taumod")
              (("2" (case-replace "s*v < 0")
                (("1" (case-replace "v /= zero")
                  (("1" (flatten)
                    (("1" (typepred "tau_mod_def(s, v)")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (assert)
                            (("1" (rewrite "tau_mod_eq" :dir rl)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide 4)
                            (("2" (both-sides-f 3 "sqrt")
                              (("1"
                                (rewrite "norm" :dir rl)
                                (("1"
                                  (rewrite "sqrt_sq")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (rewrite "sqrt_le") nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (replaces -1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((horizontal_WCV const-decl "bool" horizontal_WCV nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (taumod_pre_timevar name-judgement "(pre_timevar?)"
     horizontal_WCV_taumod nil)
    (tcpa_timevar name-judgement "TimeVar" timevars nil)
    (taumod const-decl "real" horizontal_WCV_taumod nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (tau_mod_def const-decl
     "{rr: real | s * v < 0 AND norm(s) >= DMOD IMPLIES rr >= 0}"
     tcas_tau TCASII)
    (tau_mod_eq formula-decl nil tcas_tau TCASII)
    (TRUE const-decl "bool" booleans nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (sqrt_sq formula-decl nil sqrt reals)
    (sqrt_le formula-decl nil sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (< const-decl "bool" reals nil)
    (* const-decl "real" vectors_2D vectors)
    (tcpa const-decl "real" timevars nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_taumod nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (horizontal_WCV_taumod_rew-1 nil 3598459676
   ("" (skeep)
    (("" (expand "horizontal_WCV_taumod")
      (("" (case-replace "sqv(s) <= sq(DTHR)")
        (("1" (assert) nil nil)
         ("2" (assert)
          (("2" (expand "tcpa")
            (("2" (expand "taumod")
              (("2" (case-replace "s*v < 0")
                (("1" (case-replace "v /= zero")
                  (("1" (flatten)
                    (("1" (typepred "tau_mod_def(s, v)")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (assert)
                            (("1" (rewrite "tau_mod_eq" :dir rl)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide 4)
                            (("2" (both-sides-f 3 "sqrt")
                              (("1"
                                (rewrite "norm" :dir rl)
                                (("1"
                                  (rewrite "sqrt_sq")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (rewrite "sqrt_le") nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (replaces -1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero const-decl "Vector" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (tau_mod_def const-decl
     "{rr: real | s * v < 0 AND norm(s) >= DMOD IMPLIES rr >= 0}"
     tcas_tau TCASII)
    (tau_mod_eq formula-decl nil tcas_tau TCASII)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (sqrt_sq formula-decl nil sqrt reals)
    (sqrt_le formula-decl nil sqrt reals)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (tcpa const-decl "real" timevars nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq const-decl "nonneg_real" sq reals)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors))
   shostak))
 (horizontal_WCV_taumod_interval_rew_TCC1 0
  (horizontal_WCV_taumod_interval_rew_TCC1-1 nil 3606512552
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_taumod_interval_rew subtype
    "horizontal_WCV_taumod.T" "Lookahead[0, T]")))
 (horizontal_WCV_taumod_interval_rew_TCC2 0
  (horizontal_WCV_taumod_interval_rew_TCC2-1 nil 3606512552
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_taumod_interval_rew subtype "0" "Lookahead[0, T]")))
 (horizontal_WCV_taumod_interval_rew_TCC3 0
  (horizontal_WCV_taumod_interval_rew_TCC3-1 nil 3606512552
   ("" (skeep*) (("" (assert) (("" (min_max) nil nil)) nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max_le formula-decl nil real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_taumod_interval_rew subtype
    "real_defs.max(0, horizontal_WCV_taumod.tmin)" "Lookahead[0, T]")))
 (horizontal_WCV_taumod_interval_rew_TCC4 0
  (horizontal_WCV_taumod_interval_rew_TCC4-1 nil 3606512552
   ("" (skeep*) (("" (assert) (("" (min_max) nil nil)) nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min_le formula-decl nil real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min_ge formula-decl nil real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_taumod_interval_rew subtype
    "real_defs.min(horizontal_WCV_taumod.T, horizontal_WCV_taumod.tmout)"
    "Lookahead[0, T]")))
 (horizontal_WCV_taumod_interval_rew_def 0
  (horizontal_WCV_taumod_interval_rew_def-1 nil 3606513155
   ("" (skeep)
    (("" (skoletin 1)
      (("" (expand "horizontal_WCV_taumod_interval_rew")
        (("" (lemma "RA2D_interval_def[TAUMOD,DTHR,0,T]")
          (("" (inst?)
            ((""
              (name "INTV"
                    "RA2D_interval[TAUMOD, DTHR, 0, T](s, v, zero, zero)")
              (("" (replace -1)
                (("" (assert)
                  (("" (lift-if)
                    (("" (inst-cp - "t")
                      (("" (expand "horizontal_RA_at")
                        (("" (lemma "horizontal_WCV_taumod_RA")
                          (("" (inst?)
                            (("" (assert)
                              ((""
                                (replaces -1)
                                ((""
                                  (replace -3 1)
                                  ((""
                                    (ground)
                                    (("1"
                                      (lemma "Delta_ge_0_2[DTHR]")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst + "t+t!1")
                                              (("1"
                                                (hide-all-but (-7 1))
                                                (("1"
                                                  (grind
                                                   :exclude
                                                   "sqv")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "Delta")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but -1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (expand "max")
                                        (("2"
                                          (expand "min")
                                          (("2"
                                            (lift-if)
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma "Delta_ge_0_2[DTHR]")
                                      (("3"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst + "t+t!1")
                                              (("1"
                                                (hide-all-but (-7 1))
                                                (("1"
                                                  (grind
                                                   :exclude
                                                   "sqv")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (hide-all-but -1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (replaces -1)
                                      (("4"
                                        (expand "max")
                                        (("4"
                                          (expand "min")
                                          (("4"
                                            (lift-if)
                                            (("4" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (expand "horizontal_RA" -5)
                                      (("5"
                                        (ground)
                                        (("1"
                                          (inst + "0")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (rewrite
                                               "sq_le"
                                               -2
                                               :dir
                                               rl)
                                              (("1"
                                                (rewrite "sq_norm")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst + "0")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (rewrite
                                               "sq_le"
                                               -1
                                               :dir
                                               rl)
                                              (("2"
                                                (rewrite "sq_norm")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (lemma "Delta_ge_0_2[DTHR]")
                                          (("3"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (lemma
                                                   "horizontal_tca_min")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (rewrite
                                                       "horizontal_sq_dtca_eq")
                                                      (("1"
                                                        (name
                                                         "tt"
                                                         "horizontal_tca(s,v)")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "tt >=t")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "tt-t")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-3
                                                                    -4
                                                                    10))
                                                                  (("1"
                                                                    (grind
                                                                     :exclude
                                                                     "sqv")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (mult-by
                                                                 1
                                                                 "sqv(v)")
                                                                (("1"
                                                                  (lemma
                                                                   "horizontal_tca_dot_zero")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-1
                                                                          1
                                                                          2))
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "sqv_eq_0")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (horizontal_WCV_taumod_interval_rew const-decl
     "[Lookahead[0, T], Lookahead[0, T]]" horizontal_WCV_taumod nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (taumod const-decl "real" horizontal_WCV_taumod nil)
    (horizontal_WCV const-decl "bool" horizontal_WCV nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_taumod nil)
    (TAUMOD formal-const-decl "nnreal" horizontal_WCV_taumod nil)
    (TimeVar type-eq-decl nil timevars nil)
    (timevar? const-decl "bool" timevars nil)
    (taumod_pre_timevar name-judgement "(pre_timevar?)"
     horizontal_WCV_taumod nil)
    (RA2D_interval_def formula-decl nil tcasra2d TCASII)
    (RA2D_interval const-decl "[real, real]" tcasra2d TCASII)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (horizontal_WCV_taumod_RA formula-decl nil horizontal_WCV_taumod
     nil)
    (sub_zero_right formula-decl nil vectors_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (horizontal_RA const-decl "bool" horizontal_RA TCASII)
    (horizontal_tca_min formula-decl nil definitions ACCoRD)
    (horizontal_sq_dtca_eq formula-decl nil definitions ACCoRD) nil nil
    nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (horizontal_tca_dot_zero formula-decl nil definitions ACCoRD)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (norm const-decl "nnreal" vectors_2D vectors)
    (sq_le formula-decl nil sq reals)
    (sq_norm formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (Delta const-decl "real" horizontal ACCoRD)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors) nil
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (horizontal_RA_at const-decl "bool" horizontal_RA TCASII)
    (zero const-decl "Vector" vectors_2D vectors))
   nil))
 (horizontal_WCV_taumod_interval_TCC1 0
  (horizontal_WCV_taumod_interval_TCC1-1 nil 3606513155
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (horizontal_WCV_taumod_interval subtype "0" "Lookahead[0, T]")))
 (horizontal_WCV_taumod_interval_TCC2 0
  (horizontal_WCV_taumod_interval_TCC2-1 nil 3606513155
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_taumod_interval subtype "horizontal_WCV_taumod.T"
    "Lookahead[0, T]")))
 (horizontal_WCV_taumod_interval_TCC3 0
  (horizontal_WCV_taumod_interval_TCC3-1 nil 3606513155
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (horizontal_WCV_taumod_interval subtype "0" "Lookahead[0, T]")))
 (horizontal_WCV_taumod_interval_TCC4 0
  (horizontal_WCV_taumod_interval_TCC4-1 nil 3606513155
   ("" (skeep*)
    (("" (assert)
      (("" (splash 2)
        (("1" (lemma "Delta_ge_0_2[DTHR]")
          (("1" (inst?)
            (("1" (assert)
              (("1" (inst 1 "0") (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors) nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_taumod nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_taumod_interval subtype "horizontal_WCV_taumod.v"
    "{nzv | reals.>=(horizontal[horizontal_WCV_taumod.DTHR].Delta(horizontal_WCV_taumod.s, horizontal.nzv), 0)}")))
 (horizontal_WCV_taumod_interval_TCC5 0
  (horizontal_WCV_taumod_interval_TCC5-1 nil 3606513155
   ("" (skeep*)
    (("" (assert)
      (("" (case-replace "v=zero")
        (("1" (assert) nil nil)
         ("2" (lemma "Delta_ge_0_2[DTHR]")
          (("2" (inst -1 "v" "s")
            (("1" (flatten)
              (("1" (hide -1)
                (("1" (split -1)
                  (("1" (min_max)
                    (("1"
                      (lemma "not_horiz_sep_inside_closed_Theta[DTHR]")
                      (("1" (inst -1 "v" "s" "0")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (inst 1 "0") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_taumod nil)
    (not_horiz_sep_inside_closed_Theta formula-decl nil horizontal
     ACCoRD)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (min_le formula-decl nil real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (min_ge formula-decl nil real_defs nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors) nil
    (/= const-decl "boolean" notequal nil)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_taumod_interval subtype
    "real_defs.min(horizontal_WCV_taumod.T, horizontal[horizontal_WCV_taumod.DTHR].Theta_D(horizontal_WCV_taumod.s, horizontal_WCV_taumod.v, 1))"
    "Lookahead[0, T]")))
 (horizontal_WCV_taumod_interval_TCC6 0
  (horizontal_WCV_taumod_interval_TCC6-1 nil 3606513155
   ("" (skeep*)
    (("" (lemma "sqv_eq_0")
      (("" (inst?)
        (("" (assert) (("" (replaces -1) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sqv_eq_0 formula-decl nil vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_taumod_interval subtype "horizontal_WCV_taumod.a"
    "nonzero_real")))
 (horizontal_WCV_taumod_interval_TCC7 0
  (horizontal_WCV_taumod_interval_TCC7-1 nil 3606513155
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_taumod_interval subtype "horizontal_WCV_taumod.T"
    "Lookahead[0, T]")))
 (horizontal_WCV_taumod_interval_TCC8 0
  (horizontal_WCV_taumod_interval_TCC8-1 nil 3606513155
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (horizontal_WCV_taumod_interval subtype "0" "Lookahead[0, T]")))
 (horizontal_WCV_taumod_interval_TCC9 0
  (horizontal_WCV_taumod_interval_TCC9-1 nil 3606513155
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_taumod_interval subtype "horizontal_WCV_taumod.c"
    "{c: reals.real | reals.>=(quadratic.discr(horizontal_WCV_taumod.a, horizontal_WCV_taumod.b, c), 0)}")))
 (horizontal_WCV_taumod_interval_TCC10 0
  (horizontal_WCV_taumod_interval_TCC10-1 nil 3606513155
   ("" (skeep*) (("" (min_max) (("" (postpone) nil nil)) nil)) nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (root const-decl "real" quadratic reals)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (discr const-decl "real" quadratic reals)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (max_le formula-decl nil real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_taumod_interval subtype
    "real_defs.max(0, quadratic.root(horizontal_WCV_taumod.a, horizontal_WCV_taumod.b, horizontal_WCV_taumod.c, (number_fields.-)(1)))"
    "Lookahead[0, T]")))
 (horizontal_WCV_taumod_interval_TCC11 0
  (horizontal_WCV_taumod_interval_TCC11-1 nil 3606513155
   ("" (skeep*) (("" (replaces -6) (("" (assert) nil nil)) nil)) nil)
   ((sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_taumod_interval subtype "horizontal_WCV_taumod.v"
    "{nzv | reals.>=(horizontal[horizontal_WCV_taumod.DTHR].Delta(horizontal_WCV_taumod.s, horizontal.nzv), 0)}")))
 (horizontal_WCV_taumod_interval_TCC12 0
  (horizontal_WCV_taumod_interval_TCC12-1 nil 3606513155
   ("" (skeep*)
    (("" (assert)
      (("" (assert)
        (("" (eval-expr "FALSE")
          (("" (replace -1 :hide? t)
            (("" (case "Theta_D[DTHR](s,v,1)>=0")
              (("1" (expand "min")
                (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)
               ("2" (hide-all-but (-3 1 2))
                (("2" (case "Theta_D[DTHR](s,v,1)>=-(s*v)/sqv(v)")
                  (("1" (case "NOT -(s*v)/sqv(v)>=0")
                    (("1" (assert)
                      (("1" (cross-mult 1)
                        (("1" (ground)
                          (("1" (lemma "sqv_eq_0")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (replaces -1)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (expand "Theta_D")
                    (("2" (expand "root2b")
                      (("2"
                        (typepred
                         "sqrt(discr2b(sqv(v), s * v, sqv(s) - sq(DTHR)))")
                        (("1" (mult-by -1 "1/sqv(v)")
                          (("1" (assert) nil nil)
                           ("2" (cross-mult 1)
                            (("2" (ground)
                              (("2"
                                (lemma "sqv_eq_0")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replaces -1)
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (with-tccs (grind)) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "/=")
                    (("3" (lemma "sqv_eq_0")
                      (("3" (inst?)
                        (("3" (assert)
                          (("3" (replaces -1) (("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FALSE const-decl "bool" booleans nil)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (DTHR formal-const-decl "posreal" horizontal_WCV_taumod nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "real" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_neg_ge1 formula-decl nil extra_real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (root2b const-decl "real" quadratic_2b reals)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (s skolem-const-decl "Vect2" horizontal_WCV_taumod nil)
    (v skolem-const-decl "Vect2" horizontal_WCV_taumod nil)
    (sqrt_0 formula-decl nil sqrt reals)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (discr2b const-decl "real" quadratic_2b reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_taumod_interval subtype
    "real_defs.min(horizontal_WCV_taumod.T, horizontal[horizontal_WCV_taumod.DTHR].Theta_D(horizontal_WCV_taumod.s, horizontal_WCV_taumod.v, 1))"
    "Lookahead[0, T]")))
 (horizontal_WCV_taumod_interval_TCC13 0
  (horizontal_WCV_taumod_interval_TCC13-1 nil 3606513155
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_taumod_interval subtype "horizontal_WCV_taumod.T"
    "Lookahead[0, T]")))
 (horizontal_WCV_taumod_interval_TCC14 0
  (horizontal_WCV_taumod_interval_TCC14-1 nil 3606513155
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (horizontal_WCV_taumod_interval subtype "0" "Lookahead[0, T]")))
 (horizontal_WCV_taumod_interval_eq 0
  (horizontal_WCV_taumod_interval_eq-1 nil 3606559658
   ("" (skeep)
    (("" (skoletin 1)
      (("" (skoletin 1)
        (("" (skoletin 1)
          (("" (skoletin 1)
            (("" (expand "horizontal_WCV_taumod_interval_rew")
              (("" (expand "RA2D_interval")
                (("" (assert)
                  (("" (lift-if)
                    (("" (split -)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (ground)
                              (("1"
                                (lemma "Delta_ge_0_2[DTHR]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst + "0")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (replaces -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "Delta_ge_0_2[DTHR]")
                                (("2"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst + "0")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (replaces -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (replaces -1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (expand
                                     "horizontal_WCV_taumod_interval")
                                    (("3"
                                      (replaces -5)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (expand
                                 "horizontal_WCV_taumod_interval")
                                (("4"
                                  (replaces -1)
                                  (("4"
                                    (replaces -5)
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (flatten)
                          (("2" (split -1)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split -)
                                    (("1" (flatten) nil nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case
                                                 "NOT Delta[DTHR](s, v) < 0")
                                                (("1"
                                                  (replace 1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "FORALL (bb:bool): (bb OR bb) = bb")
                                                      (("1"
                                                        (rewrite -1 -2)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (lemma
                                                             "not_horiz_sep_inside_closed_Theta[DTHR]")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "v"
                                                               "s"
                                                               "0")
                                                              (("1"
                                                                (case
                                                                 "NOT 0 <= Theta_D[DTHR](s, v, 1)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -2)
                                                                  (("2"
                                                                    (expand
                                                                     "Theta_D"
                                                                     -1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "root2b_root")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          2))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (flatten)
                                                                  (("3"
                                                                    (replaces
                                                                     -1)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 2))
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (lemma
                                                       "Delta_ge_0_2[DTHR]")
                                                      (("2"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             +
                                                             "0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "horizontal_WCV_taumod_interval")
                                                    (("2"
                                                      (replace -5)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "Theta_D")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (rewrite
                                                               "root2b_root")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (1 4))
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (split -)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand
                                           "horizontal_WCV_taumod_interval")
                                          (("1"
                                            (replace -1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (split -)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (expand
                                                   "horizontal_WCV_taumod_interval")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -5)
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "horizontal_WCV_taumod_interval")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (split
                                                                   -)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "horizontal_WCV_taumod_interval")
                                                          (("2"
                                                            (replace
                                                             -5)
                                                            (("2"
                                                              (replace
                                                               -2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (lift-if)
                                                  (("3"
                                                    (hide 4)
                                                    (("3"
                                                      (split -)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (lemma
                                                           "RA2D_entry_le_Theta[TAUMOD,DTHR,0,T]")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "zero"
                                                             "s"
                                                             "zero"
                                                             "v")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "NOT sqv(v)>0")
                                                                  (("1"
                                                                    (lemma
                                                                     "sqv_eq_0")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "Theta_D_le[DTHR]")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "root_le")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "sign(sqv(v)) = 1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "sign"
                                                                     1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (replace -2)
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (expand
                                                       "horizontal_WCV_taumod_interval")
                                                      (("4"
                                                        (replace -5)
                                                        (("4"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand
                                                 "horizontal_WCV_taumod_interval")
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (replace -4)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (horizontal_WCV_taumod_interval_rew const-decl
     "[Lookahead[0, T], Lookahead[0, T]]" horizontal_WCV_taumod nil)
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (horizontal_WCV_taumod_interval const-decl "EntryExit[0, T]"
     horizontal_WCV_taumod nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sub_zero_right formula-decl nil vectors_2D vectors)
    (max_id formula-decl nil min_max reals)
    (min_id formula-decl nil min_max reals)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil) nil
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (det const-decl "real" det_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (DTHR formal-const-decl "posreal" horizontal_WCV_taumod nil)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (RA2D_entry_le_Theta formula-decl nil tcasra2d TCASII)
    (TAUMOD formal-const-decl "nnreal" horizontal_WCV_taumod nil)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (Theta_D_le formula-decl nil horizontal ACCoRD)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sign const-decl "Sign" sign reals)
    (root_le formula-decl nil quadratic reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (root2b_root formula-decl nil quadratic_2b reals)
    (discr2b const-decl "real" quadratic_2b reals)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (not_horiz_sep_inside_closed_Theta formula-decl nil horizontal
     ACCoRD)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (root const-decl "real" quadratic reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (discr const-decl "real" quadratic reals)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (RA2D_interval const-decl "[real, real]" tcasra2d TCASII)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals))
   shostak))
 (horizontal_WCV_taumod_interval_def 0
  (horizontal_WCV_taumod_interval_def-1 nil 3606555510
   ("" (skeep)
    (("" (skoletin 1)
      (("" (skoletin 1)
        (("" (lemma "horizontal_WCV_taumod_interval_rew_def")
          (("" (inst?)
            (("" (skoletin -1)
              (("" (assert)
                (("" (lemma "horizontal_WCV_taumod_interval_eq")
                  (("" (inst?)
                    (("" (skoletin -1)
                      (("" (skoletin -1)
                        (("" (skoletin -1)
                          (("" (skoletin -1)
                            (("" (assert) (("" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (horizontal_WCV_taumod_interval const-decl "EntryExit[0, T]"
     horizontal_WCV_taumod nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (taumod const-decl "real" horizontal_WCV_taumod nil)
    (horizontal_WCV const-decl "bool" horizontal_WCV nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_taumod nil)
    (TAUMOD formal-const-decl "nnreal" horizontal_WCV_taumod nil)
    (TimeVar type-eq-decl nil timevars nil)
    (timevar? const-decl "bool" timevars nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (taumod_pre_timevar name-judgement "(pre_timevar?)"
     horizontal_WCV_taumod nil)
    (horizontal_WCV_taumod_interval_rew_def formula-decl nil
     horizontal_WCV_taumod nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (horizontal_WCV_taumod_interval_rew const-decl
     "[Lookahead[0, T], Lookahead[0, T]]" horizontal_WCV_taumod nil)
    (horizontal_WCV_taumod_interval_eq formula-decl nil
     horizontal_WCV_taumod nil))
   shostak))
 (horizontal_WCV_taumod_interval_correct 0
  (horizontal_WCV_taumod_interval_correct-1 nil 3625225398
   ("" (expand "horizontal_interval_correct?" :assert? none)
    (("" (skeep)
      (("" (skoletin*)
        (("" (lemma "horizontal_WCV_taumod_interval_rew_def")
          (("" (inst?)
            (("" (skoletin -1)
              (("" (assert)
                (("" (lemma "horizontal_WCV_taumod_interval_eq")
                  (("" (inst?)
                    (("" (skoletin*)
                      (("" (assert) (("" (ground) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((horizontal_WCV_taumod_interval_rew_def formula-decl nil
     horizontal_WCV_taumod nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (horizontal_WCV_taumod_interval_rew const-decl
     "[Lookahead[0, T], Lookahead[0, T]]" horizontal_WCV_taumod nil)
    (horizontal_WCV_taumod_interval_eq formula-decl nil
     horizontal_WCV_taumod nil)
    (taumod_pre_timevar name-judgement "(pre_timevar?)"
     horizontal_WCV_taumod nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (timevar? const-decl "bool" timevars nil)
    (TimeVar type-eq-decl nil timevars nil)
    (TAUMOD formal-const-decl "nnreal" horizontal_WCV_taumod nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_taumod nil)
    (horizontal_WCV const-decl "bool" horizontal_WCV nil)
    (taumod const-decl "real" horizontal_WCV_taumod nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (horizontal_WCV_taumod_interval const-decl "EntryExit[0, T]"
     horizontal_WCV_taumod nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (horizontal_interval_correct? const-decl "bool" horizontal_WCV
     nil))
   nil))
 (horizontal_WCV_taumod_interval_sound 0
  (horizontal_WCV_taumod_interval_sound-1 nil 3621797939
   ("" (rewrite "horizontal_interval_correct_is_sound")
    (("" (rewrite "horizontal_WCV_taumod_interval_correct") nil nil))
    nil)
   ((horizontal_WCV_taumod_interval_correct formula-decl nil
     horizontal_WCV_taumod nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_taumod nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TAUMOD formal-const-decl "nnreal" horizontal_WCV_taumod nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (horizontal_WCV_taumod_interval const-decl "EntryExit[0, T]"
     horizontal_WCV_taumod nil)
    (HorizontalInterval type-eq-decl nil horizontal_WCV nil)
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (taumod const-decl "real" horizontal_WCV_taumod nil)
    (TimeVar type-eq-decl nil timevars nil)
    (timevar? const-decl "bool" timevars nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (horizontal_interval_correct_is_sound formula-decl nil
     horizontal_WCV nil)
    (taumod_pre_timevar name-judgement "(pre_timevar?)"
     horizontal_WCV_taumod nil))
   shostak)))

