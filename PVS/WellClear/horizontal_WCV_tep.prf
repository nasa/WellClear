(horizontal_WCV_tep
 (tep_TCC1 0
  (tep_TCC1-1 nil 3598396273
   ("" (skeep) (("" (replaces -3) (("" (assert) nil nil)) nil)) nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dot_zero_right formula-decl nil vectors_2D vectors))
   nil
   (tep subtype "horizontal_WCV_tep.v"
    "{nzv | reals.>=(horizontal[horizontal_WCV_tep.DTHR].Delta(horizontal_WCV_tep.s, horizontal.nzv), 0)}")))
 (tep_timevar 0
  (tep_timevar-1 nil 3606393934
   ("" (expand "timevar?")
    (("" (skeep) (("" (expand "tep") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tep const-decl "real" horizontal_WCV_tep nil)
    (timevar? const-decl "bool" timevars nil))
   nil (tep_timevar subtype "horizontal_WCV_tep.tep" "TimeVar")))
 (pre_Delta_ge_0 0
  (pre_Delta_ge_0-1 nil 3606467243
   ("" (skeep)
    (("" (expand "pre_le?")
      (("" (flatten)
        (("" (lemma "Delta_ge_0_2[DTHR]")
          (("" (inst?)
            (("1" (assert) (("1" (inst?) nil nil)) nil)
             ("2" (flatten)
              (("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pre_le? const-decl "bool" horizontal_WCV nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tep nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (tcpa_timevar name-judgement "TimeVar" timevars nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tcpa const-decl "real" timevars nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors) nil
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors))
   nil))
 (tep_pre_timevar 0
  (tep_pre_timevar-2 nil 3606478701
   ("" (expand "pre_timevar?")
    (("" (skeep)
      (("" (lemma "pre_Delta_ge_0")
        (("" (insteep)
          (("" (assert)
            (("" (expand "pre_le?")
              (("" (flatten)
                (("" (expand "tep")
                  (("" (assert)
                    (("" (lemma "Theta_D_ge_0[DTHR]")
                      (("" (inst?)
                        (("" (assert)
                          (("" (case "Theta_D[DTHR](s,v,-1) = 0")
                            (("1" (lemma "Theta_D_on_D[DTHR]")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (replaces -2)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (pre_le? const-decl "bool" horizontal_WCV nil)
    (tep const-decl "real" horizontal_WCV_tep nil)
    (Theta_D_ge_0 formula-decl nil horizontal ACCoRD)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tep nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Theta_D_on_D formula-decl nil horizontal ACCoRD)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (Sp_vect2 type-eq-decl nil horizontal ACCoRD)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (tcpa_timevar name-judgement "TimeVar" timevars nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tep_timevar name-judgement "TimeVar" horizontal_WCV_tep nil)
    (pre_Delta_ge_0 formula-decl nil horizontal_WCV_tep nil)
    (pre_timevar? const-decl "bool" horizontal_WCV nil))
   nil
   (tep_pre_timevar subtype "horizontal_WCV_tep.tep"
    "(horizontal_WCV[horizontal_WCV_tep.TEP, horizontal_WCV_tep.DTHR].pre_timevar?)"))
  (tep_pre_timevar-1 nil 3606478701 ("" (judgement-tcc) nil nil) nil
   nil
   (tep_pre_timevar subtype "horizontal_WCV_tep.tep"
    "(horizontal_WCV[horizontal_WCV_tep.TEP, horizontal_WCV_tep.DTHR].pre_timevar?)")))
 (tep_symm 0
  (tep_symm-2 nil 3598398894
   ("" (expand "symmetric?")
    (("" (skeep)
      (("" (expand "tep")
        (("" (case-replace "-s*-v = s*v")
          (("1" (rewrite "Delta_symm")
            (("1" (case-replace "s*v < 0")
              (("1" (rewrite "Theta_D_symm[DTHR]")
                (("1" (hide 2)
                  (("1" (flatten)
                    (("1" (replaces -1) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil)
           ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "real" vectors_2D vectors) nil
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (< const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (neg_cont name-judgement "continuous_vv_fun" vect_cont_2D
     vect_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Theta_D_symm formula-decl nil horizontal ACCoRD)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tep nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Delta_symm formula-decl nil horizontal ACCoRD)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (tep const-decl "real" horizontal_WCV_tep nil)
    (symmetric? const-decl "bool" timevars nil))
   nil)
  (tep_symm-1 nil 3598398889 ("" (postpone) nil nil) nil shostak))
 (horizontal_WCV_tep_symm 0
  (horizontal_WCV_tep_symm-1 nil 3598399619
   ("" (skeep)
    (("" (rewrite "horizontal_WCV_symm")
      (("" (rewrite "tep_symm") nil nil)) nil))
    nil)
   ((tep_pre_timevar name-judgement "(pre_timevar?)" horizontal_WCV_tep
     nil)
    (horizontal_WCV_symm formula-decl nil horizontal_WCV nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (timevar? const-decl "bool" timevars nil)
    (TimeVar type-eq-decl nil timevars nil)
    (tep const-decl "real" horizontal_WCV_tep nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (TEP formal-const-decl "nnreal" horizontal_WCV_tep nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tep nil)
    (neg_cont name-judgement "continuous_vv_fun" vect_cont_2D
     vect_analysis)
    (tep_symm formula-decl nil horizontal_WCV_tep nil))
   nil))
 (horizontal_WCV_tep_def_TCC1 0
  (horizontal_WCV_tep_def_TCC1-1 nil 3598397086
   ("" (subtype-tcc) nil nil)
   ((comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq const-decl "nonneg_real" sq reals)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (Delta const-decl "real" horizontal ACCoRD)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (horizontal_WCV_tep_def subtype "horizontal_WCV_tep.v" "Nz_vect2")))
 (horizontal_WCV_tep_eq 0
  (horizontal_WCV_tep_eq-2 nil 3595617554
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "horizontal_WCV")
          (("1" (expand "horizontal_WCV_tep_def")
            (("1" (flatten)
              (("1" (expand "tcpa")
                (("1" (expand "tep")
                  (("1"
                    (case-replace
                     "s * v < 0 AND Delta[DTHR](s, v) >= 0")
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (case-replace "v /= zero")
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1" (rewrite "sqv_eq_0") nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (replaces -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace 1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "horizontal_WCV")
          (("2" (expand "horizontal_WCV_tep_def")
            (("2" (flatten)
              (("2" (assert)
                (("2" (flatten)
                  (("2" (expand "tcpa")
                    (("2" (expand "tep")
                      (("2" (case-replace "s*v = 0")
                        (("1" (assert)
                          (("1" (expand "horizontal_tca")
                            (("1" (replaces -1)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (case-replace "v /= zero")
                            (("1" (assert)
                              (("1"
                                (lemma "Theta_D_ge_0[DTHR]")
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 2))
                              (("2"
                                (flatten)
                                (("2"
                                  (replaces -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((horizontal_WCV const-decl "bool" horizontal_WCV nil)
    (tep const-decl "real" horizontal_WCV_tep nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (Delta const-decl "real" horizontal ACCoRD)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tep nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (* const-decl "real" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tcpa const-decl "real" timevars nil)
    (horizontal_WCV_tep_def const-decl "bool" horizontal_WCV_tep nil)
    (Sp_vect2 type-eq-decl nil horizontal ACCoRD)
    (sq const-decl "nonneg_real" sq reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Theta_D_ge_0 formula-decl nil horizontal ACCoRD)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (tcpa_timevar name-judgement "TimeVar" timevars nil))
   nil)
  (horizontal_WCV_tep_eq-1 nil 3595617541 ("" (postpone) nil nil) nil
   shostak))
 (horizontal_WCV_tep_rew_TCC1 0
  (horizontal_WCV_tep_rew_TCC1-1 nil 3598458975
   ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (horizontal_WCV_tep_rew subtype "horizontal_WCV_tep.v" "Nz_vect2")))
 (horizontal_WCV_tep_rew_TCC2 0
  (horizontal_WCV_tep_rew_TCC2-1 nil 3598458975
   ("" (skeep)
    (("" (splash 2)
      (("1" (flatten)
        (("1" (lemma "Delta_ge_0_2[DTHR]")
          (("1" (inst?) (("1" (assert) (("1" (inst?) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tep nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors))
   nil
   (horizontal_WCV_tep_rew subtype "horizontal_WCV_tep.v"
    "{nzv | reals.>=(horizontal[horizontal_WCV_tep.DTHR].Delta(horizontal_WCV_tep.s, horizontal.nzv), 0)}")))
 (horizontal_WCV_tep_rew 0
  (horizontal_WCV_tep_rew-1 nil 3598459131
   ("" (skeep)
    (("" (rewrite "horizontal_WCV_tep_eq")
      (("" (expand "horizontal_WCV_tep_def")
        (("" (ground)
          (("1" (case "s*v = 0")
            (("1" (expand "horizontal_tca")
              (("1" (replaces -1) (("1" (assert) nil nil)) nil)) nil)
             ("2" (assert) nil nil))
            nil)
           ("2" (rewrite "sqv_eq_0")
            (("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil)
           ("3" (lemma "Delta_ge_0_2[DTHR]")
            (("3" (inst?) (("3" (assert) (("3" (inst?) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((horizontal_WCV_tep_eq formula-decl nil horizontal_WCV_tep nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "real" vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tep nil)
    (horizontal_WCV_tep_def const-decl "bool" horizontal_WCV_tep nil))
   shostak))
 (horizontal_WCV_tep_interval_TCC1 0
  (horizontal_WCV_tep_interval_TCC1-1 nil 3592299698
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (horizontal_WCV_tep_interval subtype "0" "Lookahead[0, T]")))
 (horizontal_WCV_tep_interval_TCC2 0
  (horizontal_WCV_tep_interval_TCC2-2 nil 3621805124
   ("" (skeep)
    (("" (case "v = zero")
      (("1" (replaces -1) (("1" (assert) nil nil)) nil)
       ("2" (assert)
        (("2" (lemma "Delta_ge_0_2[DTHR]")
          (("2" (inst?)
            (("2" (assert)
              (("2" (inst + "0") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tep nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors))
   nil
   (horizontal_WCV_tep_interval subtype "horizontal_WCV_tep.v"
    "{nzv | reals.>=(horizontal[horizontal_WCV_tep.DTHR].Delta(horizontal_WCV_tep.s, horizontal.nzv), 0)}"))
  (horizontal_WCV_tep_interval_TCC2-1 nil 3592299698
   ("" (subtype-tcc) nil nil)
   ((* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals))
   nil
   (horizontal_WCV_tep_interval subtype "horizontal_WCV_tep.v"
    "{nzv | reals.>=(horizontal[horizontal_WCV_tep.DTHR].Delta(horizontal_WCV_tep.s, horizontal.nzv), 0)}")))
 (horizontal_WCV_tep_interval_TCC3 0
  (horizontal_WCV_tep_interval_TCC3-1 nil 3592299698
   ("" (skeep)
    (("" (case "v = zero")
      (("1" (replaces -1) (("1" (assert) nil nil)) nil)
       ("2" (assert)
        (("2" (lemma "horizontal_sep_outside_Theta[DTHR]")
          (("2" (inst?)
            (("2" (assert)
              (("2" (inst - "0")
                (("2" (assert)
                  (("2" (split -)
                    (("1" (expand "min")
                      (("1" (lift-if) (("1" (ground) nil nil)) nil))
                      nil)
                     ("2" (lemma "Delta_ge_0_2[DTHR]")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (inst + "0") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tep nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (horizontal_sep_outside_Theta formula-decl nil horizontal ACCoRD)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (horizontal_WCV_tep_interval subtype
    "real_defs.min(horizontal_WCV_tep.T, horizontal[horizontal_WCV_tep.DTHR].Theta_D(horizontal_WCV_tep.s, horizontal_WCV_tep.v, 1))"
    "Lookahead[0, T]")))
 (horizontal_WCV_tep_interval_TCC4 0
  (horizontal_WCV_tep_interval_TCC4-2 nil 3621804885
   ("" (skeep)
    (("" (assert)
      (("" (flatten) (("" (replaces -1) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors))
   nil
   (horizontal_WCV_tep_interval subtype "horizontal_WCV_tep.v"
    "{nzv | reals.>=(horizontal[horizontal_WCV_tep.DTHR].Delta(horizontal_WCV_tep.s, horizontal.nzv), 0)}"))
  (horizontal_WCV_tep_interval_TCC4-1 nil 3592299698
   ("" (subtype-tcc) nil nil)
   ((* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals))
   nil
   (horizontal_WCV_tep_interval subtype "horizontal_WCV_tep.v"
    "{nzv | reals.>=(horizontal[horizontal_WCV_tep.DTHR].Delta(horizontal_WCV_tep.s, horizontal.nzv), 0)}")))
 (horizontal_WCV_tep_interval_TCC5 0
  (horizontal_WCV_tep_interval_TCC5-2 nil 3621806192
   ("" (skeep) (("" (assert) (("" (min_max) nil nil)) nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max_le formula-decl nil real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tep nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (nnreal type-eq-decl nil real_types nil)
    (TEP formal-const-decl "nnreal" horizontal_WCV_tep nil)
    (max_ge formula-decl nil real_defs nil))
   nil
   (horizontal_WCV_tep_interval subtype
    "real_defs.max(0, (number_fields.-)(horizontal[horizontal_WCV_tep.DTHR].Theta_D(horizontal_WCV_tep.s, horizontal_WCV_tep.v, (number_fields.-)(1)), horizontal_WCV_tep.TEP))"
    "Lookahead[0, T]")))
 (horizontal_WCV_tep_interval_TCC6 0
  (horizontal_WCV_tep_interval_TCC6-3 nil 3621807654
   ("" (skeep)
    (("" (assert)
      (("" (eval-expr "FALSE")
        (("" (replaces -1)
          (("" (ground)
            (("" (expand "min")
              (("" (lift-if)
                (("" (ground)
                  (("" (lemma "horizontal_tca_dot_zero")
                    (("" (inst - "v" "s")
                      (("" (lemma "Theta_D_horizontal_dir[DTHR]")
                        (("" (inst?)
                          (("" (assert)
                            (("" (split -)
                              (("1"
                                (mult-by 1 "sqv(v)")
                                (("1"
                                  (grind
                                   :exclude
                                   ("Theta_D"
                                    "Delta"
                                    "horizontal_tca"))
                                  nil
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (replaces -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (* const-decl "real" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Delta const-decl "real" horizontal ACCoRD)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tep nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Theta_D_horizontal_dir formula-decl nil horizontal ACCoRD)
    (horizontal_tca_dot_zero formula-decl nil definitions ACCoRD)
    (FALSE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (horizontal_WCV_tep_interval subtype
    "real_defs.min(horizontal_WCV_tep.T, horizontal[horizontal_WCV_tep.DTHR].Theta_D(horizontal_WCV_tep.s, horizontal_WCV_tep.v, 1))"
    "Lookahead[0, T]")))
 (horizontal_WCV_tep_interval_def 0
  (horizontal_WCV_tep_interval_def-2 nil 3595617666
   ("" (skeep)
    (("" (rewrite "horizontal_WCV_tep_eq")
      (("" (skoletin 1)
        (("" (skoletin 1)
          (("" (label "final" 1)
            (("" (label "nwcexitdef" -1)
              (("" (label "nwcentrydef" -2)
                (("" (label "nwcentryexitdef" -3)
                  (("" (hide "final")
                    (("" (expand "horizontal_WCV_tep_interval")
                      (("" (lift-if)
                        (("" (split -)
                          (("1" (flatten)
                            (("1" (lemma "sqv_eq_0")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (reveal "final")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand
                                           "horizontal_WCV_tep_def")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split -)
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma "sqv_eq_0")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (reveal "final")
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (replace
                                                 "nwcentryexitdef")
                                                (("1"
                                                  (replace
                                                   "nwcexitdef")
                                                  (("1"
                                                    (replace
                                                     "nwcentrydef")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (invoke
                                                         (case "%1")
                                                         (! 1 2))
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (replace 1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replaces
                                                               -2)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "horizontal_WCV_tep_def"
                                                                   -1)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (case "v = zero")
                                  (("1"
                                    (replaces -1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (delabel +)
                                    (("2"
                                      (label "iggypop" (2 3))
                                      (("2"
                                        (delabel "iggypop")
                                        (("2"
                                          (split -)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (reveal "final")
                                                (("1"
                                                  (replace
                                                   "nwcentrydef")
                                                  (("1"
                                                    (replace
                                                     "nwcexitdef")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split +)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "min")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (expand
                                                                       "horizontal_WCV_tep_def")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "sqv(s + t * v) <= sq(DTHR)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               -7)
                                                                              (("1"
                                                                                (lemma
                                                                                 "horizontal_sep_outside_Theta[DTHR]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "v"
                                                                                   "s"
                                                                                   "t")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "Delta_ge_0_2[DTHR]")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "t")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (lemma
                                                                                 "Theta_D_horizontal_dir[DTHR]")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -)
                                                                                      (("1"
                                                                                        (mult-by
                                                                                         2
                                                                                         "sqv(v)")
                                                                                        (("1"
                                                                                          (grind
                                                                                           :exclude
                                                                                           ("Theta_D"
                                                                                            "min"
                                                                                            "Delta"
                                                                                            "horizontal_tca"))
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "Delta_ge_0_2[DTHR]")
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "0")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "Delta_ge_0_2[DTHR]")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "0")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (case
                                                                 "NOT t<=Theta_D[DTHR](s,v,1)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "horizontal_WCV_tep_def")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (lemma
                                                                           "horizontal_sep_outside_Theta[DTHR]")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "horizontal_sep_outside_Theta[DTHR]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "v"
                                                                                     "s"
                                                                                     "0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "Delta_ge_0_2[DTHR]")
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "0")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "Delta_ge_0_2[DTHR]")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "0")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (lemma
                                                                   "Delta_ge_0_2[DTHR]")
                                                                  (("3"
                                                                    (inst?)
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (inst
                                                                         +
                                                                         "0")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (label "iggypop" +)
                                                (("2"
                                                  (delabel "iggypop")
                                                  (("2"
                                                    (hide 4)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (reveal
                                                           "final")
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (replace
                                                               "nwcexitdef")
                                                              (("1"
                                                                (replace
                                                                 "nwcentrydef")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (invoke
                                                                     (case
                                                                      "%1")
                                                                     (!
                                                                      1
                                                                      2))
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "horizontal_WCV_tep_def"
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "s*v>0")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   -3)
                                                                                  (("1"
                                                                                    (case
                                                                                     "NOT FORALL (tt:nnreal): sqv(s+tt*v)>sq(DTHR)")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -2)
                                                                                      (("1"
                                                                                        (case
                                                                                         "horizontal_tca(s,v)<0")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "sqv_increasing_after_horizontal_tca")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "v"
                                                                                             "s")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "tt"
                                                                                                   "0")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "tt = 0")
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "horizontal_tca"
                                                                                           1)
                                                                                          (("2"
                                                                                            (cross-mult
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst-cp
                                                                                       -
                                                                                       "t")
                                                                                      (("2"
                                                                                        (split
                                                                                         -)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "sqv(v)")
                                                                                            (("2"
                                                                                              (mult-by
                                                                                               -1
                                                                                               "t")
                                                                                              (("2"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  -4
                                                                                                  -8))
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 1)
                                                                                (("2"
                                                                                  (case
                                                                                   "Delta[DTHR](s,v)<0")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -3)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "Delta_ge_0_2[DTHR]")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "v"
                                                                                         "s")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "t + horizontal_tca(s+t*v,v)")
                                                                                                (("2"
                                                                                                  (hide-all-but
                                                                                                   (-2
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (grind
                                                                                                     :exclude
                                                                                                     ("horizontal_tca"
                                                                                                      "sqv"))
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "t")
                                                                                      (("2"
                                                                                        (split
                                                                                         -)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "horizontal_sep_outside_Theta[DTHR]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "v"
                                                                                             "s"
                                                                                             "t")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (case
                                                                                             "horizontal_tca(s+t*v,v)>=0")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "horizontal_sep_outside_Theta[DTHR]")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "v"
                                                                                                 "s"
                                                                                                 "t+horizontal_tca(s+t*v,v)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (-1
                                                                                                            -4))
                                                                                                          (("1"
                                                                                                            (grind
                                                                                                             :exclude
                                                                                                             ("horizontal_tca"
                                                                                                              "sqv"))
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "horizontal_tca(s+t*v,v) = horizontal_tca(s,v)-t")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "Theta_D[DTHR](s+t*v,v,-1) = Theta_D[DTHR](s,v,-1)-t")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       (-3
                                                                                                                        1
                                                                                                                        4))
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "Theta_D")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "root2b")
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "NOT discr2b(sqv(v), (s + t * v) * v, sqv(s + t * v) - sq(DTHR)) = discr2b(sqv(v), s * v, sqv(s) - sq(DTHR))")
                                                                                                                            (("1"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (replaces
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (hide-all-but
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (grind
                                                                                                                                     :exclude
                                                                                                                                     "discr2b")
                                                                                                                                    (("2"
                                                                                                                                      (field)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  (("2"
                                                                                                                    (field)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "horizontal_tca"
                                                                                               1)
                                                                                              (("2"
                                                                                                (cross-mult
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (reveal
                                                           "final")
                                                          (("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (ground)
                                                                    (("1"
                                                                      (expand
                                                                       "max"
                                                                       1)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (expand
                                                                             "horizontal_WCV_tep_def")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split
                                                                                 -)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "horizontal_sep_outside_Theta[DTHR]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "v"
                                                                                     "s"
                                                                                     "t")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (case
                                                                                     "Theta_D[DTHR](s+t*v,v,-1) = Theta_D[DTHR](s,v,-1)-t")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "Theta_D")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "root2b")
                                                                                          (("2"
                                                                                            (case
                                                                                             "NOT discr2b(sqv(v), (s + t * v) * v, sqv(s + t * v) - sq(DTHR)) = discr2b(sqv(v), s * v, sqv(s) - sq(DTHR))")
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("2"
                                                                                                (grind
                                                                                                 :exclude
                                                                                                 "discr2b")
                                                                                                (("2"
                                                                                                  (field)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "min"
                                                                       1)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (ground)
                                                                          (("2"
                                                                            (expand
                                                                             "horizontal_WCV_tep_def")
                                                                            (("2"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (lemma
                                                                                 "horizontal_sep_outside_Theta[DTHR]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "v"
                                                                                   "s"
                                                                                   "t")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "sqv_increasing_after_horizontal_tca")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "v"
                                                                                       "s")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (case
                                                                                           "horizontal_tca(s+t*v,v) >=0")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "t"
                                                                                             "t+horizontal_tca(s+t*v,v)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "sqv(s+t*v)>sq(DTHR)")
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      -4
                                                                                                      1))
                                                                                                    (("1"
                                                                                                      (grind
                                                                                                       :exclude
                                                                                                       ("sqv"
                                                                                                        "horizontal_tca"))
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "horizontal_sep_outside_Theta[DTHR]")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "v"
                                                                                                         "s"
                                                                                                         "t")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "horizontal_tca(s,v) <= Theta_D[DTHR](s,v,1)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "Theta_D"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "root2b"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (grind
                                                                                                           :exclude
                                                                                                           ("sqrt"
                                                                                                            "discr2b"))
                                                                                                          (("2"
                                                                                                            (field)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (assert)
                                                                                                  (("3"
                                                                                                    (case
                                                                                                     "horizontal_tca(s+t*v,v) = horizontal_tca(s,v)-t")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        (("2"
                                                                                                          (field)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "horizontal_tca"
                                                                                             1)
                                                                                            (("2"
                                                                                              (cross-mult
                                                                                               1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (expand
                                                                       "horizontal_WCV_tep_def")
                                                                      (("3"
                                                                        (flatten)
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (case
                                                                             "NOT (t>= Theta_D[DTHR](s, v, -1) - TEP AND t<=Theta_D[DTHR](s, v, 1))")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               (-2
                                                                                -3))
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (case
                                                                                     "NOT Delta[DTHR](s+t*v,v)>=0")
                                                                                    (("1"
                                                                                      (hide
                                                                                       3)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "Delta_eq[DTHR]")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "s"
                                                                                           "t"
                                                                                           "v")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "Delta_ge_0_2[DTHR]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "v"
                                                                                             "s")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (skeep
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "horizontal_tca_min")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "v"
                                                                                                     "s"
                                                                                                     "t!1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "horizontal_sq_dtca_eq")
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "s + horizontal_tca(s,v)*v = (s+t*v) + horizontal_tca(s+t*v,v)*v")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                (("1"
                                                                                                                  (field)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (field)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "NOT t<=Theta_D[DTHR](s,v,-1)")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "horizontal_sep_outside_Theta[DTHR]")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "v"
                                                                                               "s"
                                                                                               "t")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "Theta_D_horizontal_dir[DTHR]")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (mult-by
                                                                                                   -2
                                                                                                   "sqv(v)")
                                                                                                  (("2"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      -2
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (grind
                                                                                                       :exclude
                                                                                                       "Theta_D")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (case
                                                                                             "Theta_D[DTHR](s+t*v,v,-1) = Theta_D[DTHR](s,v,-1)-t")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "Theta_D")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "root2b")
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "discr2b(sqv(v), (s + t * v) * v, sqv(s + t * v) - sq(DTHR)) = discr2b(sqv(v), s * v, sqv(s) - sq(DTHR))")
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (grind
                                                                                                         :exclude
                                                                                                         ("sqrt"
                                                                                                          "discr2b"))
                                                                                                        (("1"
                                                                                                          (field)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((horizontal_WCV_tep_eq formula-decl nil horizontal_WCV_tep nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tep nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (horizontal_sep_outside_Theta formula-decl nil horizontal ACCoRD)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Delta const-decl "real" horizontal ACCoRD) nil nil
    (Theta_D const-decl "real" horizontal ACCoRD)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Theta_D_horizontal_dir formula-decl nil horizontal ACCoRD)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (sqv_increasing_after_horizontal_tca formula-decl nil definitions
     ACCoRD)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (root2b const-decl "real" quadratic_2b reals)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil) nil
    (div_cancel2 formula-decl nil real_props nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (discr2b const-decl "real" quadratic_2b reals)
    (nzreal nonempty-type-eq-decl nil reals nil) nil
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (horizontal_tca_min formula-decl nil definitions ACCoRD)
    (horizontal_sq_dtca_eq formula-decl nil definitions ACCoRD)
    (Delta_eq formula-decl nil horizontal ACCoRD)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (TEP formal-const-decl "nnreal" horizontal_WCV_tep nil) nil
    (le_minus_le formula-decl nil real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (horizontal_WCV_tep_def const-decl "bool" horizontal_WCV_tep nil)
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (horizontal_WCV_tep_interval const-decl "EntryExit[0, T]"
     horizontal_WCV_tep nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (horizontal_WCV_tep_interval_def-1 nil 3592302951
   ("" (skeep)
    (("" (skoletin 1)
      (("" (skoletin 1)
        (("" (label "final" 1)
          (("" (label "nwcexitdef" -1)
            (("" (label "nwcentrydef" -2)
              (("" (label "nwcentryexitdef" -3)
                (("" (hide "final")
                  (("" (expand "horizontal_WCV_tep_interval")
                    (("" (lift-if)
                      (("" (split -)
                        (("1" (flatten)
                          (("1" (lemma "sqv_eq_0")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (reveal "final")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "horizontal_WCV_tep")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split -)
                            (("1" (flatten)
                              (("1"
                                (lemma "sqv_eq_0")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (reveal "final")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (replace
                                               "nwcentryexitdef")
                                              (("1"
                                                (replace "nwcexitdef")
                                                (("1"
                                                  (replace
                                                   "nwcentrydef")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (invoke
                                                       (case "%1")
                                                       (! 1 2))
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (replace 1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replaces
                                                             -2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "horizontal_WCV_tep"
                                                                 -1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (case "v = zero")
                                (("1"
                                  (replaces -1)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (delabel +)
                                  (("2"
                                    (label "iggypop" (2 3))
                                    (("2"
                                      (delabel "iggypop")
                                      (("2"
                                        (split -)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (reveal "final")
                                              (("1"
                                                (replace "nwcentrydef")
                                                (("1"
                                                  (replace
                                                   "nwcexitdef")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split +)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "min")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (expand
                                                                     "horizontal_WCV_tep")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "sqv(s + t * v) <= sq(DTHR)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -7)
                                                                            (("1"
                                                                              (lemma
                                                                               "horizontal_sep_outside_Theta[DTHR]")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "v"
                                                                                 "s"
                                                                                 "t")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "Delta_ge_0_2[DTHR]")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           +
                                                                                           "t")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (lemma
                                                                               "Theta_D_horizontal_dir[DTHR]")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -)
                                                                                    (("1"
                                                                                      (mult-by
                                                                                       2
                                                                                       "sqv(v)")
                                                                                      (("1"
                                                                                        (grind
                                                                                         :exclude
                                                                                         ("Theta_D"
                                                                                          "min"
                                                                                          "Delta"
                                                                                          "horizontal_tca"))
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "Delta_ge_0_2[DTHR]")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "0")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "Delta_ge_0_2[DTHR]")
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "0")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (case
                                                               "NOT t<=Theta_D[DTHR](s,v,1)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -2)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "horizontal_WCV_tep")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lemma
                                                                         "horizontal_sep_outside_Theta[DTHR]")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "horizontal_sep_outside_Theta[DTHR]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "v"
                                                                                   "s"
                                                                                   "0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "Delta_ge_0_2[DTHR]")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "Delta_ge_0_2[DTHR]")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "0")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (lemma
                                                                 "Delta_ge_0_2[DTHR]")
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (inst
                                                                       +
                                                                       "0")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (label "iggypop" +)
                                              (("2"
                                                (delabel "iggypop")
                                                (("2"
                                                  (hide 4)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (reveal
                                                         "final")
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (replace
                                                             "nwcexitdef")
                                                            (("1"
                                                              (replace
                                                               "nwcentrydef")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (invoke
                                                                   (case
                                                                    "%1")
                                                                   (!
                                                                    1
                                                                    2))
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "horizontal_WCV_tep"
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "s*v>0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -3)
                                                                                (("1"
                                                                                  (case
                                                                                   "NOT FORALL (tt:nnreal): sqv(s+tt*v)>sq(DTHR)")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (case
                                                                                       "horizontal_tca(s,v)<0")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "sqv_increasing_after_horizontal_tca")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "v"
                                                                                           "s")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "tt"
                                                                                                 "0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "tt = 0")
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "horizontal_tca"
                                                                                         1)
                                                                                        (("2"
                                                                                          (cross-mult
                                                                                           1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (inst-cp
                                                                                     -
                                                                                     "t")
                                                                                    (("2"
                                                                                      (split
                                                                                       -)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "sqv(v)")
                                                                                          (("2"
                                                                                            (mult-by
                                                                                             -1
                                                                                             "t")
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                -4
                                                                                                -8))
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               1)
                                                                              (("2"
                                                                                (case
                                                                                 "Delta[DTHR](s,v)<0")
                                                                                (("1"
                                                                                  (hide
                                                                                   -3)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "Delta_ge_0_2[DTHR]")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "v"
                                                                                       "s")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "t + horizontal_tca(s+t*v,v)")
                                                                                              (("2"
                                                                                                (hide-all-but
                                                                                                 (-2
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (grind
                                                                                                   :exclude
                                                                                                   ("horizontal_tca"
                                                                                                    "sqv"))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replace
                                                                                   1)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "t")
                                                                                    (("2"
                                                                                      (split
                                                                                       -)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "horizontal_sep_outside_Theta[DTHR]")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "v"
                                                                                           "s"
                                                                                           "t")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (case
                                                                                           "horizontal_tca(s+t*v,v)>=0")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "horizontal_sep_outside_Theta[DTHR]")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "v"
                                                                                               "s"
                                                                                               "t+horizontal_tca(s+t*v,v)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-1
                                                                                                          -4))
                                                                                                        (("1"
                                                                                                          (grind
                                                                                                           :exclude
                                                                                                           ("horizontal_tca"
                                                                                                            "sqv"))
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             "horizontal_tca(s+t*v,v) = horizontal_tca(s,v)-t")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "Theta_D[DTHR](s+t*v,v,-1) = Theta_D[DTHR](s,v,-1)-t")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-3
                                                                                                                      1
                                                                                                                      4))
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "Theta_D")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "root2b")
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "NOT discr2b(sqv(v), (s + t * v) * v, sqv(s + t * v) - sq(DTHR)) = discr2b(sqv(v), s * v, sqv(s) - sq(DTHR))")
                                                                                                                          (("1"
                                                                                                                            (hide-all-but
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (hide-all-but
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (grind
                                                                                                                                   :exclude
                                                                                                                                   "discr2b")
                                                                                                                                  (("2"
                                                                                                                                    (field)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                (("2"
                                                                                                                  (field)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "horizontal_tca"
                                                                                             1)
                                                                                            (("2"
                                                                                              (cross-mult
                                                                                               1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (reveal
                                                         "final")
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (ground)
                                                                  (("1"
                                                                    (expand
                                                                     "max"
                                                                     1)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (expand
                                                                           "horizontal_WCV_tep")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (lemma
                                                                                 "horizontal_sep_outside_Theta[DTHR]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "v"
                                                                                   "s"
                                                                                   "t")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (case
                                                                                   "Theta_D[DTHR](s+t*v,v,-1) = Theta_D[DTHR](s,v,-1)-t")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "Theta_D")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "root2b")
                                                                                        (("2"
                                                                                          (case
                                                                                           "NOT discr2b(sqv(v), (s + t * v) * v, sqv(s + t * v) - sq(DTHR)) = discr2b(sqv(v), s * v, sqv(s) - sq(DTHR))")
                                                                                          (("1"
                                                                                            (hide
                                                                                             2)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (grind
                                                                                               :exclude
                                                                                               "discr2b")
                                                                                              (("2"
                                                                                                (field)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "min"
                                                                     1)
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (ground)
                                                                        (("2"
                                                                          (expand
                                                                           "horizontal_WCV_tep")
                                                                          (("2"
                                                                            (split
                                                                             -)
                                                                            (("1"
                                                                              (lemma
                                                                               "horizontal_sep_outside_Theta[DTHR]")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "v"
                                                                                 "s"
                                                                                 "t")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "sqv_increasing_after_horizontal_tca")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "v"
                                                                                     "s")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (case
                                                                                         "horizontal_tca(s+t*v,v) >=0")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "t"
                                                                                           "t+horizontal_tca(s+t*v,v)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "sqv(s+t*v)>sq(DTHR)")
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    -4
                                                                                                    1))
                                                                                                  (("1"
                                                                                                    (grind
                                                                                                     :exclude
                                                                                                     ("sqv"
                                                                                                      "horizontal_tca"))
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "horizontal_sep_outside_Theta[DTHR]")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "v"
                                                                                                       "s"
                                                                                                       "t")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "horizontal_tca(s,v) <= Theta_D[DTHR](s,v,1)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "Theta_D"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "root2b"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (grind
                                                                                                         :exclude
                                                                                                         ("sqrt"
                                                                                                          "discr2b"))
                                                                                                        (("2"
                                                                                                          (field)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (case
                                                                                                   "horizontal_tca(s+t*v,v) = horizontal_tca(s,v)-t")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      (("2"
                                                                                                        (field)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "horizontal_tca"
                                                                                           1)
                                                                                          (("2"
                                                                                            (cross-mult
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (expand
                                                                     "horizontal_WCV_tep")
                                                                    (("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (case
                                                                           "NOT (t>= Theta_D[DTHR](s, v, -1) - TEP AND t<=Theta_D[DTHR](s, v, 1))")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             (-2
                                                                              -3))
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (case
                                                                                   "NOT Delta[DTHR](s+t*v,v)>=0")
                                                                                  (("1"
                                                                                    (hide
                                                                                     3)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "Delta_eq[DTHR]")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "s"
                                                                                         "t"
                                                                                         "v")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       +)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "Delta_ge_0_2[DTHR]")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "v"
                                                                                           "s")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (skeep
                                                                                               -1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "horizontal_tca_min")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "v"
                                                                                                   "s"
                                                                                                   "t!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "horizontal_sq_dtca_eq")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "s + horizontal_tca(s,v)*v = (s+t*v) + horizontal_tca(s+t*v,v)*v")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              (("1"
                                                                                                                (field)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (field)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case
                                                                                         "NOT t<=Theta_D[DTHR](s,v,-1)")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "horizontal_sep_outside_Theta[DTHR]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "v"
                                                                                             "s"
                                                                                             "t")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "Theta_D_horizontal_dir[DTHR]")
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (mult-by
                                                                                                 -2
                                                                                                 "sqv(v)")
                                                                                                (("2"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    -2
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (grind
                                                                                                     :exclude
                                                                                                     "Theta_D")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (case
                                                                                           "Theta_D[DTHR](s+t*v,v,-1) = Theta_D[DTHR](s,v,-1)-t")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "Theta_D")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "root2b")
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "discr2b(sqv(v), (s + t * v) * v, sqv(s + t * v) - sq(DTHR)) = discr2b(sqv(v), s * v, sqv(s) - sq(DTHR))")
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (grind
                                                                                                       :exclude
                                                                                                       ("sqrt"
                                                                                                        "discr2b"))
                                                                                                      (("1"
                                                                                                        (field)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Lookahead type-eq-decl nil Lookahead ACCoRD)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Delta_eq formula-decl nil horizontal ACCoRD)
    (horizontal_sq_dtca_eq formula-decl nil definitions ACCoRD)
    (horizontal_tca_min formula-decl nil definitions ACCoRD)
    (discr2b const-decl "real" quadratic_2b reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (root2b const-decl "real" quadratic_2b reals)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (sqv_increasing_after_horizontal_tca formula-decl nil definitions
     ACCoRD)
    (Theta_D_horizontal_dir formula-decl nil horizontal ACCoRD)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (Delta const-decl "real" horizontal ACCoRD)
    (* const-decl "real" vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (Sign type-eq-decl nil sign reals)
    (horizontal_sep_outside_Theta formula-decl nil horizontal ACCoRD)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_eq_0 formula-decl nil vectors_2D vectors))
   shostak))
 (horizontal_WCV_tep_interval_correct 0
  (horizontal_WCV_tep_interval_correct-1 nil 3625224627
   ("" (expand "horizontal_interval_correct?" :assert? none)
    (("" (skeep)
      (("" (rewrite "horizontal_WCV_tep_eq")
        (("" (skoletin*)
          (("" (label "final" 1)
            (("" (label "nwcexitdef" -1)
              (("" (label "nwcentrydef" -2)
                (("" (label "nwcentryexitdef" -3)
                  (("" (hide "final")
                    (("" (expand "horizontal_WCV_tep_interval")
                      (("" (lift-if)
                        (("" (split -)
                          (("1" (flatten)
                            (("1" (lemma "sqv_eq_0")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (reveal "final")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand
                                           "horizontal_WCV_tep_def")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split -)
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma "sqv_eq_0")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (reveal "final")
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (replace
                                                 "nwcentryexitdef")
                                                (("1"
                                                  (replace
                                                   "nwcexitdef")
                                                  (("1"
                                                    (replace
                                                     "nwcentrydef")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (invoke
                                                         (case "%1")
                                                         (! 1 2))
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (replace 1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replaces
                                                               -2)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "horizontal_WCV_tep_def"
                                                                   -1)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (case "v = zero")
                                  (("1"
                                    (replaces -1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (delabel +)
                                    (("2"
                                      (label "iggypop" (2 3))
                                      (("2"
                                        (delabel "iggypop")
                                        (("2"
                                          (split -)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (reveal "final")
                                                (("1"
                                                  (replace
                                                   "nwcentrydef")
                                                  (("1"
                                                    (replace
                                                     "nwcexitdef")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split +)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "min")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (expand
                                                                       "horizontal_WCV_tep_def")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "sqv(s + t * v) <= sq(DTHR)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               -7)
                                                                              (("1"
                                                                                (lemma
                                                                                 "horizontal_sep_outside_Theta[DTHR]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "v"
                                                                                   "s"
                                                                                   "t")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "Delta_ge_0_2[DTHR]")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "t")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (lemma
                                                                                 "Theta_D_horizontal_dir[DTHR]")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -)
                                                                                      (("1"
                                                                                        (mult-by
                                                                                         2
                                                                                         "sqv(v)")
                                                                                        (("1"
                                                                                          (grind
                                                                                           :exclude
                                                                                           ("Theta_D"
                                                                                            "min"
                                                                                            "Delta"
                                                                                            "horizontal_tca"))
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "Delta_ge_0_2[DTHR]")
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "0")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "Delta_ge_0_2[DTHR]")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "0")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (case
                                                                 "NOT t<=Theta_D[DTHR](s,v,1)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "horizontal_WCV_tep_def")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (lemma
                                                                           "horizontal_sep_outside_Theta[DTHR]")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "horizontal_sep_outside_Theta[DTHR]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "v"
                                                                                     "s"
                                                                                     "0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "Delta_ge_0_2[DTHR]")
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "0")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "Delta_ge_0_2[DTHR]")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "0")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (lemma
                                                                   "Delta_ge_0_2[DTHR]")
                                                                  (("3"
                                                                    (inst?)
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (inst
                                                                         +
                                                                         "0")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (label "iggypop" +)
                                                (("2"
                                                  (delabel "iggypop")
                                                  (("2"
                                                    (hide 4)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (reveal
                                                           "final")
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (replace
                                                               "nwcexitdef")
                                                              (("1"
                                                                (replace
                                                                 "nwcentrydef")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (invoke
                                                                     (case
                                                                      "%1")
                                                                     (!
                                                                      1
                                                                      2))
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "horizontal_WCV_tep_def"
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "s*v>0")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   -3)
                                                                                  (("1"
                                                                                    (case
                                                                                     "NOT FORALL (tt:nnreal): sqv(s+tt*v)>sq(DTHR)")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -2)
                                                                                      (("1"
                                                                                        (case
                                                                                         "horizontal_tca(s,v)<0")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "sqv_increasing_after_horizontal_tca")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "v"
                                                                                             "s")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "tt"
                                                                                                   "0")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "tt = 0")
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "horizontal_tca"
                                                                                           1)
                                                                                          (("2"
                                                                                            (cross-mult
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst-cp
                                                                                       -
                                                                                       "t")
                                                                                      (("2"
                                                                                        (split
                                                                                         -)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "sqv(v)")
                                                                                            (("2"
                                                                                              (mult-by
                                                                                               -1
                                                                                               "t")
                                                                                              (("2"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  -4
                                                                                                  -8))
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 1)
                                                                                (("2"
                                                                                  (case
                                                                                   "Delta[DTHR](s,v)<0")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -3)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "Delta_ge_0_2[DTHR]")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "v"
                                                                                         "s")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "t + horizontal_tca(s+t*v,v)")
                                                                                                (("2"
                                                                                                  (hide-all-but
                                                                                                   (-2
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (grind
                                                                                                     :exclude
                                                                                                     ("horizontal_tca"
                                                                                                      "sqv"))
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "t")
                                                                                      (("2"
                                                                                        (split
                                                                                         -)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "horizontal_sep_outside_Theta[DTHR]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "v"
                                                                                             "s"
                                                                                             "t")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (case
                                                                                             "horizontal_tca(s+t*v,v)>=0")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "horizontal_sep_outside_Theta[DTHR]")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "v"
                                                                                                 "s"
                                                                                                 "t+horizontal_tca(s+t*v,v)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (-1
                                                                                                            -4))
                                                                                                          (("1"
                                                                                                            (grind
                                                                                                             :exclude
                                                                                                             ("horizontal_tca"
                                                                                                              "sqv"))
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "horizontal_tca(s+t*v,v) = horizontal_tca(s,v)-t")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "Theta_D[DTHR](s+t*v,v,-1) = Theta_D[DTHR](s,v,-1)-t")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       (-3
                                                                                                                        1
                                                                                                                        4))
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "Theta_D")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "root2b")
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "NOT discr2b(sqv(v), (s + t * v) * v, sqv(s + t * v) - sq(DTHR)) = discr2b(sqv(v), s * v, sqv(s) - sq(DTHR))")
                                                                                                                            (("1"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (replaces
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (hide-all-but
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (grind
                                                                                                                                     :exclude
                                                                                                                                     "discr2b")
                                                                                                                                    (("2"
                                                                                                                                      (field)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  (("2"
                                                                                                                    (field)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "horizontal_tca"
                                                                                               1)
                                                                                              (("2"
                                                                                                (cross-mult
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (reveal
                                                           "final")
                                                          (("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (ground)
                                                                    (("1"
                                                                      (expand
                                                                       "max"
                                                                       1)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (expand
                                                                             "horizontal_WCV_tep_def")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split
                                                                                 -)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "horizontal_sep_outside_Theta[DTHR]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "v"
                                                                                     "s"
                                                                                     "t")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (case
                                                                                     "Theta_D[DTHR](s+t*v,v,-1) = Theta_D[DTHR](s,v,-1)-t")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "Theta_D")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "root2b")
                                                                                          (("2"
                                                                                            (case
                                                                                             "NOT discr2b(sqv(v), (s + t * v) * v, sqv(s + t * v) - sq(DTHR)) = discr2b(sqv(v), s * v, sqv(s) - sq(DTHR))")
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("2"
                                                                                                (grind
                                                                                                 :exclude
                                                                                                 "discr2b")
                                                                                                (("2"
                                                                                                  (field)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "min"
                                                                       1)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (ground)
                                                                          (("2"
                                                                            (expand
                                                                             "horizontal_WCV_tep_def")
                                                                            (("2"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (lemma
                                                                                 "horizontal_sep_outside_Theta[DTHR]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "v"
                                                                                   "s"
                                                                                   "t")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "sqv_increasing_after_horizontal_tca")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "v"
                                                                                       "s")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (case
                                                                                           "horizontal_tca(s+t*v,v) >=0")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "t"
                                                                                             "t+horizontal_tca(s+t*v,v)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "sqv(s+t*v)>sq(DTHR)")
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      -4
                                                                                                      1))
                                                                                                    (("1"
                                                                                                      (grind
                                                                                                       :exclude
                                                                                                       ("sqv"
                                                                                                        "horizontal_tca"))
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "horizontal_sep_outside_Theta[DTHR]")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "v"
                                                                                                         "s"
                                                                                                         "t")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "horizontal_tca(s,v) <= Theta_D[DTHR](s,v,1)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "Theta_D"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "root2b"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (grind
                                                                                                           :exclude
                                                                                                           ("sqrt"
                                                                                                            "discr2b"))
                                                                                                          (("2"
                                                                                                            (field)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (assert)
                                                                                                  (("3"
                                                                                                    (case
                                                                                                     "horizontal_tca(s+t*v,v) = horizontal_tca(s,v)-t")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        (("2"
                                                                                                          (field)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "horizontal_tca"
                                                                                             1)
                                                                                            (("2"
                                                                                              (cross-mult
                                                                                               1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (expand
                                                                       "horizontal_WCV_tep_def")
                                                                      (("3"
                                                                        (flatten)
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (case
                                                                             "NOT (t>= Theta_D[DTHR](s, v, -1) - TEP AND t<=Theta_D[DTHR](s, v, 1))")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               (-2
                                                                                -3))
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (case
                                                                                     "NOT Delta[DTHR](s+t*v,v)>=0")
                                                                                    (("1"
                                                                                      (hide
                                                                                       3)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "Delta_eq[DTHR]")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "s"
                                                                                           "t"
                                                                                           "v")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "Delta_ge_0_2[DTHR]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "v"
                                                                                             "s")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (skeep
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "horizontal_tca_min")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "v"
                                                                                                     "s"
                                                                                                     "t!1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "horizontal_sq_dtca_eq")
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "s + horizontal_tca(s,v)*v = (s+t*v) + horizontal_tca(s+t*v,v)*v")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                (("1"
                                                                                                                  (field)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (field)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "NOT t<=Theta_D[DTHR](s,v,-1)")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "horizontal_sep_outside_Theta[DTHR]")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "v"
                                                                                               "s"
                                                                                               "t")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "Theta_D_horizontal_dir[DTHR]")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (mult-by
                                                                                                   -2
                                                                                                   "sqv(v)")
                                                                                                  (("2"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      -2
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (grind
                                                                                                       :exclude
                                                                                                       "Theta_D")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (case
                                                                                             "Theta_D[DTHR](s+t*v,v,-1) = Theta_D[DTHR](s,v,-1)-t")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "Theta_D")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "root2b")
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "discr2b(sqv(v), (s + t * v) * v, sqv(s + t * v) - sq(DTHR)) = discr2b(sqv(v), s * v, sqv(s) - sq(DTHR))")
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (grind
                                                                                                         :exclude
                                                                                                         ("sqrt"
                                                                                                          "discr2b"))
                                                                                                        (("1"
                                                                                                          (field)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (horizontal_WCV_tep_interval const-decl "EntryExit[0, T]"
     horizontal_WCV_tep nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (horizontal_WCV_tep_def const-decl "bool" horizontal_WCV_tep nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tep nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (horizontal_sep_outside_Theta formula-decl nil horizontal ACCoRD)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Delta const-decl "real" horizontal ACCoRD) nil nil
    (Theta_D const-decl "real" horizontal ACCoRD)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Theta_D_horizontal_dir formula-decl nil horizontal ACCoRD)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (sqv_increasing_after_horizontal_tca formula-decl nil definitions
     ACCoRD)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (root2b const-decl "real" quadratic_2b reals)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil) nil
    (div_cancel2 formula-decl nil real_props nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (discr2b const-decl "real" quadratic_2b reals)
    (nzreal nonempty-type-eq-decl nil reals nil) nil
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (horizontal_tca_min formula-decl nil definitions ACCoRD)
    (horizontal_sq_dtca_eq formula-decl nil definitions ACCoRD)
    (Delta_eq formula-decl nil horizontal ACCoRD)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (TEP formal-const-decl "nnreal" horizontal_WCV_tep nil) nil
    (le_minus_le formula-decl nil real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) nil
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (horizontal_WCV_tep_eq formula-decl nil horizontal_WCV_tep nil)
    (horizontal_interval_correct? const-decl "bool" horizontal_WCV
     nil))
   nil))
 (horizontal_WCV_tep_interval_sound 0
  (horizontal_WCV_tep_interval_sound-3 nil 3621850793
   ("" (rewrite "horizontal_interval_correct_is_sound")
    (("" (rewrite "horizontal_WCV_tep_interval_correct") nil nil)) nil)
   ((horizontal_WCV_tep_interval_correct formula-decl nil
     horizontal_WCV_tep nil)
    (DTHR formal-const-decl "posreal" horizontal_WCV_tep nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TEP formal-const-decl "nnreal" horizontal_WCV_tep nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (horizontal_WCV_tep_interval const-decl "EntryExit[0, T]"
     horizontal_WCV_tep nil)
    (HorizontalInterval type-eq-decl nil horizontal_WCV nil)
    (EntryExit type-eq-decl nil EntryExit_interval nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (tep const-decl "real" horizontal_WCV_tep nil)
    (TimeVar type-eq-decl nil timevars nil)
    (timevar? const-decl "bool" timevars nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (horizontal_interval_correct_is_sound formula-decl nil
     horizontal_WCV nil)
    (tep_pre_timevar name-judgement "(pre_timevar?)" horizontal_WCV_tep
     nil))
   nil)
  (horizontal_WCV_tep_interval_sound-2 nil 3621849843
   ("" (skeep)
    (("" (expand "horizontal_interval_sound?")
      (("" (skeep)
        (("" (expand "nonempty?")
          (("" (lemma "horizontal_WCV_tep_interval_def")
            (("" (split)
              (("1" (skeep)
                (("1" (insteep)
                  (("1" (skoletin* -)
                    (("1" (replaces -4 :dir rl)
                      (("1" (replaces (-2 -3) :dir rl)
                        (("1" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (horizontal_WCV const-decl "bool" horizontal_WCV nil)
    (TimeVar type-eq-decl nil timevars nil)
    (timevar? const-decl "bool" timevars nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Lookahead type-eq-decl nil Lookahead ACCoRD))
   nil)
  (horizontal_WCV_tep_interval_sound-1 nil 3621807765
   ("" (skeep)
    (("" (expand "horizontal_interval_sound?")
      (("" (skeep)
        (("" (expand "nonempty?")
          (("" (lemma "horizontal_WCV_tep_interval_def")
            (("" (insteep -1)
              (("" (skoletin* -1)
                (("" (replaces -4 :dir rl)
                  (("" (replaces (-2 -3) :dir rl)
                    (("" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Lookahead type-eq-decl nil Lookahead ACCoRD)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (timevar? const-decl "bool" timevars nil)
    (TimeVar type-eq-decl nil timevars nil)
    (horizontal_WCV const-decl "bool" horizontal_WCV nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors))
   nil)))

