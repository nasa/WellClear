(mod_bands
 (first_gt_2pi_TCC1 0
  (first_gt_2pi_TCC1-1 nil 3632049768 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (first_gt_2pi subtype "mod_bands.j" "below[length[RealBand](RL)]")))
 (first_gt_2pi_TCC2 0
  (first_gt_2pi_TCC2-2 "" 3813484635
   ("" (skeep) (("" (grind :exclude "length") nil nil)) nil) nil
   shostak
   (first_gt_2pi subtype "0"
    "{i: integers.int |      (reals.>=(i, 0)) AND (reals.<=(i, list_props[RealBand].length(mod_bands.RL))) AND (booleans.IMPLIES(reals.<(i, list_props[RealBand].length(mod_bands.RL)), reals.>(list_props[RealBand].nth(mod_bands.RL, i)`ub, number_fields.*(2, pi_def.pi)))) AND (booleans.IMPLIES((EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.>(list_props[RealBand].nth(mod_bands.RL, j)`ub, number_fields.*(2, pi_def.pi)))), reals.<(i, list_props[RealBand].length(mod_bands.RL)))) AND FORALL (j: naturalnumbers.nat): booleans.IMPLIES(reals.<(j, i), reals.<=(list_props[RealBand].nth(mod_bands.RL, j)`ub, number_fields.*(2, pi_def.pi)))}"))
  (first_gt_2pi_TCC2-1 nil 3632049768
   ("" (skeep)
    (("" (rewrite "length_remove_last")
      (("" (grind :exclude "length") nil nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (first_gt_2pi subtype "0"
    "{i: integers.int |      (reals.>=(i, 0)) AND (reals.<=(i, list_props[RealBand].length(mod_bands.RL))) AND (booleans.IMPLIES(reals.<(i, list_props[RealBand].length(mod_bands.RL)), reals.>(list_props[RealBand].nth(mod_bands.RL, i)`ub, number_fields.*(2, pi_def.pi)))) AND (booleans.IMPLIES((EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.>(list_props[RealBand].nth(mod_bands.RL, j)`ub, number_fields.*(2, pi_def.pi)))), reals.<(i, list_props[RealBand].length(mod_bands.RL)))) AND FORALL (j: naturalnumbers.nat): booleans.IMPLIES(reals.<(j, i), reals.<=(list_props[RealBand].nth(mod_bands.RL, j)`ub, number_fields.*(2, pi_def.pi)))}")))
 (first_gt_2pi_TCC3 0
  (first_gt_2pi_TCC3-1 nil 3632049768
   ("" (skeep)
    (("" (rewrite "length_remove_last") (("" (grind) nil nil)) nil))
    nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list type-decl nil list_adt nil)
    (RealBand type-eq-decl nil real_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (length_remove_last formula-decl nil real_bands nil))
   nil
   (first_gt_2pi termination
    "mod_bands.first_gt_2pi(real_bands.remove_last(mod_bands.RL))"
    "nil")))
 (first_gt_2pi_TCC4 0
  (first_gt_2pi_TCC4-2 nil 3632065305
   ("" (skeep)
    (("" (assert)
      (("" (name "G" "v(remove_last(RL))")
        (("" (replaces -1)
          (("" (assert)
            (("" (typepred "G")
              (("" (assert)
                (("" (split +)
                  (("1" (assert)
                    (("1" (rewrite "length_remove_last")
                      (("1" (assert)
                        (("1" (lemma "remove_last_def")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (inst - "G")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (assert)
                      (("2" (inst - "j")
                        (("2" (assert)
                          (("2" (lemma "remove_last_def")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (inst - "j")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove_last_def formula-decl nil real_bands nil)
    (max_0_nnreal formula-decl nil min_max reals)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (length_remove_last formula-decl nil real_bands nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (first_gt_2pi subtype
    "mod_bands.first_gt_2pi(real_bands.remove_last(mod_bands.RL))"
    "{i: integers.int |      (reals.>=(i, 0)) AND (reals.<=(i, list_props[RealBand].length(mod_bands.RL))) AND (booleans.IMPLIES(reals.<(i, list_props[RealBand].length(mod_bands.RL)), reals.>(list_props[RealBand].nth(mod_bands.RL, i)`ub, number_fields.*(2, pi_def.pi)))) AND (booleans.IMPLIES((EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.>(list_props[RealBand].nth(mod_bands.RL, j)`ub, number_fields.*(2, pi_def.pi)))), reals.<(i, list_props[RealBand].length(mod_bands.RL)))) AND FORALL (j: naturalnumbers.nat): booleans.IMPLIES(reals.<(j, i), reals.<=(list_props[RealBand].nth(mod_bands.RL, j)`ub, number_fields.*(2, pi_def.pi)))}"))
  (first_gt_2pi_TCC4-1 nil 3632049768 ("" (subtype-tcc) nil nil) nil
   nil
   (first_gt_2pi subtype
    "mod_bands.first_gt_2pi(real_bands.remove_last(mod_bands.RL))"
    "{i: integers.int |      (reals.>=(i, 0)) AND (reals.<=(i, list_props[RealBand].length(mod_bands.RL))) AND (booleans.IMPLIES(reals.<(i, list_props[RealBand].length(mod_bands.RL)), reals.>(list_props[RealBand].nth(mod_bands.RL, i)`ub, number_fields.*(2, pi_def.pi)))) AND (booleans.IMPLIES((EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.>(list_props[RealBand].nth(mod_bands.RL, j)`ub, number_fields.*(2, pi_def.pi)))), reals.<(i, list_props[RealBand].length(mod_bands.RL)))) AND FORALL (j: naturalnumbers.nat): booleans.IMPLIES(reals.<(j, i), reals.<=(list_props[RealBand].nth(mod_bands.RL, j)`ub, number_fields.*(2, pi_def.pi)))}")))
 (first_gt_2pi_TCC5 0
  (first_gt_2pi_TCC5-2 "" 3813484635
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (first_gt_2pi subtype
    "(number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1)"
    "below[length[RealBand](RL)]"))
  (first_gt_2pi_TCC5-1 nil 3632049768
   ("" (skeep)
    (("" (assert)
      (("" (name "G" "v(remove_last(RL))")
        (("" (replaces -1)
          (("" (assert)
            (("" (typepred "G")
              (("" (assert)
                (("" (skeep 4)
                  (("" (inst + "j")
                    (("" (assert)
                      (("" (rewrite "length_remove_last" +)
                        (("" (assert)
                          (("" (lemma "remove_last_def")
                            (("" (inst?)
                              ((""
                                (assert)
                                ((""
                                  (inst?)
                                  (("" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (first_gt_2pi subtype
    "(number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1)"
    "below[length[RealBand](RL)]")))
 (first_gt_2pi_TCC6 0
  (first_gt_2pi_TCC6-1 nil 3632049768
   ("" (skeep)
    (("" (assert)
      (("" (name "G" "v(remove_last(RL))")
        (("" (replaces -1)
          (("" (typepred "G")
            (("" (assert)
              (("" (rewrite "length_remove_last")
                (("" (assert)
                  (("" (hide -3)
                    (("" (skeep 4)
                      (("" (inst + "j")
                        (("" (assert)
                          (("" (lemma "remove_last_def")
                            (("" (inst?)
                              ((""
                                (assert)
                                ((""
                                  (inst - "j")
                                  (("" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove_last_def formula-decl nil real_bands nil)
    (max_0_nnreal formula-decl nil min_max reals)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (length_remove_last formula-decl nil real_bands nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (first_gt_2pi subtype
    "(number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1)"
    "{i: integers.int |      (reals.>=(i, 0)) AND (reals.<=(i, list_props[RealBand].length(mod_bands.RL))) AND (booleans.IMPLIES(reals.<(i, list_props[RealBand].length(mod_bands.RL)), reals.>(list_props[RealBand].nth(mod_bands.RL, i)`ub, number_fields.*(2, pi_def.pi)))) AND (booleans.IMPLIES((EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.>(list_props[RealBand].nth(mod_bands.RL, j)`ub, number_fields.*(2, pi_def.pi)))), reals.<(i, list_props[RealBand].length(mod_bands.RL)))) AND FORALL (j: naturalnumbers.nat): booleans.IMPLIES(reals.<(j, i), reals.<=(list_props[RealBand].nth(mod_bands.RL, j)`ub, number_fields.*(2, pi_def.pi)))}")))
 (first_gt_2pi_TCC7 0
  (first_gt_2pi_TCC7-1 nil 3632065132
   ("" (skeep)
    (("" (assert)
      (("" (name "G" "v(remove_last(RL))")
        (("" (replaces -1)
          (("" (assert)
            (("" (typepred "G")
              (("" (assert)
                (("" (rewrite "length_remove_last")
                  (("" (assert)
                    (("" (hide -3)
                      (("" (split +)
                        (("1" (skeep)
                          (("1" (inst + "j")
                            (("1" (assert)
                              (("1"
                                (lemma "remove_last_def")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst - "j")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (inst + "j")
                            (("2" (assert)
                              (("2"
                                (lemma "remove_last_def")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst - "j")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove_last_def formula-decl nil real_bands nil)
    (max_0_nnreal formula-decl nil min_max reals)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (length_remove_last formula-decl nil real_bands nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (first_gt_2pi subtype "list_props[RealBand].length(mod_bands.RL)"
    "{i: integers.int |      (reals.>=(i, 0)) AND (reals.<=(i, list_props[RealBand].length(mod_bands.RL))) AND (booleans.IMPLIES(reals.<(i, list_props[RealBand].length(mod_bands.RL)), reals.>(list_props[RealBand].nth(mod_bands.RL, i)`ub, number_fields.*(2, pi_def.pi)))) AND (booleans.IMPLIES((EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.>(list_props[RealBand].nth(mod_bands.RL, j)`ub, number_fields.*(2, pi_def.pi)))), reals.<(i, list_props[RealBand].length(mod_bands.RL)))) AND FORALL (j: naturalnumbers.nat): booleans.IMPLIES(reals.<(j, i), reals.<=(list_props[RealBand].nth(mod_bands.RL, j)`ub, number_fields.*(2, pi_def.pi)))}")))
 (last_lt_0_TCC1 0
  (last_lt_0_TCC1-1 nil 3632052640 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (last_lt_0 subtype "(number_fields.-)(1)"
    "{i: integers.int | booleans.AND(reals.>=(i, (number_fields.-)(1)), booleans.AND((booleans.IMPLIES(reals.>=(i, 0), (booleans.AND(reals.<(i, list_props[RealBand].length(mod_bands.RL)), reals.<(list_props[RealBand].nth(mod_bands.RL, i)`lb, 0))))), booleans.AND((booleans.IMPLIES((EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.<(list_props[RealBand].nth(mod_bands.RL, j)`lb, 0))), reals.>=(i, 0))), (booleans.IMPLIES(reals.>=(i, 0), FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.>(j, i)), reals.>=(list_props[RealBand].nth(mod_bands.RL, j)`lb, 0)))))))}")))
 (last_lt_0_TCC2 0
  (last_lt_0_TCC2-1 nil 3632052640 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)) nil
   (last_lt_0 subtype "mod_bands.RL" "(list_adt[RealBand].cons?)")))
 (last_lt_0_TCC3 0
  (last_lt_0_TCC3-1 nil 3632052640
   ("" (skeep)
    (("" (expand "length" 2 2)
      (("" (lift-if) (("" (ground) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (last_lt_0 termination
    "mod_bands.last_lt_0(list_adt[RealBand].cdr(mod_bands.RL))"
    "nil")))
 (last_lt_0_TCC4 0
  (last_lt_0_TCC4-1 nil 3632052640
   ("" (skeep*)
    (("" (assert)
      (("" (name "G" "v(cdr(RL))")
        (("" (replaces -1)
          (("" (assert)
            (("" (typepred "G")
              (("" (assert)
                (("" (flatten)
                  (("" (assert)
                    (("" (split +)
                      (("1" (expand "length" 1)
                        (("1" (lift-if)
                          (("1" (ground)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "nth" +) (("2" (propax) nil nil))
                        nil)
                       ("3" (skeep)
                        (("3" (inst -7 "j-1")
                          (("1" (assert)
                            (("1" (split -7)
                              (("1"
                                (expand "nth" +)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (expand "length" -1)
                                (("2"
                                  (lift-if)
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (j skolem-const-decl "nat" mod_bands nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil) (> const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (last_lt_0 subtype
    "(number_fields.+)(mod_bands.last_lt_0(list_adt[RealBand].cdr(mod_bands.RL)), 1)"
    "{i: integers.int | booleans.AND(reals.>=(i, (number_fields.-)(1)), booleans.AND((booleans.IMPLIES(reals.>=(i, 0), (booleans.AND(reals.<(i, list_props[RealBand].length(mod_bands.RL)), reals.<(list_props[RealBand].nth(mod_bands.RL, i)`lb, 0))))), booleans.AND((booleans.IMPLIES((EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.<(list_props[RealBand].nth(mod_bands.RL, j)`lb, 0))), reals.>=(i, 0))), (booleans.IMPLIES(reals.>=(i, 0), FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.>(j, i)), reals.>=(list_props[RealBand].nth(mod_bands.RL, j)`lb, 0)))))))}")))
 (last_lt_0_TCC5 0
  (last_lt_0_TCC5-1 nil 3632052640 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (last_lt_0 subtype "0" "below[length[RealBand](RL)]")))
 (last_lt_0_TCC6 0
  (last_lt_0_TCC6-1 nil 3632052640
   ("" (skeep*)
    (("" (assert)
      (("" (name "G" "v(cdr(RL))")
        (("" (replaces -1)
          (("" (assert)
            (("" (typepred "G")
              (("" (assert)
                (("" (skeep +)
                  (("" (inst + "j-1")
                    (("1" (assert)
                      (("1" (split +)
                        (("1" (expand "length" -5)
                          (("1" (assert)
                            (("1" (lift-if) (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "nth" 4) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (j skolem-const-decl "nat" mod_bands nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil) (> const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (last_lt_0 subtype "0"
    "{i: integers.int | booleans.AND(reals.>=(i, (number_fields.-)(1)), booleans.AND((booleans.IMPLIES(reals.>=(i, 0), (booleans.AND(reals.<(i, list_props[RealBand].length(mod_bands.RL)), reals.<(list_props[RealBand].nth(mod_bands.RL, i)`lb, 0))))), booleans.AND((booleans.IMPLIES((EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.<(list_props[RealBand].nth(mod_bands.RL, j)`lb, 0))), reals.>=(i, 0))), (booleans.IMPLIES(reals.>=(i, 0), FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.>(j, i)), reals.>=(list_props[RealBand].nth(mod_bands.RL, j)`lb, 0)))))))}")))
 (last_lt_0_TCC7 0
  (last_lt_0_TCC7-1 nil 3632052640
   ("" (skeep)
    (("" (assert)
      (("" (name "G" "v(cdr(RL))")
        (("" (replaces -1)
          (("" (assert)
            (("" (skeep -)
              (("" (typepred "G")
                (("" (assert)
                  (("" (inst + "j-1")
                    (("" (assert)
                      (("" (split +)
                        (("1" (expand "length" -4)
                          (("1" (lift-if) (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (expand "nth" -5)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil) (> const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil
   (last_lt_0 subtype "(number_fields.-)(1)"
    "{i: integers.int | booleans.AND(reals.>=(i, (number_fields.-)(1)), booleans.AND((booleans.IMPLIES(reals.>=(i, 0), (booleans.AND(reals.<(i, list_props[RealBand].length(mod_bands.RL)), reals.<(list_props[RealBand].nth(mod_bands.RL, i)`lb, 0))))), booleans.AND((booleans.IMPLIES((EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.<(list_props[RealBand].nth(mod_bands.RL, j)`lb, 0))), reals.>=(i, 0))), (booleans.IMPLIES(reals.>=(i, 0), FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.>(j, i)), reals.>=(list_props[RealBand].nth(mod_bands.RL, j)`lb, 0)))))))}")))
 (bands_mod_meas_TCC1 0
  (bands_mod_meas_TCC1-1 nil 3632053817
   ("" (skeep)
    (("" (typepred "first_gt_2pi(RL)")
      (("" (typepred "last_lt_0(RL)") (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (last_lt_0 def-decl "{i: int |
   i >= -1 AND
    (i >= 0 IMPLIES (i < length(RL) AND nth(RL, i)`lb < 0)) AND
     ((EXISTS (j: nat): j < length(RL) AND nth(RL, j)`lb < 0) IMPLIES
       i >= 0)
      AND
      (i >= 0 IMPLIES
        FORALL (j: nat):
          j < length(RL) AND j > i IMPLIES nth(RL, j)`lb >= 0)}"
     mod_bands nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (first_gt_2pi def-decl "{i: int |
        (i >= 0) AND (i <= length(RL))
    AND (i < length(RL) IMPLIES nth(RL, i)`ub > 2 * pi)
    AND ((EXISTS (j: nat): j < length(RL) AND nth(RL, j)`ub > 2 * pi)
          IMPLIES i < length(RL))
    AND (FORALL (j: nat): j < i IMPLIES nth(RL, j)`ub <= 2 * pi)}"
     mod_bands nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (bands_mod_meas subtype
    "(number_fields.+)((number_fields.+)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), mod_bands.first_gt_2pi(mod_bands.RL)), mod_bands.last_lt_0(mod_bands.RL)), 1)"
    "nat")))
 (band_to_mod?_TCC1 0
  (band_to_mod?_TCC1-1 nil 3632056480 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (band_to_mod? subtype
    "(number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1)"
    "below[length[RealBand](RL)]")))
 (band_to_mod?_TCC2 0
  (band_to_mod?_TCC2-1 nil 3632056480 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil (band_to_mod? subtype "0" "below[length[RealBand](RL)]")))
 (band_to_mod_width 0
  (band_to_mod_width-1 nil 3632056839
   ("" (skeep*)
    (("" (expand "band_to_mod?")
      (("" (flatten)
        (("" (expand "strictly_increasing_real?")
          (("" (flatten)
            (("" (split +)
              (("1" (inst - "i") nil nil)
               ("2" (inst-cp - "i")
                (("2" (inst - "j")
                  (("2" (inst - "i" "j") (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("3" (inst - "j") nil nil)
               ("4" (inst-cp - "i")
                (("4" (inst-cp - "j")
                  (("4" (inst-cp - "length(RL)-1")
                    (("4" (inst - "0")
                      (("4" (assert)
                        (("4" (inst-cp - "0" "i")
                          (("4" (inst-cp - "i" "j")
                            (("4" (inst - "j" "length(RL)-1")
                              (("4" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (RealBand type-eq-decl nil real_bands nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (band_to_mod? const-decl "bool" mod_bands nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (bands_below_TCC1 0
  (bands_below_TCC1-1 nil 3638864936 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil))
   nil
   (bands_below subtype
    "(number_fields.-)(list_props[RealBand].length(mod_bands.TB), 1)"
    "below[length[RealBand](TB)]")))
 (bands_below_TCC2 0
  (bands_below_TCC2-2 "" 3813484639
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak
   (bands_below subtype "0" "below[length[RealBand](RL)]"))
  (bands_below_TCC2-1 nil 3638864936
   ("" (skeep)
    (("" (split +)
      (("1" (grind) nil nil)
       ("2" (case "length(RL)=0")
        (("1" (hide -2) (("1" (skeep) (("1" (ground) nil nil)) nil))
          nil)
         ("2" (assert)
          (("2" (skeep)
            (("2" (assert)
              (("2" (expand "strictly_increasing_real?")
                (("2" (flatten)
                  (("2" (inst - "0" "j")
                    (("2" (inst-cp - "0")
                      (("2" (inst - "j") (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (bands_below subtype "0" "below[length[RealBand](RL)]")))
 (bands_below_TCC3 0
  (bands_below_TCC3-1 nil 3638864936
   ("" (skeep)
    (("" (assert)
      (("" (split +)
        (("1" (hide -) (("1" (grind) nil nil)) nil)
         ("2" (skeep)
          (("2" (assert)
            (("2" (expand "strictly_increasing_real?")
              (("2" (flatten)
                (("2" (inst - "0")
                  (("2" (inst - "0" "j") (("2" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (RealBand type-eq-decl nil real_bands nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int nonempty-type-eq-decl nil integers nil)
    (length_null formula-decl nil more_list_props structures))
   nil
   (bands_below subtype "(: :)"
    "{TB | booleans.IMPLIES(real_bands.strictly_increasing_real?(mod_bands.RL), (booleans.AND(real_bands.strictly_increasing_real?(mod_bands.TB), booleans.AND(reals.<=(list_props[RealBand].length(mod_bands.TB), list_props[RealBand].length(mod_bands.RL)), booleans.AND((FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.<=(list_props[RealBand].nth(mod_bands.RL, j)`lb, mod_bands.x)), (booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.TB)), booleans.AND(list_props[RealBand].nth(mod_bands.TB, j)`lb = list_props[RealBand].nth(mod_bands.RL, j)`lb, list_props[RealBand].nth(mod_bands.TB, j)`ub = (IF reals.<=(list_props[RealBand].nth(mod_bands.RL, j)`ub, mod_bands.x) THEN list_props[RealBand].nth(mod_bands.RL, j)`ub ELSE mod_bands.x ENDIF)))))), booleans.AND((booleans.IMPLIES(reals.>(list_props[RealBand].length(mod_bands.TB), 0), reals.<=(list_props[RealBand].nth(mod_bands.TB, (number_fields.-)(list_props[RealBand].length(mod_bands.TB), 1))`ub, mod_bands.x))), (FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.>(list_props[RealBand].nth(mod_bands.RL, j)`lb, mod_bands.x)), reals.>=(j, list_props[RealBand].length(mod_bands.TB))))))))))}")))
 (bands_below_TCC4 0
  (bands_below_TCC4-1 nil 3638864936
   ("" (skeep)
    (("" (split +)
      (("1" (expand "strictly_increasing_real?")
        (("1" (flatten)
          (("1" (split)
            (("1" (skeep)
              (("1" (case "i = 0")
                (("1" (assert)
                  (("1" (replaces -1)
                    (("1" (expand "nth" 1 1)
                      (("1" (expand "nth" 1 2) (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "i")
                  (("2" (expand "length" -1)
                    (("2" (expand "length" -1) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (typepred "j")
                (("2" (expand "length" -1)
                  (("2" (expand "length" -1) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "length" 1 1)
        (("2" (expand "length" 1 1) (("2" (assert) nil nil)) nil)) nil)
       ("3" (skeep)
        (("3" (split)
          (("1" (case "j = 0")
            (("1" (assert) nil nil)
             ("2" (expand "strictly_increasing_real?")
              (("2" (flatten)
                (("2" (inst - "0" "j") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand "strictly_increasing_real?")
            (("2" (flatten)
              (("2" (inst - "0" "j")
                (("2" (ground)
                  (("2" (case "NOT j = 0")
                    (("1" (assert) nil nil)
                     ("2" (replace -1)
                      (("2" (expand "nth" 2 1) (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (case "NOT j = 0")
            (("1" (expand "strictly_increasing_real?")
              (("1" (flatten)
                (("1" (inst - "0" "j") (("1" (ground) nil nil)) nil))
                nil))
              nil)
             ("2" (replace -1)
              (("2" (expand "nth" 1 1) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (flatten)
        (("4" (expand "length" 1)
          (("4" (expand "length" 1)
            (("4" (expand "nth" 1 1) (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (expand "length" 1)
          (("5" (expand "length" 1) (("5" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil))
   nil
   (bands_below subtype
    "(: (# lb := list_props[RealBand].nth(mod_bands.RL, 0)`lb, ub := mod_bands.x #) :)"
    "{TB | booleans.IMPLIES(real_bands.strictly_increasing_real?(mod_bands.RL), (booleans.AND(real_bands.strictly_increasing_real?(mod_bands.TB), booleans.AND(reals.<=(list_props[RealBand].length(mod_bands.TB), list_props[RealBand].length(mod_bands.RL)), booleans.AND((FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.<=(list_props[RealBand].nth(mod_bands.RL, j)`lb, mod_bands.x)), (booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.TB)), booleans.AND(list_props[RealBand].nth(mod_bands.TB, j)`lb = list_props[RealBand].nth(mod_bands.RL, j)`lb, list_props[RealBand].nth(mod_bands.TB, j)`ub = (IF reals.<=(list_props[RealBand].nth(mod_bands.RL, j)`ub, mod_bands.x) THEN list_props[RealBand].nth(mod_bands.RL, j)`ub ELSE mod_bands.x ENDIF)))))), booleans.AND((booleans.IMPLIES(reals.>(list_props[RealBand].length(mod_bands.TB), 0), reals.<=(list_props[RealBand].nth(mod_bands.TB, (number_fields.-)(list_props[RealBand].length(mod_bands.TB), 1))`ub, mod_bands.x))), (FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.>(list_props[RealBand].nth(mod_bands.RL, j)`lb, mod_bands.x)), reals.>=(j, list_props[RealBand].length(mod_bands.TB))))))))))}")))
 (bands_below_TCC5 0
  (bands_below_TCC5-1 nil 3638878355
   ("" (skeep)
    (("" (name "G" "v(x,cdr(RL))")
      (("1" (replaces -1)
        (("1" (case "NOT length(cdr(RL)) = length(RL)-1")
          (("1" (expand "length" 1 2)
            (("1" (lift-if)
              (("1" (hide 5)
                (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
              nil))
            nil)
           ("2"
            (case "NOT FORALL (j:nat): j<length(RL)-1 IMPLIES nth(cdr(RL),j) = nth(RL,j+1)")
            (("1" (skeep)
              (("1" (expand "nth" 1 2) (("1" (propax) nil nil)) nil))
              nil)
             ("2" (case "NOT strictly_increasing_real?(cdr(RL))")
              (("1" (hide 5)
                (("1" (expand "strictly_increasing_real?")
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (skeep)
                        (("1" (inst - "i")
                          (("1" (assert)
                            (("1" (inst - "i+1")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst-cp - "i")
                          (("2" (inst - "j")
                            (("2" (assert)
                              (("2"
                                (replaces -2)
                                (("2"
                                  (replaces -2)
                                  (("2"
                                    (inst - "i+1" "j+1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (typepred "G")
                  (("2" (assert)
                    (("2" (flatten)
                      (("2"
                        (case "NOT length[RealBand](cons[RealBand](nth[RealBand](RL, 0), G)) <=
                                       length[RealBand](RL)")
                        (("1" (hide 5)
                          (("1" (expand "length" 1 1)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (assert)
                          (("2" (split +)
                            (("1" (expand "strictly_increasing_real?")
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split +)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "nth" 1 3)
                                        (("1"
                                          (expand "nth" 1 1)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split +)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -13 "0")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (inst - "i-1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (typepred "j")
                                        (("2"
                                          (expand "length" -1 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "nth" 1 3)
                                              (("2"
                                                (expand "nth" 1 1)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split +)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -8
                                                             "j-1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -13
                                                                 "j-1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -13)
                                                                    (("1"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               -16
                                                                               "0"
                                                                               "j")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -9
                                                                           "j-1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -
                                                           "i-1"
                                                           "j-1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (assert)
                                (("2"
                                  (split +)
                                  (("1"
                                    (expand "length" 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case "j = 0")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (inst - "j-1")
                                          (("2"
                                            (split -6)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (assert) nil nil)
                                             ("3"
                                              (inst -9 "j-1")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "nth" 1 1)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split +)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -6 "j-1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst -10 "j-1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -10)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (assert)
                                    (("3"
                                      (expand "nth" 1 1)
                                      (("3"
                                        (lift-if)
                                        (("3"
                                          (lift-if)
                                          (("3"
                                            (lift-if)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (split +)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split +)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst
                                                           -7
                                                           "j-1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -11
                                                               "j-1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (inst
                                                           -6
                                                           "j-1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -10
                                                               "j-1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (flatten)
                              (("3"
                                (expand "length" 1)
                                (("3"
                                  (expand "nth" 1 1)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (lift-if)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (split +)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (assert)
                              (("4"
                                (skeep)
                                (("4"
                                  (assert)
                                  (("4"
                                    (expand "length" 1)
                                    (("4"
                                      (assert)
                                      (("4"
                                        (inst -8 "j-1")
                                        (("4"
                                          (assert)
                                          (("4"
                                            (inst -9 "j-1")
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp*) (("3" (assert) nil nil)) nil)
             ("4" (skosimp*) (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (hide 5)
        (("2" (expand "length" 1 2)
          (("2" (lift-if) (("2" (ground) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (hide 5) (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((i skolem-const-decl
       "below(length(cons[RealBand](nth[RealBand](RL, 0), G)))"
       mod_bands nil)
    (G skolem-const-decl "{TB |
   strictly_increasing_real?(cdr(RL)) IMPLIES
    (strictly_increasing_real?(TB) AND
      length(TB) <= length(cdr(RL)) AND
       (FORALL (j: nat):
          j < length(cdr(RL)) AND nth(cdr(RL), j)`lb <= x IMPLIES
           (j < length(TB) AND
             nth(TB, j)`lb = nth(cdr(RL), j)`lb AND
              nth(TB, j)`ub =
               (IF nth(cdr(RL), j)`ub <= x THEN nth(cdr(RL), j)`ub
                ELSE x
                ENDIF)))
        AND
        (length(TB) > 0 IMPLIES nth(TB, length(TB) - 1)`ub <= x) AND
         FORALL (j: nat):
           j < length(cdr(RL)) AND nth(cdr(RL), j)`lb > x IMPLIES
            j >= length(TB))}" mod_bands nil)
    (x skolem-const-decl "real" mod_bands nil)
    (RL skolem-const-decl "list[RealBand]" mod_bands nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil))
   nil
   (bands_below subtype
    "list_adt[RealBand].cons(list_props[RealBand].nth(mod_bands.RL, 0), mod_bands.bands_below(mod_bands.x, list_adt[RealBand].cdr(mod_bands.RL)))"
    "{TB | booleans.IMPLIES(real_bands.strictly_increasing_real?(mod_bands.RL), (booleans.AND(real_bands.strictly_increasing_real?(mod_bands.TB), booleans.AND(reals.<=(list_props[RealBand].length(mod_bands.TB), list_props[RealBand].length(mod_bands.RL)), booleans.AND((FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.<=(list_props[RealBand].nth(mod_bands.RL, j)`lb, mod_bands.x)), (booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.TB)), booleans.AND(list_props[RealBand].nth(mod_bands.TB, j)`lb = list_props[RealBand].nth(mod_bands.RL, j)`lb, list_props[RealBand].nth(mod_bands.TB, j)`ub = (IF reals.<=(list_props[RealBand].nth(mod_bands.RL, j)`ub, mod_bands.x) THEN list_props[RealBand].nth(mod_bands.RL, j)`ub ELSE mod_bands.x ENDIF)))))), booleans.AND((booleans.IMPLIES(reals.>(list_props[RealBand].length(mod_bands.TB), 0), reals.<=(list_props[RealBand].nth(mod_bands.TB, (number_fields.-)(list_props[RealBand].length(mod_bands.TB), 1))`ub, mod_bands.x))), (FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.>(list_props[RealBand].nth(mod_bands.RL, j)`lb, mod_bands.x)), reals.>=(j, list_props[RealBand].length(mod_bands.TB))))))))))}")))
 (bands_above_TCC1 0
  (bands_above_TCC1-1 nil 3638894127 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (bands_above subtype
    "(number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), mod_bands.j)"
    "below[length[RealBand](RL)]")))
 (bands_above_TCC2 0
  (bands_above_TCC2-1 nil 3638894127 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (bands_above subtype
    "(number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.TB), 1), mod_bands.j)"
    "below[length[RealBand](TB)]")))
 (bands_above_TCC3 0
  (bands_above_TCC3-1 nil 3638894127 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (bands_above subtype "0" "below[length[RealBand](TB)]")))
 (bands_above_TCC4 0
  (bands_above_TCC4-1 nil 3638894127 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (bands_above subtype
    "(number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1)"
    "below[length[RealBand](RL)]")))
 (bands_above_TCC5 0
  (bands_above_TCC5-1 nil 3638894127
   ("" (skeep*)
    (("" (assert)
      (("" (split +)
        (("1" (hide -) (("1" (grind) nil nil)) nil)
         ("2" (skeep)
          (("2" (assert)
            (("2" (expand "strictly_increasing_real?")
              (("2" (flatten)
                (("2" (inst - "length(RL)-1")
                  (("2" (inst - "length(RL)-1-j" "length(RL)-1")
                    (("2" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (RealBand type-eq-decl nil real_bands nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (length_null formula-decl nil more_list_props structures)
    (int nonempty-type-eq-decl nil integers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (bands_above subtype "(: :)"
    "{TB | booleans.IMPLIES(real_bands.strictly_increasing_real?(mod_bands.RL), (booleans.AND(real_bands.strictly_increasing_real?(mod_bands.TB), booleans.AND(reals.<=(list_props[RealBand].length(mod_bands.TB), list_props[RealBand].length(mod_bands.RL)), booleans.AND((FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.>=(list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`ub, mod_bands.x)), (booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.TB)), booleans.AND(list_props[RealBand].nth(mod_bands.TB, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.TB), 1), j))`ub = list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`ub, list_props[RealBand].nth(mod_bands.TB, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.TB), 1), j))`lb = (IF reals.>=(list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`lb, mod_bands.x) THEN list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`lb ELSE mod_bands.x ENDIF)))))), booleans.AND((booleans.IMPLIES(reals.>(list_props[RealBand].length(mod_bands.TB), 0), reals.>=(list_props[RealBand].nth(mod_bands.TB, 0)`lb, mod_bands.x))), (FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.<(list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`ub, mod_bands.x)), reals.>=(j, list_props[RealBand].length(mod_bands.TB))))))))))}")))
 (bands_above_TCC6 0
  (bands_above_TCC6-1 nil 3638894127
   ("" (skeep*)
    ((""
      (name "BB" "(# lb := x,
                                                   ub
                                                   := nth[RealBand]
                                                      (RL,
                                                       length[RealBand](RL)
                                                       -
                                                       1)`ub #)")
      (("1" (replace -1)
        (("1"
          (deftactic iggy
           (then (split +) (replaces -1 :dir rl) (assert)))
          (("1" (iggy)
            (("1" (expand "strictly_increasing_real?" +)
              (("1" (split)
                (("1" (skosimp*)
                  (("1" (case "NOT i!1 = 0")
                    (("1" (typepred "i!1")
                      (("1" (expand "length" -1)
                        (("1" (expand "length" -1)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (replaces -1)
                      (("2" (expand "nth" + 3)
                        (("2" (expand "nth" + 1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (case "j!1<1")
                    (("1" (assert) nil nil)
                     ("2" (typepred "j!1")
                      (("2" (expand "length" -1)
                        (("2" (expand "length" -1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (assert)
                (("2" (case "NOT j = 0")
                  (("1" (typepred "j")
                    (("1" (hide 2)
                      (("1" (expand "strictly_increasing_real?")
                        (("1" (flatten)
                          (("1"
                            (inst - "length(RL)-1-j" "length(RL)-1")
                            (("1" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (replace -1)
                      (("2" (assert)
                        (("2" (expand "nth" + 1)
                          (("2" (expand "nth" + 1)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "nth" + 1) (("3" (assert) nil nil)) nil)
             ("4" (skeep)
              (("4" (case "NOT j = 0")
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 4) (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((int_times_even_is_even application-judgement "even_int" integers
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (bands_above subtype
    "(: (# lb := mod_bands.x, ub := list_props[RealBand].nth(mod_bands.RL, (number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1))`ub #) :)"
    "{TB | booleans.IMPLIES(real_bands.strictly_increasing_real?(mod_bands.RL), (booleans.AND(real_bands.strictly_increasing_real?(mod_bands.TB), booleans.AND(reals.<=(list_props[RealBand].length(mod_bands.TB), list_props[RealBand].length(mod_bands.RL)), booleans.AND((FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.>=(list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`ub, mod_bands.x)), (booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.TB)), booleans.AND(list_props[RealBand].nth(mod_bands.TB, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.TB), 1), j))`ub = list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`ub, list_props[RealBand].nth(mod_bands.TB, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.TB), 1), j))`lb = (IF reals.>=(list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`lb, mod_bands.x) THEN list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`lb ELSE mod_bands.x ENDIF)))))), booleans.AND((booleans.IMPLIES(reals.>(list_props[RealBand].length(mod_bands.TB), 0), reals.>=(list_props[RealBand].nth(mod_bands.TB, 0)`lb, mod_bands.x))), (FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.<(list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`ub, mod_bands.x)), reals.>=(j, list_props[RealBand].length(mod_bands.TB))))))))))}")))
 (bands_above_TCC7 0
  (bands_above_TCC7-2 "" 3813484644
   ("" (skeep)
    (("" (name "G" "v(x,remove_last(RL))")
      (("1" (replaces -1)
        (("1"
          (name "BB" "append[RealBand]
                                                  (G,
                                                   (: nth[RealBand](RL, length[RealBand](RL) - 1) :))")
          (("1" (replace -1)
            (("1"
              (deftactic iggy
               (then (split +) (replaces -1 :dir rl) (assert)))
              (("1" (iggy)
                (("1" (typepred "G")
                  (("1" (lemma "remove_last_strictly_increasing_real")
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (case "length(G)=0")
                              (("1"
                                (assert)
                                (("1"
                                  (case "NOT G = null")
                                  (("1"
                                    (hide-all-but (-1 1))
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (replaces -1)
                                    (("2"
                                      (copy -7)
                                      (("2"
                                        (expand
                                         "strictly_increasing_real?"
                                         -1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst - "length(RL)-1")
                                            (("2"
                                              (hide-all-but (-1 1))
                                              (("2"
                                                (grind :exclude "nth")
                                                (("2"
                                                  (case "NOT i!1=0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (expand
                                                       "nth"
                                                       +
                                                       3)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         +
                                                         1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (copy -7)
                                  (("2"
                                    (hide -8)
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (lemma "BB")
                                        (("2"
                                          (replace -1 :dir rl)
                                          (("2"
                                            (expand
                                             "strictly_increasing_real?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (copy -1)
                                                  (("2"
                                                    (both-sides-f
                                                     -1
                                                     "length")
                                                    (("2"
                                                      (rewrite
                                                       "length_append")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split +)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (typepred
                                                               "i")
                                                              (("1"
                                                                (expand
                                                                 "BB"
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "nth_append"
                                                                   1)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (split
                                                                       +)
                                                                      (("1"
                                                                        (inst
                                                                         -6
                                                                         "i")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "nth"
                                                                           2
                                                                           3)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "nth"
                                                                               2
                                                                               1)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "length(RL)-1")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (replace
                                                                 -3
                                                                 +)
                                                                (("2"
                                                                  (rewrite
                                                                   "nth_append"
                                                                   +)
                                                                  (("2"
                                                                    (rewrite
                                                                     "nth_append"
                                                                     +)
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split
                                                                             +)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst
                                                                                 -8
                                                                                 "i"
                                                                                 "j")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "nth"
                                                                                 2
                                                                                 2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (label
                                                                                     "ans"
                                                                                     -9)
                                                                                    (("2"
                                                                                      (copy
                                                                                       "ans")
                                                                                      (("2"
                                                                                        (hide
                                                                                         "ans")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "length(G)-1-i")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "remove_last_def")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "length_remove_last")
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (inst?
                                                                                                                           -7)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "length_remove_last")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -11
                                                                                                           "length(G)-i-1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "length_append")
                  (("2" (assert)
                    (("2" (typepred "G")
                      (("2" (assert)
                        (("2"
                          (lemma
                           "remove_last_strictly_increasing_real")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (lemma "length_remove_last")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep)
                  (("3" (assert)
                    (("3" (lemma "length_remove_last")
                      (("3" (inst?)
                        (("3" (assert)
                          (("3" (rewrite "length_append")
                            (("3" (assert)
                              (("3"
                                (typepred "G")
                                (("3"
                                  (lemma
                                   "remove_last_strictly_increasing_real")
                                  (("3"
                                    (inst?)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (flatten)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (inst - "j-1")
                                            (("1"
                                              (case "j = 0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "nth_append"
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           1
                                                           1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst - "j-1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -7)
                                                    (("1"
                                                      (lemma
                                                       "remove_last_def")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (rewrite
                                                                         "nth_append"
                                                                         +)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (case "j = 0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (rewrite
                                                         "nth_append"
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           2
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             2
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (flatten)
                  (("4" (rewrite "nth_append")
                    (("4" (assert)
                      (("4" (case "length(G)=0")
                        (("1" (assert)
                          (("1" (case "G = null")
                            (("1" (replace -2)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "nth" 1 1)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 1))
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (typepred "G")
                            (("2" (assert)
                              (("2"
                                (lemma
                                 "remove_last_strictly_increasing_real")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (skeep)
                  (("5" (assert)
                    (("5" (rewrite "length_append" 1)
                      (("5" (assert)
                        (("5" (typepred "G")
                          (("5" (assert)
                            (("5"
                              (lemma
                               "remove_last_strictly_increasing_real")
                              (("5"
                                (inst?)
                                (("5"
                                  (assert)
                                  (("5"
                                    (flatten)
                                    (("5"
                                      (case "j = 0")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (inst -6 "j-1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "remove_last_def")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (lemma
                                                     "length_remove_last")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 5)
        (("2" (lemma "length_remove_last")
          (("2" (inst?)
            (("2" (assert)
              (("2" (expand "max" -1)
                (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (bands_above subtype
    "list_props[RealBand].append(mod_bands.bands_above(mod_bands.x, real_bands.remove_last(mod_bands.RL)), (: list_props[RealBand].nth(mod_bands.RL, (number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1)) :))"
    "{TB | booleans.IMPLIES(real_bands.strictly_increasing_real?(mod_bands.RL), (booleans.AND(real_bands.strictly_increasing_real?(mod_bands.TB), booleans.AND(reals.<=(list_props[RealBand].length(mod_bands.TB), list_props[RealBand].length(mod_bands.RL)), booleans.AND((FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.>=(list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`ub, mod_bands.x)), (booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.TB)), booleans.AND(list_props[RealBand].nth(mod_bands.TB, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.TB), 1), j))`ub = list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`ub, list_props[RealBand].nth(mod_bands.TB, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.TB), 1), j))`lb = (IF reals.>=(list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`lb, mod_bands.x) THEN list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`lb ELSE mod_bands.x ENDIF)))))), booleans.AND((booleans.IMPLIES(reals.>(list_props[RealBand].length(mod_bands.TB), 0), reals.>=(list_props[RealBand].nth(mod_bands.TB, 0)`lb, mod_bands.x))), (FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.<(list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`ub, mod_bands.x)), reals.>=(j, list_props[RealBand].length(mod_bands.TB))))))))))}"))
  (bands_above_TCC7-1 nil 3638894127
   ("" (skeep)
    (("" (name "G" "v(x,remove_last(RL))")
      (("1" (replaces -1)
        (("1"
          (name "BB" "append[RealBand]
                                                  (G,
                                                   (: nth[RealBand](RL, length[RealBand](RL) - 1) :))")
          (("1" (replace -1)
            (("1"
              (deftactic iggy
               (then (split +) (replaces -1 :dir rl) (assert)))
              (("1" (iggy)
                (("1" (typepred "G")
                  (("1" (lemma "remove_last_strictly_increasing_real")
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (case "length(G)=0")
                              (("1"
                                (assert)
                                (("1"
                                  (case "NOT G = null")
                                  (("1"
                                    (hide-all-but (-1 1))
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (replaces -1)
                                    (("2"
                                      (copy -7)
                                      (("2"
                                        (expand
                                         "strictly_increasing_real?"
                                         -1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst - "length(RL)-1")
                                            (("2"
                                              (hide-all-but (-1 1))
                                              (("2"
                                                (grind :exclude "nth")
                                                (("2"
                                                  (case "NOT i!1=0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (expand
                                                       "nth"
                                                       +
                                                       3)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         +
                                                         1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (copy -7)
                                  (("2"
                                    (hide -8)
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (lemma "BB")
                                        (("2"
                                          (replace -1 :dir rl)
                                          (("2"
                                            (expand
                                             "strictly_increasing_real?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (copy -1)
                                                  (("2"
                                                    (both-sides-f
                                                     -1
                                                     "length")
                                                    (("2"
                                                      (rewrite
                                                       "length_append")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split +)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (typepred
                                                               "i")
                                                              (("1"
                                                                (expand
                                                                 "BB"
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "nth_append"
                                                                   1)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (split
                                                                       +)
                                                                      (("1"
                                                                        (inst
                                                                         -6
                                                                         "i")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "nth"
                                                                           2
                                                                           3)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "nth"
                                                                               2
                                                                               1)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "length(RL)-1")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (replace
                                                                 -3
                                                                 +)
                                                                (("2"
                                                                  (rewrite
                                                                   "nth_append"
                                                                   +)
                                                                  (("2"
                                                                    (rewrite
                                                                     "nth_append"
                                                                     +)
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split
                                                                             +)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst
                                                                                 -8
                                                                                 "i"
                                                                                 "j")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "nth"
                                                                                 2
                                                                                 2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (label
                                                                                     "ans"
                                                                                     -9)
                                                                                    (("2"
                                                                                      (copy
                                                                                       "ans")
                                                                                      (("2"
                                                                                        (hide
                                                                                         "ans")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "length(G)-1-i")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "remove_last_def")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "length_remove_last")
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (inst?
                                                                                                                           -7)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "length_remove_last")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -11
                                                                                                           "length(G)-i-1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "length_append")
                  (("2" (assert)
                    (("2" (typepred "G")
                      (("2" (assert)
                        (("2"
                          (lemma
                           "remove_last_strictly_increasing_real")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (lemma "length_remove_last")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep)
                  (("3" (assert)
                    (("3" (lemma "length_remove_last")
                      (("3" (inst?)
                        (("3" (assert)
                          (("3" (rewrite "length_append")
                            (("3" (assert)
                              (("3"
                                (typepred "G")
                                (("3"
                                  (lemma
                                   "remove_last_strictly_increasing_real")
                                  (("3"
                                    (inst?)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (flatten)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (inst - "j-1")
                                            (("1"
                                              (case "j = 0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "nth_append"
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           1
                                                           1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst - "j-1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -7)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "remove_last_def")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (rewrite
                                                                           "nth_append"
                                                                           +)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (case "j = 0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (rewrite
                                                         "nth_append"
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           2
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             2
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (flatten)
                  (("4" (rewrite "nth_append")
                    (("4" (assert)
                      (("4" (case "length(G)=0")
                        (("1" (assert)
                          (("1" (case "G = null")
                            (("1" (replace -2)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "nth" 1 1)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 1))
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (typepred "G")
                            (("2" (assert)
                              (("2"
                                (lemma
                                 "remove_last_strictly_increasing_real")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (skeep)
                  (("5" (assert)
                    (("5" (rewrite "length_append" 1)
                      (("5" (assert)
                        (("5" (typepred "G")
                          (("5" (assert)
                            (("5"
                              (lemma
                               "remove_last_strictly_increasing_real")
                              (("5"
                                (inst?)
                                (("5"
                                  (assert)
                                  (("5"
                                    (flatten)
                                    (("5"
                                      (case "j = 0")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (inst -6 "j-1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "remove_last_def")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (lemma
                                                     "length_remove_last")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 5) (("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (hide 5)
        (("2" (lemma "length_remove_last")
          (("2" (inst?)
            (("2" (assert)
              (("2" (expand "max" -1)
                (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (j skolem-const-decl "nat" mod_bands nil)
    (max_0_nnreal formula-decl nil min_max reals)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (length_remove_last formula-decl nil real_bands nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (remove_last_def formula-decl nil real_bands nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nth_append formula-decl nil more_list_props structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (BB skolem-const-decl "list[RealBand]" mod_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (remove_last_strictly_increasing_real formula-decl nil real_bands
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (> const-decl "bool" reals nil)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (bands_above subtype
    "list_props[RealBand].append(mod_bands.bands_above(mod_bands.x, real_bands.remove_last(mod_bands.RL)), (: list_props[RealBand].nth(mod_bands.RL, (number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1)) :))"
    "{TB | booleans.IMPLIES(real_bands.strictly_increasing_real?(mod_bands.RL), (booleans.AND(real_bands.strictly_increasing_real?(mod_bands.TB), booleans.AND(reals.<=(list_props[RealBand].length(mod_bands.TB), list_props[RealBand].length(mod_bands.RL)), booleans.AND((FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.>=(list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`ub, mod_bands.x)), (booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.TB)), booleans.AND(list_props[RealBand].nth(mod_bands.TB, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.TB), 1), j))`ub = list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`ub, list_props[RealBand].nth(mod_bands.TB, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.TB), 1), j))`lb = (IF reals.>=(list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`lb, mod_bands.x) THEN list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`lb ELSE mod_bands.x ENDIF)))))), booleans.AND((booleans.IMPLIES(reals.>(list_props[RealBand].length(mod_bands.TB), 0), reals.>=(list_props[RealBand].nth(mod_bands.TB, 0)`lb, mod_bands.x))), (FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(j, list_props[RealBand].length(mod_bands.RL)), reals.<(list_props[RealBand].nth(mod_bands.RL, (number_fields.-)((number_fields.-)(list_props[RealBand].length(mod_bands.RL), 1), j))`ub, mod_bands.x)), reals.>=(j, list_props[RealBand].length(mod_bands.TB))))))))))}")))
 (bands_below_range 0
  (bands_below_range-1 nil 3639302307
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "bands_below(x,RL)")
        (("" (assert)
          (("" (flatten)
            (("" (inst -5 "j")
              (("" (assert)
                (("" (expand "strictly_increasing_real?" -1)
                  (("" (flatten)
                    (("" (inst-cp - "j")
                      (("" (inst - "length(bands_below(x,RL))-1")
                        (("" (inst - "j" "length(bands_below(x,RL))-1")
                          (("" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bands_below def-decl "{TB |
   strictly_increasing_real?(RL) IMPLIES
    (strictly_increasing_real?(TB) AND
      length(TB) <= length(RL) AND
       (FORALL (j: nat):
          j < length(RL) AND nth(RL, j)`lb <= x IMPLIES
           (j < length(TB) AND
             nth(TB, j)`lb = nth(RL, j)`lb AND
              nth(TB, j)`ub =
               (IF nth(RL, j)`ub <= x THEN nth(RL, j)`ub ELSE x ENDIF)))
        AND
        (length(TB) > 0 IMPLIES nth(TB, length(TB) - 1)`ub <= x) AND
         (FORALL (j: nat):
            j < length(RL) AND nth(RL, j)`lb > x IMPLIES j >= length(TB)))}"
     mod_bands nil))
   shostak))
 (bands_above_range 0
  (bands_above_range-1 nil 3639302486
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "bands_above(x,RL)")
        (("" (assert)
          (("" (flatten)
            (("" (inst -5 "j")
              (("" (assert)
                (("" (expand "strictly_increasing_real?" -1)
                  (("" (flatten)
                    (("" (inst-cp - "j")
                      (("" (inst - "0")
                        (("" (inst - "0" "j") (("" (ground) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (> const-decl "bool" reals nil)
    (bands_above def-decl "{TB |
   strictly_increasing_real?(RL) IMPLIES
    (strictly_increasing_real?(TB) AND
      length(TB) <= length(RL) AND
       (FORALL (j: nat):
          j < length(RL) AND nth(RL, length(RL) - 1 - j)`ub >= x IMPLIES
           (j < length(TB) AND
             nth(TB, length(TB) - 1 - j)`ub =
              nth(RL, length(RL) - 1 - j)`ub
              AND
              nth(TB, length(TB) - 1 - j)`lb =
               (IF nth(RL, length(RL) - 1 - j)`lb >= x
                  THEN nth(RL, length(RL) - 1 - j)`lb
                ELSE x
                ENDIF)))
        AND
        (length(TB) > 0 IMPLIES nth(TB, 0)`lb >= x) AND
         (FORALL (j: nat):
            j < length(RL) AND nth(RL, length(RL) - 1 - j)`ub < x IMPLIES
             j >= length(TB)))}" mod_bands nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (bands_below_length 0
  (bands_below_length-1 nil 3639311899
   ("" (induct "RL")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (inst - "x!1")
        (("2" (expand "bands_below" +)
          (("2" (lift-if)
            (("2" (ground)
              (("2" (expand "length" 2) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IntBand type-eq-decl nil int_bands nil)
    (length_null formula-decl nil more_list_props structures)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (bands_below def-decl "{TB |
   strictly_increasing_real?(RL) IMPLIES
    (strictly_increasing_real?(TB) AND
      length(TB) <= length(RL) AND
       (FORALL (j: nat):
          j < length(RL) AND nth(RL, j)`lb <= x IMPLIES
           (j < length(TB) AND
             nth(TB, j)`lb = nth(RL, j)`lb AND
              nth(TB, j)`ub =
               (IF nth(RL, j)`ub <= x THEN nth(RL, j)`ub ELSE x ENDIF)))
        AND
        (length(TB) > 0 IMPLIES nth(TB, length(TB) - 1)`ub <= x) AND
         (FORALL (j: nat):
            j < length(RL) AND nth(RL, j)`lb > x IMPLIES j >= length(TB)))}"
     mod_bands nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (bands_above_length 0
  (bands_above_length-1 nil 3639311956
   (""
    (case "FORALL (RL: list[RealBand], x: real,k:nat):
      length(RL)<=k IMPLIES  length(bands_above(x, RL)) <= length(RL)")
    (("1" (skeep)
      (("1" (inst - "RL" "x" "length(RL)") (("1" (assert) nil nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "k")
        (("1" (skeep)
          (("1" (case "NOT RL = null")
            (("1" (grind) nil nil)
             ("2" (replaces -1)
              (("2" (expand "bands_above")
                (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (skolem 1 "k")
          (("2" (flatten)
            (("2" (skeep)
              (("2" (case "NOT length(RL) = k+1")
                (("1" (insteep -) (("1" (assert) nil nil)) nil)
                 ("2" (hide -3)
                  (("2" (expand "bands_above" +)
                    (("2" (lift-if)
                      (("2" (ground)
                        (("2" (rewrite "length_append")
                          (("2" (inst - "remove_last(RL)" "x")
                            (("2" (assert)
                              (("2"
                                (lemma "length_remove_last")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_0_nnreal formula-decl nil min_max reals)
    (length_remove_last formula-decl nil real_bands nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length_null formula-decl nil more_list_props structures)
    (IntBand type-eq-decl nil int_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (TRUE const-decl "bool" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (> const-decl "bool" reals nil)
    (bands_above def-decl "{TB |
   strictly_increasing_real?(RL) IMPLIES
    (strictly_increasing_real?(TB) AND
      length(TB) <= length(RL) AND
       (FORALL (j: nat):
          j < length(RL) AND nth(RL, length(RL) - 1 - j)`ub >= x IMPLIES
           (j < length(TB) AND
             nth(TB, length(TB) - 1 - j)`ub =
              nth(RL, length(RL) - 1 - j)`ub
              AND
              nth(TB, length(TB) - 1 - j)`lb =
               (IF nth(RL, length(RL) - 1 - j)`lb >= x
                  THEN nth(RL, length(RL) - 1 - j)`lb
                ELSE x
                ENDIF)))
        AND
        (length(TB) > 0 IMPLIES nth(TB, 0)`lb >= x) AND
         (FORALL (j: nat):
            j < length(RL) AND nth(RL, length(RL) - 1 - j)`ub < x IMPLIES
             j >= length(TB)))}" mod_bands nil))
   shostak))
 (band_mod_2pi_TCC1 0
  (band_mod_2pi_TCC1-1 nil 3639136435 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (band_to_mod? const-decl "bool" mod_bands nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (in? const-decl "bool" real_bands nil)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (track_band? const-decl "bool" mod_bands nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (band_mod_2pi subtype "mod_bands.RL"
    "(mod_bands.track_band?(mod_bands.RL))")))
 (band_mod_2pi_TCC2 0
  (band_mod_2pi_TCC2-2 "" 3813484645
   ("" (skeep)
    (("" (expand "track_band?")
      (("" (assert)
        (("" (typepred "RL")
          (("" (expand "band_to_mod?")
            (("" (flatten)
              (("" (assert)
                (("" (expand "strictly_increasing_real?")
                  (("" (flatten)
                    (("" (assert)
                      (("" (split)
                        (("1" (skeep)
                          (("1" (inst-cp - "0" "j")
                            (("1" (assert)
                              (("1"
                                (inst - "j" "length(RL)-1")
                                (("1"
                                  (inst-cp - "0")
                                  (("1"
                                    (inst-cp - "j")
                                    (("1"
                                      (inst - "length(RL)-1")
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (case "z = 2*pi")
                            (("1" (inst + "0")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (expand "to2pi" 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "floor_int")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (invoke
                                             (case "NOT %1 = 0")
                                             (! 1 2))
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (replace -1)
                                              (("2"
                                                (expand "in?")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst -3 "0")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "to2pi(z) = z")
                              (("1" (assert) nil nil)
                               ("2"
                                (lemma "to2pi_id")
                                (("2"
                                  (inst - "z")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep -)
                                      (("2"
                                        (expand "in?" -1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst-cp - "0" "j")
                                            (("2"
                                              (inst
                                               -
                                               "j"
                                               "length(RL)-1")
                                              (("2"
                                                (inst-cp - "0")
                                                (("2"
                                                  (inst-cp - "j")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "length(RL)-1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skeep)
                          (("3" (skeep -)
                            (("3" (inst + "j" "z")
                              (("3"
                                (assert)
                                (("3"
                                  (lemma "to2pi_id")
                                  (("3"
                                    (inst?)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (expand "in?" -1)
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (inst-cp - "0" "j")
                                              (("3"
                                                (inst - "0")
                                                (("3"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (band_mod_2pi subtype "mod_bands.RL"
    "(mod_bands.track_band?(mod_bands.RL))"))
  (band_mod_2pi_TCC2-1 nil 3639136435
   ("" (skeep)
    (("" (expand "track_band?")
      (("" (assert)
        (("" (typepred "RL")
          (("" (expand "band_to_mod?")
            (("" (flatten)
              (("" (assert)
                (("" (expand "strictly_increasing_real?")
                  (("" (flatten)
                    (("" (assert)
                      (("" (split)
                        (("1" (skeep)
                          (("1" (inst-cp - "0" "j")
                            (("1" (assert)
                              (("1"
                                (inst - "j" "length(RL)-1")
                                (("1"
                                  (inst-cp - "0")
                                  (("1"
                                    (inst-cp - "j")
                                    (("1"
                                      (inst - "length(RL)-1")
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (case "z = 2*pi")
                            (("1" (inst + "0")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (expand "to2pi" 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "floor_int")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (invoke
                                             (case "NOT %1 = 0")
                                             (! 1 2))
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (replace -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "in?")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst -3 "0")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "to2pi(z) = z")
                              (("1" (assert) nil nil)
                               ("2"
                                (lemma "to2pi_id")
                                (("2"
                                  (inst - "z")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep -)
                                      (("2"
                                        (expand "in?" -1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst-cp - "0" "j")
                                            (("2"
                                              (inst
                                               -
                                               "j"
                                               "length(RL)-1")
                                              (("2"
                                                (inst-cp - "0")
                                                (("2"
                                                  (inst-cp - "j")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "length(RL)-1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skeep)
                          (("3" (skeep -)
                            (("3" (inst + "j" "z")
                              (("3"
                                (assert)
                                (("3"
                                  (lemma "to2pi_id")
                                  (("3"
                                    (inst?)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (expand "in?" -1)
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (inst-cp - "0" "j")
                                              (("3"
                                                (inst - "0")
                                                (("3"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((z skolem-const-decl "real" mod_bands nil)
    (z skolem-const-decl "real" mod_bands nil)
    (to2pi_id formula-decl nil to2pi trig)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (nnreal type-eq-decl nil real_types nil)
    (in? const-decl "bool" real_bands nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor_int formula-decl nil floor_ceil nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (band_to_mod? const-decl "bool" mod_bands nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (track_band? const-decl "bool" mod_bands nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (band_mod_2pi subtype "mod_bands.RL"
    "(mod_bands.track_band?(mod_bands.RL))")))
 (band_mod_2pi_TCC3 0
  (band_mod_2pi_TCC3-1 nil 3639136435
   ("" (skeep)
    (("" (assert)
      (("" (expand "track_band?")
        (("" (typepred "RL")
          (("" (expand "band_to_mod?")
            (("" (flatten)
              (("" (split)
                (("1" (expand "strictly_increasing_real?")
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (split +)
                        (("1" (skeep)
                          (("1" (assert)
                            (("1" (expand "nth" 1)
                              (("1"
                                (lift-if)
                                (("1"
                                  (ground)
                                  (("1" (inst - "i-1") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (expand "nth" +)
                            (("2" (lift-if)
                              (("2"
                                (lift-if)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (ground)
                                      (("1"
                                        (inst - "0" "j-1")
                                        (("1"
                                          (inst - "0")
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst - "i-1" "j-1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (assert)
                    (("2" (expand "nth" +)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (expand "strictly_increasing_real?")
                            (("2" (flatten)
                              (("2"
                                (ground)
                                (("1"
                                  (inst - "0" "j-1")
                                  (("1"
                                    (inst - "0")
                                    (("1" (ground) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst - "j-1" "length(RL)-1")
                                  (("2"
                                    (inst - "length(RL)-1")
                                    (("2"
                                      (ground)
                                      (("2"
                                        (typepred "j")
                                        (("2"
                                          (expand "length" -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep)
                  (("3" (skeep -)
                    (("3" (case "z = 2*pi")
                      (("1" (assert)
                        (("1" (replace -1)
                          (("1" (expand "to2pi" +)
                            (("1" (lemma "floor_int")
                              (("1"
                                (inst?)
                                (("1"
                                  (case "NOT (2*pi)/(2*pi)=1")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (replaces -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst + "0")
                                            (("1"
                                              (expand "nth" 1)
                                              (("1"
                                                (expand "in?" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "to2pi(z) = z")
                        (("1" (replace -1)
                          (("1" (inst + "j+1")
                            (("1" (expand "nth" 2)
                              (("1" (propax) nil nil)) nil)
                             ("2" (expand "length" 1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide 3)
                          (("2" (lemma "to2pi_id")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (case "z>=nth(RL,0)`lb")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand
                                       "strictly_increasing_real?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst - "j" "length(RL)-1")
                                          (("1"
                                            (inst - "length(RL)-1")
                                            (("1"
                                              (expand "in?")
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "in?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand
                                         "strictly_increasing_real?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst - "0" "j")
                                            (("2"
                                              (inst - "0")
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (skeep)
                  (("4" (skeep)
                    (("4" (case "j = 0")
                      (("1" (case "NOT z = 0")
                        (("1" (replace -1)
                          (("1" (expand "nth" -2)
                            (("1" (expand "in?")
                              (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (inst + "length(RL)-1" "2*pi")
                          (("2" (assert)
                            (("2" (expand "strictly_increasing_real?")
                              (("2"
                                (flatten)
                                (("2"
                                  (inst - "length(RL)-1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "in?" 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (expand "to2pi" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "nth" -1)
                        (("2" (assert)
                          (("2" (inst + "j-1" "z")
                            (("2" (assert)
                              (("2"
                                (lemma "to2pi_id")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand
                                       "strictly_increasing_real?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "in?" -1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst - "0")
                                              (("2"
                                                (inst - "0" "j-1")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((z skolem-const-decl "real" mod_bands nil)
    (below type-eq-decl nil nat_types nil)
    (z skolem-const-decl "real" mod_bands nil)
    (to2pi_id formula-decl nil to2pi trig)
    (j skolem-const-decl "below(length(RL))" mod_bands nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (nnreal type-eq-decl nil real_types nil)
    (in? const-decl "bool" real_bands nil)
    (RL skolem-const-decl "(band_to_mod?)" mod_bands nil)
    (TRUE const-decl "bool" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (floor_int formula-decl nil floor_ceil nil)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (band_to_mod? const-decl "bool" mod_bands nil)
    (track_band? const-decl "bool" mod_bands nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (band_mod_2pi subtype
    "list_adt[[# lb: real, ub: real #]].cons((# lb := 0, ub := 0 #), mod_bands.RL)"
    "(mod_bands.track_band?(mod_bands.RL))")))
 (band_mod_2pi_TCC4 0
  (band_mod_2pi_TCC4-2 nil 3639308397
   ("" (skeep)
    (("" (assert)
      (("" (hide 2)
        (("" (case "NOT nth(RL,length(RL)-1)`ub>2*pi")
          (("1" (assert) nil nil)
           ("2" (hide (-2 1))
            (("2" (lemma "append_realband_spec_def")
              (("2" (inst?)
                (("2" (assert)
                  (("2"
                    (name "G" "append_realband_spec(add
                                                                                             (-2 * pi, bands_above(2 * pi, RL)),
                                                                                             bands_below(2 * pi, RL))")
                    (("2" (replace -1)
                      (("2" (assert)
                        (("2" (invoke (case "%1") (! -2 1))
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (replace -3)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "track_band?")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "RL")
                                        (("1"
                                          (expand "band_to_mod?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split +)
                                              (("1"
                                                (expand
                                                 "strictly_increasing_real?"
                                                 -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (lemma
                                                       "append_realband_spec_nth")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (replace -9)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "j")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lift-if
                                                                     -1)
                                                                    (("1"
                                                                      (deftactic
                                                                       slice
                                                                       (then
                                                                        (split
                                                                         -)
                                                                        (flatten)
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (assert)))
                                                                      (("1"
                                                                        (case
                                                                         "strictly_increasing_real?(RL)")
                                                                        (("1"
                                                                          (split
                                                                           -)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (split
                                                                               -4)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   +)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "add"
                                                                                     1)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "map_nth_rw"
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "addrb"
                                                                                         1)
                                                                                        (("1"
                                                                                          (split
                                                                                           +)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "bands_above_range")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "bands_above(2 * pi, RL)")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "length(bands_above(2*pi,RL))-1-j")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -14
                                                                                                                 "length(RL) - length(bands_above(2 * pi, RL)) + j")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "length(bands_above(2 * pi, RL))-j-1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2
                                                                                         +)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             +)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "add"
                                                                                               1)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "map_length")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "map_nth_rw")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "addrb"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "bands_above_range")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "bands_below_range")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -1
                                                                                         +)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             +)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "add(-2 * pi, bands_above(2 * pi, RL))")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "bands_below(2*pi,RL)")
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "nth(bands_below(2*pi,RL),0)`lb>=0")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "strictly_increasing_real?"
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "0")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "0"
                                                                                                                     "1 - length[RealBand](bands_above(2 * pi, RL)) + j")
                                                                                                                    (("1"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "0")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "0")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "bands_below_range")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "add(-2 * pi, bands_above(2 * pi, RL))")
                                                                                                        (("2"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "j")
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "append_realband_spec_length")
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "G")
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (replaces
                                                                                                                           -1
                                                                                                                           -2)
                                                                                                                          (("2"
                                                                                                                            (lift-if
                                                                                                                             -)
                                                                                                                            (("2"
                                                                                                                              (split
                                                                                                                               -)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 -)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "add"
                                                                                       2)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "map_nth_rw"
                                                                                         2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "addrb"
                                                                                           2)
                                                                                          (("1"
                                                                                            (split
                                                                                             2)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "bands_above_range")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "bands_above(2 * pi, RL)")
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "length(bands_above(2 * pi, RL)) - 1 - j")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (copy
                                                                                                                     -11)
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "length(bands_above(2 * pi, RL)) - 1 - j")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "add(-2 * pi, bands_above(2 * pi, RL))")
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -2
                                                                                           3)
                                                                                          (("2"
                                                                                            (split
                                                                                             3)
                                                                                            (("1"
                                                                                              (hide
                                                                                               3)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "bands_below(2*pi,RL)")
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "nth(bands_below(2*pi,RL),0)`lb>=0")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "strictly_increasing_real?"
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "0")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "0"
                                                                                                               "j - length[RealBand](bands_above(2 * pi, RL))")
                                                                                                              (("1"
                                                                                                                (ground)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "0")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "0")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "j")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "G"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "append_realband_spec_length")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "G")
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (replaces
                                                                                                                               -1
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (lift-if
                                                                                                                                 -)
                                                                                                                                (("2"
                                                                                                                                  (split
                                                                                                                                   -)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("3"
                                                                                                            (typepred
                                                                                                             "j")
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "G"
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (lemma
                                                                                                                 "append_realband_spec_length")
                                                                                                                (("3"
                                                                                                                  (inst?)
                                                                                                                  (("3"
                                                                                                                    (lemma
                                                                                                                     "G")
                                                                                                                    (("3"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("3"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("3"
                                                                                                                          (replaces
                                                                                                                           -1
                                                                                                                           -2)
                                                                                                                          (("3"
                                                                                                                            (lift-if
                                                                                                                             -)
                                                                                                                            (("3"
                                                                                                                              (split
                                                                                                                               -)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               3)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "bands_below_range")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "j")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "G"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "append_realband_spec_length")
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "G")
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (replaces
                                                                                                                         -1
                                                                                                                         -2)
                                                                                                                        (("2"
                                                                                                                          (lift-if
                                                                                                                           -)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             -)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (typepred
                                                                             "RL")
                                                                            (("2"
                                                                              (expand
                                                                               "band_to_mod?"
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("4"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (skeep -)
                                                  (("2"
                                                    (inst
                                                     -10
                                                     "to2pi(z)")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (split -10)
                                                        (("1"
                                                          (split -11)
                                                          (("1"
                                                            (skeep -)
                                                            (("1"
                                                              (inst
                                                               +
                                                               "j!1")
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (flatten)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace -1)
                                                          (("2"
                                                            (skeep -11)
                                                            (("2"
                                                              (inst
                                                               +
                                                               "j!1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (replace 1)
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (hide
                                                                 (1 2))
                                                                (("3"
                                                                  (inst
                                                                   -
                                                                   "j")
                                                                  (("3"
                                                                    (flatten)
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (case
                                                                         "z>=2*pi")
                                                                        (("1"
                                                                          (case
                                                                           "NOT to2pi(z) = z-2*pi")
                                                                          (("1"
                                                                            (expand
                                                                             "to2pi"
                                                                             1)
                                                                            (("1"
                                                                              (case
                                                                               "floor(z/(2*pi)) = 1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "z/(2*pi)>=1 AND z/(2*pi)<2")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (cross-mult
                                                                                     1)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (cross-mult
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "in?"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replaces
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "bands_above(2 * pi, RL)")
                                                                                (("2"
                                                                                  (split
                                                                                   -)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "length(RL)-1-j")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "length(bands_above(2 * pi, RL)) - length(RL) + j")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "add"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "map_nth_rw")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "addrb"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "in?"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "in?"
                                                                                                                 -9)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (lift-if
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (ground)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "in?")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "z<0")
                                                                          (("1"
                                                                            (expand
                                                                             "in?"
                                                                             -2)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (typepred
                                                                                 "RL")
                                                                                (("1"
                                                                                  (case
                                                                                   "NOT strictly_increasing_real?(RL)")
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "strictly_increasing_real?"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (inst-cp
                                                                                         -
                                                                                         "0")
                                                                                        (("2"
                                                                                          (inst-cp
                                                                                           -
                                                                                           "j")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "length(RL)-1")
                                                                                            (("2"
                                                                                              (inst-cp
                                                                                               -
                                                                                               "0"
                                                                                               "j")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "j"
                                                                                                 "length(RL)-1")
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "NOT to2pi(z) = z")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "to2pi_id")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "bands_below(2*pi,RL)")
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (hide
                                                                                             3)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "in?"
                                                                                               -7)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "j")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         +
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "in?"
                                                                                                             3)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (ground)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skeep)
                                                (("3"
                                                  (skeep -)
                                                  (("3"
                                                    (lemma
                                                     "append_realband_spec_def")
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (replace -10)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (split -)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "z")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (skeep
                                                                       -)
                                                                      (("1"
                                                                        (expand
                                                                         "add"
                                                                         -2)
                                                                        (("1"
                                                                          (rewrite
                                                                           "map_nth_rw"
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "addrb"
                                                                             -2)
                                                                            (("1"
                                                                              (expand
                                                                               "in?"
                                                                               -2)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "bands_above(2*pi,RL)")
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (name
                                                                                           "jj"
                                                                                           "length(bands_above(2*pi,RL))-1-j!1")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "jj")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "jj"
                                                                                                     (-1
                                                                                                      -2))
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         +
                                                                                                         "length(RL)-1-jj"
                                                                                                         "z+2*pi")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "in?"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (lift-if
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (ground)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (case
                                                                                                               "NOT z>=0")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   (-1
                                                                                                                    -2))
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "bands_above_range")
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "j!1")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "to2pi"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   (-2
                                                                                                                    -3))
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "floor_plus_int")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "1"
                                                                                                                       "z/(2*pi)")
                                                                                                                      (("2"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "floor(z/(2*pi)) = 0")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (case
                                                                                                                               "0<=z/(2*pi) AND z/(2*pi)<1")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (cross-mult
                                                                                                                                   1)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (cross-mult
                                                                                                                                   1)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "jj")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skeep
                                                                       -)
                                                                      (("2"
                                                                        (case
                                                                         "j!1 < length(RL)")
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "j!1"
                                                                           "z")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (typepred
                                                                               "bands_below(2*pi,RL)")
                                                                              (("1"
                                                                                (split
                                                                                 -)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "j!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "nth(RL,j!1)`lb>2*pi")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -6
                                                                                             "j!1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (split
                                                                                               +)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "in?")
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "NOT z>=0")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "in?")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "nth(RL,j!1)`lb>=0")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           (-1
                                                                                                            -2
                                                                                                            -3
                                                                                                            -4
                                                                                                            -5
                                                                                                            -6))
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -16)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "strictly_increasing_real?"
                                                                                                               -8)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "0")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "0"
                                                                                                                     "j!1")
                                                                                                                    (("2"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (rewrite
                                                                                                   "to2pi_id")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "bands_below_length")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (inst
                                                                       +
                                                                       "j")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (split +)
                            (("1" (hide -2)
                              (("1"
                                (hide -1)
                                (("1"
                                  (typepred "bands_above(2*pi,RL)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (typepred "RL")
                                      (("1"
                                        (expand "band_to_mod?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide (-1 -2 -3))
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide-all-but (-1 1))
                                                  (("1"
                                                    (lemma
                                                     "strictly_increasing_add_real")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -2)
                              (("2"
                                (typepred "bands_below(2*pi,RL)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "RL")
                                    (("2"
                                      (expand "band_to_mod?")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide -2)
                              (("3"
                                (flatten)
                                (("3"
                                  (assert)
                                  (("3"
                                    (expand "add" 1)
                                    (("3"
                                      (rewrite "map_length")
                                      (("3"
                                        (rewrite "map_nth_rw")
                                        (("3"
                                          (expand "addrb" 1)
                                          (("3"
                                            (typepred
                                             "bands_above(2*pi,RL)")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (typepred
                                                 "bands_below(2*pi,RL)")
                                                (("3"
                                                  (invoke
                                                   (case "NOT %1")
                                                   (! -1 1))
                                                  (("1"
                                                    (hide (-1 -2))
                                                    (("1"
                                                      (typepred "RL")
                                                      (("1"
                                                        (expand
                                                         "band_to_mod?")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst -9 "0")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (replace
                                                               -9
                                                               +)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "0")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (typepred
                                                                               "RL")
                                                                              (("1"
                                                                                (expand
                                                                                 "band_to_mod?")
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "0")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (flatten) (("3" (assert) nil nil)) nil)
                           ("4" (flatten) (("4" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strictly_increasing_add_real formula-decl nil real_bands nil)
    (bands_below_length formula-decl nil mod_bands nil)
    (j!1 skolem-const-decl "nat" mod_bands nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (jj skolem-const-decl "int" mod_bands nil)
    (to2pi_id formula-decl nil to2pi trig)
    (j skolem-const-decl "below(length(RL))" mod_bands nil)
    (RL skolem-const-decl "(band_to_mod?)" mod_bands nil)
    (in? const-decl "bool" real_bands nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (G skolem-const-decl "list[RealBand]" mod_bands nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (append_realband_spec_length formula-decl nil real_bands nil)
    (bands_below_range formula-decl nil mod_bands nil)
    (map_length formula-decl nil more_map_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (bands_above_range formula-decl nil mod_bands nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (addrb const-decl "RealBand" real_bands nil)
    (TRUE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (append_realband_spec_nth formula-decl nil real_bands nil)
    (track_band? const-decl "bool" mod_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append_realband_spec const-decl "list[RealBand]" real_bands nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bands_below def-decl "{TB |
   strictly_increasing_real?(RL) IMPLIES
    (strictly_increasing_real?(TB) AND
      length(TB) <= length(RL) AND
       (FORALL (j: nat):
          j < length(RL) AND nth(RL, j)`lb <= x IMPLIES
           (j < length(TB) AND
             nth(TB, j)`lb = nth(RL, j)`lb AND
              nth(TB, j)`ub =
               (IF nth(RL, j)`ub <= x THEN nth(RL, j)`ub ELSE x ENDIF)))
        AND
        (length(TB) > 0 IMPLIES nth(TB, length(TB) - 1)`ub <= x) AND
         (FORALL (j: nat):
            j < length(RL) AND nth(RL, j)`lb > x IMPLIES j >= length(TB)))}"
     mod_bands nil)
    (bands_above def-decl "{TB |
   strictly_increasing_real?(RL) IMPLIES
    (strictly_increasing_real?(TB) AND
      length(TB) <= length(RL) AND
       (FORALL (j: nat):
          j < length(RL) AND nth(RL, length(RL) - 1 - j)`ub >= x IMPLIES
           (j < length(TB) AND
             nth(TB, length(TB) - 1 - j)`ub =
              nth(RL, length(RL) - 1 - j)`ub
              AND
              nth(TB, length(TB) - 1 - j)`lb =
               (IF nth(RL, length(RL) - 1 - j)`lb >= x
                  THEN nth(RL, length(RL) - 1 - j)`lb
                ELSE x
                ENDIF)))
        AND
        (length(TB) > 0 IMPLIES nth(TB, 0)`lb >= x) AND
         (FORALL (j: nat):
            j < length(RL) AND nth(RL, length(RL) - 1 - j)`ub < x IMPLIES
             j >= length(TB)))}" mod_bands nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (<= const-decl "bool" reals nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (add const-decl "listn[RealBand](length[RealBand](RL))" real_bands
     nil)
    (listn type-eq-decl nil listn structures)
    (append_realband_spec_def formula-decl nil real_bands nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (band_to_mod? const-decl "bool" mod_bands nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (band_mod_2pi subtype
    "real_bands.append_realband_spec(real_bands.add(number_fields.*((number_fields.-)(2), pi_def.pi), mod_bands.bands_above(number_fields.*(2, pi_def.pi), mod_bands.RL)), mod_bands.bands_below(number_fields.*(2, pi_def.pi), mod_bands.RL))"
    "(mod_bands.track_band?(mod_bands.RL))"))
  (band_mod_2pi_TCC4-1 nil 3639136435
   ("" (skeep)
    (("" (assert)
      (("" (hide 2)
        (("" (case "NOT nth(RL,length(RL)-1)`ub>2*pi")
          (("1" (assert) nil nil)
           ("2" (hide (-2 1))
            (("2" (lemma "append_realband_spec_def")
              (("2" (inst?)
                (("2" (assert)
                  (("2"
                    (name "G" "append_realband_spec(add
                                                                                    (-2 * pi, bands_above(2 * pi, RL)),
                                                                                    bands_below(2 * pi, RL))")
                    (("2" (replace -1)
                      (("2" (assert)
                        (("2" (invoke (case "%1") (! -2 1))
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (replace -3)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "track_band?")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "RL")
                                        (("1"
                                          (expand "band_to_mod?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split +)
                                              (("1"
                                                (expand
                                                 "strictly_increasing_real?"
                                                 -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (lemma
                                                       "append_realband_spec_nth")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (replace -9)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "j")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lift-if
                                                                     -1)
                                                                    (("1"
                                                                      (deftactic
                                                                       slice
                                                                       (then
                                                                        (split
                                                                         -)
                                                                        (flatten)
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (assert)))
                                                                      (("1"
                                                                        (case
                                                                         "strictly_increasing_real?(RL)")
                                                                        (("1"
                                                                          (split
                                                                           -)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (split
                                                                               -4)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   +)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "add"
                                                                                     1)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "map_nth_rw"
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "addrb"
                                                                                         1)
                                                                                        (("1"
                                                                                          (split
                                                                                           +)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "bands_above_range")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "bands_above(2 * pi, RL)")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "length(bands_above(2*pi,RL))-1-j")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -14
                                                                                                                 "length(RL) - length(bands_above(2 * pi, RL)) + j")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "length(bands_above(2 * pi, RL))-j-1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2
                                                                                         +)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             +)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "add"
                                                                                               1)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "map_length")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "map_nth_rw")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "addrb"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "bands_above_range")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "bands_below_range")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -1
                                                                                         +)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             +)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "add(-2 * pi, bands_above(2 * pi, RL))")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "bands_below(2*pi,RL)")
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "nth(bands_below(2*pi,RL),0)`lb>=0")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "strictly_increasing_real?"
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "0")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "0"
                                                                                                                     "1 - length[RealBand](bands_above(2 * pi, RL)) + j")
                                                                                                                    (("1"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "0")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "0")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "bands_below_range")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "add(-2 * pi, bands_above(2 * pi, RL))")
                                                                                                        (("2"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "j")
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "append_realband_spec_length")
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "G")
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (replaces
                                                                                                                           -1
                                                                                                                           -2)
                                                                                                                          (("2"
                                                                                                                            (lift-if
                                                                                                                             -)
                                                                                                                            (("2"
                                                                                                                              (split
                                                                                                                               -)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 -)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "add"
                                                                                       2)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "map_nth_rw"
                                                                                         2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "addrb"
                                                                                           2)
                                                                                          (("1"
                                                                                            (split
                                                                                             2)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "bands_above_range")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "bands_above(2 * pi, RL)")
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "length(bands_above(2 * pi, RL)) - 1 - j")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (copy
                                                                                                                     -11)
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "length(bands_above(2 * pi, RL)) - 1 - j")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "add(-2 * pi, bands_above(2 * pi, RL))")
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -2
                                                                                           3)
                                                                                          (("2"
                                                                                            (split
                                                                                             3)
                                                                                            (("1"
                                                                                              (hide
                                                                                               3)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "bands_below(2*pi,RL)")
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "nth(bands_below(2*pi,RL),0)`lb>=0")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "strictly_increasing_real?"
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "0")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "0"
                                                                                                               "j - length[RealBand](bands_above(2 * pi, RL))")
                                                                                                              (("1"
                                                                                                                (ground)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "0")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "0")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "j")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "G"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "append_realband_spec_length")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "G")
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (replaces
                                                                                                                               -1
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (lift-if
                                                                                                                                 -)
                                                                                                                                (("2"
                                                                                                                                  (split
                                                                                                                                   -)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("3"
                                                                                                            (typepred
                                                                                                             "j")
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "G"
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (lemma
                                                                                                                 "append_realband_spec_length")
                                                                                                                (("3"
                                                                                                                  (inst?)
                                                                                                                  (("3"
                                                                                                                    (lemma
                                                                                                                     "G")
                                                                                                                    (("3"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("3"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("3"
                                                                                                                          (replaces
                                                                                                                           -1
                                                                                                                           -2)
                                                                                                                          (("3"
                                                                                                                            (lift-if
                                                                                                                             -)
                                                                                                                            (("3"
                                                                                                                              (split
                                                                                                                               -)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               3)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "bands_below_range")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "j")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "G"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "append_realband_spec_length")
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "G")
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (replaces
                                                                                                                         -1
                                                                                                                         -2)
                                                                                                                        (("2"
                                                                                                                          (lift-if
                                                                                                                           -)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             -)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (typepred
                                                                             "RL")
                                                                            (("2"
                                                                              (expand
                                                                               "band_to_mod?"
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("4"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (skeep -)
                                                  (("2"
                                                    (inst
                                                     -10
                                                     "to2pi(z)")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (split -10)
                                                        (("1"
                                                          (split -11)
                                                          (("1"
                                                            (skeep -)
                                                            (("1"
                                                              (inst
                                                               +
                                                               "j!1")
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (flatten)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace -1)
                                                          (("2"
                                                            (skeep -11)
                                                            (("2"
                                                              (inst
                                                               +
                                                               "j!1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (replace 1)
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (hide
                                                                 (1 2))
                                                                (("3"
                                                                  (inst
                                                                   -
                                                                   "j")
                                                                  (("3"
                                                                    (flatten)
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (case
                                                                         "z>=2*pi")
                                                                        (("1"
                                                                          (case
                                                                           "NOT to2pi(z) = z-2*pi")
                                                                          (("1"
                                                                            (expand
                                                                             "to2pi"
                                                                             1)
                                                                            (("1"
                                                                              (case
                                                                               "floor(z/(2*pi)) = 1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "z/(2*pi)>=1 AND z/(2*pi)<2")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (cross-mult
                                                                                     1)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (cross-mult
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "in?"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replaces
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "bands_above(2 * pi, RL)")
                                                                                (("2"
                                                                                  (split
                                                                                   -)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "length(RL)-1-j")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "length(bands_above(2 * pi, RL)) - length(RL) + j")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "add"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "map_nth_rw")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "addrb"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "in?"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "in?"
                                                                                                                 -9)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (lift-if
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (ground)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "in?")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "z <=2*pi")
                                                                          (("1"
                                                                            (case
                                                                             "NOT to2pi(z) = z+2*pi")
                                                                            (("1"
                                                                              (expand
                                                                               "to2pi"
                                                                               1)
                                                                              (("1"
                                                                                (case
                                                                                 "NOT floor(z/(2*pi)) = -1")
                                                                                (("1"
                                                                                  (case
                                                                                   "-1<=z/(2*pi) AND z/(2*pi)<0")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "in?"
                                                                                     -2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (cross-mult
                                                                                               1)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (cross-mult
                                                                                               1)
                                                                                              (("2"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (postpone)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (postpone)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil)
                           ("3" (postpone) nil nil)
                           ("4" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (band_mod_2pi subtype
    "real_bands.append_realband_spec(real_bands.add(number_fields.*((number_fields.-)(2), pi_def.pi), mod_bands.bands_above(number_fields.*(2, pi_def.pi), mod_bands.RL)), mod_bands.bands_below(number_fields.*(2, pi_def.pi), mod_bands.RL))"
    "(mod_bands.track_band?(mod_bands.RL))")))
 (band_mod_2pi_TCC5 0
  (band_mod_2pi_TCC5-2 "" 3813484659
   ("" (skeep)
    ((""
      (name "G" "append_realband_spec(bands_above(0, RL),
                                                     add(2 * pi, bands_below(0, RL)))")
      (("" (replace -1)
        (("" (hide 2)
          (("" (assert)
            (("" (hide 2)
              (("" (lemma "append_realband_spec_def")
                (("" (lemma "append_realband_spec_nth")
                  (("" (lemma "append_realband_spec_length")
                    (("" (inst?)
                      (("" (inst?)
                        (("" (inst?)
                          (("" (replace -4)
                            ((""
                              (case "strictly_increasing_real?(bands_above(0, RL)) AND
                     strictly_increasing_real?(add(2 * pi, bands_below(0, RL))) AND
                      (length(bands_above(0, RL)) > 0 AND
                        length(add(2 * pi, bands_below(0, RL))) > 0
                        IMPLIES
                        nth(bands_above(0, RL), length(bands_above(0, RL)) - 1)`ub <=
                         nth(add(2 * pi, bands_below(0, RL)), 0)`lb)")
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "RL")
                                          (("1"
                                            (expand "band_to_mod?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "track_band?"
                                                   +)
                                                  (("1"
                                                    (split +)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst -8 "j")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lift-if
                                                             -8)
                                                            (("1"
                                                              (split
                                                               -8)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (typepred
                                                                               "bands_above(0,RL)")
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "strictly_increasing_real?"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "0"
                                                                                           "j")
                                                                                          (("1"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "bands_above(0,RL)")
                                                                                (("2"
                                                                                  (split
                                                                                   -)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "strictly_increasing_real?"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -4
                                                                                           "0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "bands_above(0,RL)")
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "strictly_increasing_real?"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "length(bands_above(0, RL)) - 1")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "j"
                                                                                                                     "length(bands_above(0, RL)) - 1")
                                                                                                                    (("1"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "bands_above(0,RL)")
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     -)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "length(bands_above(0, RL)) - 1 - j")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -1
                                                                                                                 +)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "NOT strictly_increasing_real?(RL)")
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "strictly_increasing_real?"
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "length(RL) - length(bands_above(0, RL)) + j"
                                                                                                                         "length(RL)-1")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "length(RL)-1")
                                                                                                                          (("2"
                                                                                                                            (ground)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "length(bands_above(0, RL)) -1 - j")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split
                                                                         -)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replaces
                                                                               -2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   +)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "bands_above(0,RL)")
                                                                                    (("1"
                                                                                      (split
                                                                                       -)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -5
                                                                                           "length(RL) - length(bands_above(0, RL))")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "bands_above_range")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "length(bands_above(0, RL)) -1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "add"
                                                                                     1)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "map_nth_rw")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "addrb"
                                                                                         1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "bands_below(0,RL)")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "strictly_increasing_real?"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "length(bands_below(0,RL))-1")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "0"
                                                                                                         "length(bands_below(0,RL))-1")
                                                                                                        (("2"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (replaces
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "add"
                                                                                 3)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "map_nth_rw")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "addrb"
                                                                                     3)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "bands_below(0,RL)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 " 1 - length(bands_above(0, RL)) + j")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -10
                                                                                                           "1 - length(bands_above(0, RL)) + j")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (typepred
                                                                                           "bands_below(0,RL)")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "1 - length(bands_above(0, RL)) + j")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     -)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (lift-if
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (inst?)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split
                                                                   +)
                                                                  (("1"
                                                                    (typepred
                                                                     "bands_above(0,RL)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "0")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -7)
                                                                            (("1"
                                                                              (case
                                                                               "NOT G = add(2 * pi, bands_below(0, RL))")
                                                                              (("1"
                                                                                (case
                                                                                 "bands_above(0,RL) = null")
                                                                                (("1"
                                                                                  (expand
                                                                                   "G"
                                                                                   1)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "append_realband_spec")
                                                                                      (("1"
                                                                                        (lift-if
                                                                                         1)
                                                                                        (("1"
                                                                                          (split
                                                                                           +)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "append"
                                                                                               2)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "length(bands_above(0,RL)) = 0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "bands_above(0,RL)")
                                                                                      (("1"
                                                                                        (split
                                                                                         -)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             (1
                                                                                              4))
                                                                                            (("1"
                                                                                              (grind
                                                                                               :exclude
                                                                                               "bands_above")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "add"
                                                                                     3)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "map_nth_rw")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "addrb"
                                                                                         +)
                                                                                        (("2"
                                                                                          (split
                                                                                           +)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "bands_below(0,RL)")
                                                                                            (("1"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "j")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -8
                                                                                                               "j")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "j")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "bands_below(0,RL)")
                                                                                            (("2"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "j")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -2
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (lift-if
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "j")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "add"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "map_length")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replaces
                                                                             -1
                                                                             +)
                                                                            (("2"
                                                                              (typepred
                                                                               "bands_above(0,RL)")
                                                                              (("2"
                                                                                (split
                                                                                 -)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (case
                                                                                     "nth(RL,0)`lb<0")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "bands_below(0,RL)")
                                                                                      (("1"
                                                                                        (split
                                                                                         -)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (split
                                                                                       +)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "length(bands_above(0,RL))-1-j")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -2
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (lift-if
                                                                                                   +)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               -
                                                                                               "length(bands_above(0,RL))-1-j")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (inst
                                                                                         -
                                                                                         "length(bands_above(0,RL))-1-j")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             -)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "NOT strictly_increasing_real?(RL)")
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "strictly_increasing_real?"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "length(RL)-1")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "length(RL) - length(bands_above(0, RL)) + j"
                                                                                                             "length(RL)-1")
                                                                                                            (("2"
                                                                                                              (ground)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               -
                                                                                               "length(bands_above(0,RL))-1-j")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replaces
                                                                           -2)
                                                                          (("1"
                                                                            (split
                                                                             +)
                                                                            (("1"
                                                                              (typepred
                                                                               "bands_above(0,RL)")
                                                                              (("1"
                                                                                (split
                                                                                 -)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "strictly_increasing_real?"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "0")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "0"
                                                                                             "j")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "bands_above(0,RL)")
                                                                              (("2"
                                                                                (split
                                                                                 -)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "length(bands_above(0,RL))-1-j")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 (-1
                                                                                                  -2))
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "NOT strictly_increasing_real?(RL)")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "strictly_increasing_real?"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "length(RL)-1")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "length(RL) - length(bands_above(0, RL)) + j"
                                                                                                           "length(RL)-1")
                                                                                                          (("2"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             -
                                                                                             "length(bands_above(0, RL)) - j -1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "add"
                                                                             3)
                                                                            (("2"
                                                                              (rewrite
                                                                               "map_nth_rw")
                                                                              (("2"
                                                                                (expand
                                                                                 "addrb"
                                                                                 3)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "bands_below(0,RL)")
                                                                                  (("2"
                                                                                    (split
                                                                                     -)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "j - length(bands_above(0, RL))")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -7
                                                                                                       "j - length(bands_above(0, RL))")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "j - length(bands_above(0, RL))")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "strictly_increasing_real?"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "length(bands_below(0, RL))-1")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "j-length(bands_above(0, RL))"
                                                                                                   "length(bands_below(0, RL))-1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (skeep -)
                                                        (("2"
                                                          (inst
                                                           -11
                                                           "to2pi(z)")
                                                          (("2"
                                                            (flatten
                                                             -11)
                                                            (("2"
                                                              (hide
                                                               -11)
                                                              (("2"
                                                                (split
                                                                 -11)
                                                                (("1"
                                                                  (skosimp
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "j!1")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (case
                                                                       "z<0")
                                                                      (("1"
                                                                        (case
                                                                         "to2pi(z) = z+2*pi")
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             2
                                                                             "j")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (typepred
                                                                                 "add(2 * pi, bands_below(0, RL))")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (splash
                                                                                       2)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "bands_below(0,RL)")
                                                                                        (("1"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "in?"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "add"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "map_nth_rw"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "addrb"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "in?")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "in?")
                                                                                                                      (("2"
                                                                                                                        (replaces
                                                                                                                         -2
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (lift-if)
                                                                                                                          (("2"
                                                                                                                            (ground)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "j")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "bands_below(0,RL)")
                                                                                        (("2"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "in?")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "z>=-pi")
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-1
                                                                              -2
                                                                              1))
                                                                            (("1"
                                                                              (expand
                                                                               "to2pi")
                                                                              (("1"
                                                                                (case
                                                                                 "-1<z/(2*pi) AND z/(2*pi)<0")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "in?"
                                                                             -2)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 -11)
                                                                                (("2"
                                                                                  (hide
                                                                                   -10)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -9)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "j")
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "to2pi(z) = z")
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             3)
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "length(bands_above(0,RL))-length(RL)+j")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   (-8
                                                                                    -9))
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "bands_above(0,RL)")
                                                                                    (("1"
                                                                                      (split
                                                                                       -)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "length(RL)-1-j")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "in?")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -3
                                                                                                         +)
                                                                                                        (("1"
                                                                                                          (lift-if
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "in?")
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "bands_above(0,RL)")
                                                                                  (("2"
                                                                                    (split
                                                                                     -)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "length(RL)-1-j")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "in?")
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "z<2*pi")
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-1
                                                                              1
                                                                              2))
                                                                            (("1"
                                                                              (case
                                                                               "0<=z/(2*pi) AND z/(2*pi)<1")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "to2pi")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (cross-mult
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (cross-mult
                                                                                   1)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "in?"
                                                                             -1)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "strictly_increasing_real?"
                                                                                 -3)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "length(RL)-1")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "j"
                                                                                       "length(RL)-1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (inst -12 "z")
                                                        (("3"
                                                          (flatten -12)
                                                          (("3"
                                                            (hide -13)
                                                            (("3"
                                                              (split
                                                               -12)
                                                              (("1"
                                                                (skeep
                                                                 -)
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "length(RL)-length(bands_above(0,RL))+j"
                                                                   "z")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         "in?"
                                                                         (-2
                                                                          1))
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (typepred
                                                                               "bands_above(0,RL)")
                                                                              (("1"
                                                                                (split
                                                                                 -)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "length(bands_above(0,RL))-1-j")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         -)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lift-if
                                                                                                   -6)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -6)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "length(bands_above(0,RL))-1-j")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "z>=0")
                                                                        (("1"
                                                                          (case
                                                                           "0<=z/(2*pi) AND z/(2*pi)<1")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (expand
                                                                               "to2pi"
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (cross-mult
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (cross-mult
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "in?"
                                                                             -2)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "bands_above(0,RL)")
                                                                                  (("2"
                                                                                    (split
                                                                                     -)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "strictly_increasing_real?"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "0")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "0"
                                                                                                 "j")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "bands_above(0,RL)")
                                                                      (("2"
                                                                        (split
                                                                         -)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "length(bands_above(0,RL))-1-j")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skeep
                                                                 -)
                                                                (("2"
                                                                  (expand
                                                                   "in?"
                                                                   -2)
                                                                  (("2"
                                                                    (expand
                                                                     "add"
                                                                     -2)
                                                                    (("2"
                                                                      (rewrite
                                                                       "map_nth_rw")
                                                                      (("2"
                                                                        (expand
                                                                         "addrb"
                                                                         -2)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "j"
                                                                             "z-2*pi")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "in?"
                                                                                   1)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "bands_below(0,RL)")
                                                                                    (("1"
                                                                                      (split
                                                                                       -)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "j")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "j")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "z>=0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "to2pi"
                                                                                       1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "floor_plus_int")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "-1"
                                                                                           "z/(2*pi)")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "0<=z/(2*pi) AND z/(2*pi)<1")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (split
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (cross-mult
                                                                                                     1)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (cross-mult
                                                                                                     1)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "nth(bands_below(0,RL),j)`lb>=-pi")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "bands_below(0,RL)")
                                                                                        (("2"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -13
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "bands_below(0,RL)")
                                                                                (("2"
                                                                                  (split
                                                                                   -)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "j")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skeep
                                                                 -)
                                                                (("3"
                                                                  (inst
                                                                   +
                                                                   "j")
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -)
                                (("2"
                                  (typepred "RL")
                                  (("2"
                                    (expand "band_to_mod?")
                                    (("2"
                                      (hide 4)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (split)
                                          (("1"
                                            (typepred
                                             "bands_above(0,RL)")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "strictly_increasing_add_real")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred
                                                   "bands_below(0,RL)")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (flatten)
                                            (("3"
                                              (typepred
                                               "bands_above(0,RL)")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (inst - "0")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (split -)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "add"
                                                               1)
                                                              (("1"
                                                                (rewrite
                                                                 "map_nth_rw")
                                                                (("1"
                                                                  (expand
                                                                   "addrb"
                                                                   1)
                                                                  (("1"
                                                                    (typepred
                                                                     "bands_below(0,RL)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "0")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "bands_above(0,RL)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "0")
                                                                (("2"
                                                                  (inst
                                                                   -2
                                                                   "0")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide -)
                                (("3"
                                  (flatten)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil)
                               ("4"
                                (hide -)
                                (("4"
                                  (flatten)
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (band_mod_2pi subtype
    "real_bands.append_realband_spec(mod_bands.bands_above(0, mod_bands.RL), real_bands.add(number_fields.*(2, pi_def.pi), mod_bands.bands_below(0, mod_bands.RL)))"
    "(mod_bands.track_band?(mod_bands.RL))"))
  (band_mod_2pi_TCC5-1 nil 3639136435
   ("" (skeep)
    ((""
      (name "G" "append_realband_spec(bands_above(0, RL),
                                                     add(2 * pi, bands_below(0, RL)))")
      (("" (replace -1)
        (("" (hide 2)
          (("" (assert)
            (("" (hide 2)
              (("" (lemma "append_realband_spec_def")
                (("" (lemma "append_realband_spec_nth")
                  (("" (lemma "append_realband_spec_length")
                    (("" (inst?)
                      (("" (inst?)
                        (("" (inst?)
                          (("" (replace -4)
                            ((""
                              (case "strictly_increasing_real?(bands_above(0, RL)) AND
                     strictly_increasing_real?(add(2 * pi, bands_below(0, RL))) AND
                      (length(bands_above(0, RL)) > 0 AND
                        length(add(2 * pi, bands_below(0, RL))) > 0
                        IMPLIES
                        nth(bands_above(0, RL), length(bands_above(0, RL)) - 1)`ub <=
                         nth(add(2 * pi, bands_below(0, RL)), 0)`lb)")
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "RL")
                                          (("1"
                                            (expand "band_to_mod?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "track_band?"
                                                   +)
                                                  (("1"
                                                    (split +)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst -8 "j")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lift-if
                                                             -8)
                                                            (("1"
                                                              (split
                                                               -8)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (typepred
                                                                               "bands_above(0,RL)")
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "strictly_increasing_real?"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "0"
                                                                                           "j")
                                                                                          (("1"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "bands_above(0,RL)")
                                                                                (("2"
                                                                                  (split
                                                                                   -)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "strictly_increasing_real?"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -4
                                                                                           "0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "bands_above(0,RL)")
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "strictly_increasing_real?"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "length(bands_above(0, RL)) - 1")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "j"
                                                                                                                     "length(bands_above(0, RL)) - 1")
                                                                                                                    (("1"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "bands_above(0,RL)")
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     -)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "length(bands_above(0, RL)) - 1 - j")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -1
                                                                                                                 +)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "NOT strictly_increasing_real?(RL)")
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "strictly_increasing_real?"
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "length(RL) - length(bands_above(0, RL)) + j"
                                                                                                                         "length(RL)-1")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "length(RL)-1")
                                                                                                                          (("2"
                                                                                                                            (ground)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "length(bands_above(0, RL)) -1 - j")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split
                                                                         -)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replaces
                                                                               -2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   +)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "bands_above(0,RL)")
                                                                                    (("1"
                                                                                      (split
                                                                                       -)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -5
                                                                                           "length(RL) - length(bands_above(0, RL))")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "bands_above_range")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "length(bands_above(0, RL)) -1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "add"
                                                                                     1)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "map_nth_rw")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "addrb"
                                                                                         1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "bands_below(0,RL)")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "strictly_increasing_real?"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "length(bands_below(0,RL))-1")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "0"
                                                                                                         "length(bands_below(0,RL))-1")
                                                                                                        (("2"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (replaces
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "add"
                                                                                 3)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "map_nth_rw")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "addrb"
                                                                                     3)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "bands_below(0,RL)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 " 1 - length(bands_above(0, RL)) + j")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -10
                                                                                                           "1 - length(bands_above(0, RL)) + j")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (typepred
                                                                                           "bands_below(0,RL)")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "1 - length(bands_above(0, RL)) + j")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     -)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (lift-if
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (inst?)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split
                                                                   +)
                                                                  (("1"
                                                                    (typepred
                                                                     "bands_above(0,RL)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "0")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -7)
                                                                            (("1"
                                                                              (case
                                                                               "NOT G = add(2 * pi, bands_below(0, RL))")
                                                                              (("1"
                                                                                (case
                                                                                 "bands_above(0,RL) = null")
                                                                                (("1"
                                                                                  (expand
                                                                                   "G"
                                                                                   1)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "append_realband_spec")
                                                                                      (("1"
                                                                                        (lift-if
                                                                                         1)
                                                                                        (("1"
                                                                                          (split
                                                                                           +)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "append"
                                                                                               2)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "length(bands_above(0,RL)) = 0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "bands_above(0,RL)")
                                                                                      (("1"
                                                                                        (split
                                                                                         -)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             (1
                                                                                              4))
                                                                                            (("1"
                                                                                              (grind
                                                                                               :exclude
                                                                                               "bands_above")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "add"
                                                                                     3)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "map_nth_rw")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "addrb"
                                                                                         +)
                                                                                        (("2"
                                                                                          (split
                                                                                           +)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "bands_below(0,RL)")
                                                                                            (("1"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "j")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -8
                                                                                                               "j")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "j")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "bands_below(0,RL)")
                                                                                            (("2"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "j")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -2
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (lift-if
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "j")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "add"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "map_length")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replaces
                                                                             -1
                                                                             +)
                                                                            (("2"
                                                                              (typepred
                                                                               "bands_above(0,RL)")
                                                                              (("2"
                                                                                (split
                                                                                 -)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (case
                                                                                     "nth(RL,0)`lb<0")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "bands_below(0,RL)")
                                                                                      (("1"
                                                                                        (split
                                                                                         -)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (split
                                                                                       +)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "length(bands_above(0,RL))-1-j")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -2
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (lift-if
                                                                                                   +)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               -
                                                                                               "length(bands_above(0,RL))-1-j")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (inst
                                                                                         -
                                                                                         "length(bands_above(0,RL))-1-j")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             -)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "NOT strictly_increasing_real?(RL)")
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "strictly_increasing_real?"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "length(RL)-1")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "length(RL) - length(bands_above(0, RL)) + j"
                                                                                                             "length(RL)-1")
                                                                                                            (("2"
                                                                                                              (ground)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               -
                                                                                               "length(bands_above(0,RL))-1-j")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replaces
                                                                           -2)
                                                                          (("1"
                                                                            (split
                                                                             +)
                                                                            (("1"
                                                                              (typepred
                                                                               "bands_above(0,RL)")
                                                                              (("1"
                                                                                (split
                                                                                 -)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "strictly_increasing_real?"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "0")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "0"
                                                                                             "j")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "bands_above(0,RL)")
                                                                              (("2"
                                                                                (split
                                                                                 -)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "length(bands_above(0,RL))-1-j")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 (-1
                                                                                                  -2))
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "NOT strictly_increasing_real?(RL)")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "strictly_increasing_real?"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "length(RL)-1")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "length(RL) - length(bands_above(0, RL)) + j"
                                                                                                           "length(RL)-1")
                                                                                                          (("2"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             -
                                                                                             "length(bands_above(0, RL)) - j -1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "add"
                                                                             3)
                                                                            (("2"
                                                                              (rewrite
                                                                               "map_nth_rw")
                                                                              (("2"
                                                                                (expand
                                                                                 "addrb"
                                                                                 3)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "bands_below(0,RL)")
                                                                                  (("2"
                                                                                    (split
                                                                                     -)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "j - length(bands_above(0, RL))")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -7
                                                                                                       "j - length(bands_above(0, RL))")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "j - length(bands_above(0, RL))")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "strictly_increasing_real?"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "length(bands_below(0, RL))-1")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "j-length(bands_above(0, RL))"
                                                                                                   "length(bands_below(0, RL))-1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (skeep -)
                                                        (("2"
                                                          (inst
                                                           -11
                                                           "to2pi(z)")
                                                          (("2"
                                                            (flatten
                                                             -11)
                                                            (("2"
                                                              (hide
                                                               -11)
                                                              (("2"
                                                                (split
                                                                 -11)
                                                                (("1"
                                                                  (skosimp
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "j!1")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (case
                                                                       "z<0")
                                                                      (("1"
                                                                        (case
                                                                         "to2pi(z) = z+2*pi")
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             2
                                                                             "j")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (typepred
                                                                                 "add(2 * pi, bands_below(0, RL))")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (splash
                                                                                       2)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "bands_below(0,RL)")
                                                                                        (("1"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "in?"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "add"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "map_nth_rw"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "addrb"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "in?")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "in?")
                                                                                                                      (("2"
                                                                                                                        (replaces
                                                                                                                         -2
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (lift-if)
                                                                                                                          (("2"
                                                                                                                            (ground)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "j")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "bands_below(0,RL)")
                                                                                        (("2"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "in?")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "z>=-pi")
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-1
                                                                              -2
                                                                              1))
                                                                            (("1"
                                                                              (expand
                                                                               "to2pi")
                                                                              (("1"
                                                                                (case
                                                                                 "-1<z/(2*pi) AND z/(2*pi)<0")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "in?"
                                                                             -2)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 -11)
                                                                                (("2"
                                                                                  (hide
                                                                                   -10)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -9)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "j")
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "to2pi(z) = z")
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             3)
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "length(bands_above(0,RL))-length(RL)+j")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   (-8
                                                                                    -9))
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "bands_above(0,RL)")
                                                                                    (("1"
                                                                                      (split
                                                                                       -)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "length(RL)-1-j")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "in?")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -3
                                                                                                         +)
                                                                                                        (("1"
                                                                                                          (lift-if
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "in?")
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "bands_above(0,RL)")
                                                                                  (("2"
                                                                                    (split
                                                                                     -)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "length(RL)-1-j")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "in?")
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "z<2*pi")
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-1
                                                                              1
                                                                              2))
                                                                            (("1"
                                                                              (case
                                                                               "0<=z/(2*pi) AND z/(2*pi)<1")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "to2pi")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (cross-mult
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (cross-mult
                                                                                   1)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "in?"
                                                                             -1)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "strictly_increasing_real?"
                                                                                 -3)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "length(RL)-1")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "j"
                                                                                       "length(RL)-1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (inst -12 "z")
                                                        (("3"
                                                          (flatten -12)
                                                          (("3"
                                                            (hide -13)
                                                            (("3"
                                                              (split
                                                               -12)
                                                              (("1"
                                                                (skeep
                                                                 -)
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "length(RL)-length(bands_above(0,RL))+j"
                                                                   "z")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         "in?"
                                                                         (-2
                                                                          1))
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (typepred
                                                                               "bands_above(0,RL)")
                                                                              (("1"
                                                                                (split
                                                                                 -)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "length(bands_above(0,RL))-1-j")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         -)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lift-if
                                                                                                   -6)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -6)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "length(bands_above(0,RL))-1-j")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "z>=0")
                                                                        (("1"
                                                                          (case
                                                                           "0<=z/(2*pi) AND z/(2*pi)<1")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (expand
                                                                               "to2pi"
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (cross-mult
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (cross-mult
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "in?"
                                                                             -2)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "bands_above(0,RL)")
                                                                                  (("2"
                                                                                    (split
                                                                                     -)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "strictly_increasing_real?"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "0")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "0"
                                                                                                 "j")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "bands_above(0,RL)")
                                                                        (("2"
                                                                          (split
                                                                           -)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "length(bands_above(0,RL))-1-j")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skeep
                                                                 -)
                                                                (("2"
                                                                  (expand
                                                                   "in?"
                                                                   -2)
                                                                  (("2"
                                                                    (expand
                                                                     "add"
                                                                     -2)
                                                                    (("2"
                                                                      (rewrite
                                                                       "map_nth_rw")
                                                                      (("2"
                                                                        (expand
                                                                         "addrb"
                                                                         -2)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "j"
                                                                             "z-2*pi")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "in?"
                                                                                   1)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "bands_below(0,RL)")
                                                                                    (("1"
                                                                                      (split
                                                                                       -)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "j")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "j")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "z>=0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "to2pi"
                                                                                       1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "floor_plus_int")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "-1"
                                                                                           "z/(2*pi)")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "0<=z/(2*pi) AND z/(2*pi)<1")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (split
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (cross-mult
                                                                                                     1)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (cross-mult
                                                                                                     1)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "nth(bands_below(0,RL),j)`lb>=-pi")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "bands_below(0,RL)")
                                                                                        (("2"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -13
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "bands_below(0,RL)")
                                                                                (("2"
                                                                                  (split
                                                                                   -)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "j")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skeep
                                                                 -)
                                                                (("3"
                                                                  (inst
                                                                   +
                                                                   "j")
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -)
                                (("2"
                                  (typepred "RL")
                                  (("2"
                                    (expand "band_to_mod?")
                                    (("2"
                                      (hide 4)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (split)
                                          (("1"
                                            (typepred
                                             "bands_above(0,RL)")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "strictly_increasing_add_real")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred
                                                   "bands_below(0,RL)")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (flatten)
                                            (("3"
                                              (typepred
                                               "bands_above(0,RL)")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (inst - "0")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (split -)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "add"
                                                               1)
                                                              (("1"
                                                                (rewrite
                                                                 "map_nth_rw")
                                                                (("1"
                                                                  (expand
                                                                   "addrb"
                                                                   1)
                                                                  (("1"
                                                                    (typepred
                                                                     "bands_below(0,RL)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "0")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "bands_above(0,RL)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "0")
                                                                (("2"
                                                                  (inst
                                                                   -2
                                                                   "0")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide -)
                                (("3"
                                  (flatten)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil)
                               ("4"
                                (hide -)
                                (("4"
                                  (flatten)
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strictly_increasing_add_real formula-decl nil real_bands nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (j skolem-const-decl "nat" mod_bands nil)
    (j skolem-const-decl "nat" mod_bands nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (j skolem-const-decl "below(length(RL))" mod_bands nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (in? const-decl "bool" real_bands nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnreal type-eq-decl nil real_types nil)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (map_length formula-decl nil more_map_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (G skolem-const-decl "list[RealBand]" mod_bands nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (addrb const-decl "RealBand" real_bands nil)
    (bands_above_range formula-decl nil mod_bands nil)
    (RL skolem-const-decl "(band_to_mod?)" mod_bands nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (track_band? const-decl "bool" mod_bands nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (append_realband_spec_length formula-decl nil real_bands nil)
    (append_realband_spec_nth formula-decl nil real_bands nil)
    (append_realband_spec_def formula-decl nil real_bands nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append_realband_spec const-decl "list[RealBand]" real_bands nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (> const-decl "bool" reals nil)
    (bands_above def-decl "{TB |
   strictly_increasing_real?(RL) IMPLIES
    (strictly_increasing_real?(TB) AND
      length(TB) <= length(RL) AND
       (FORALL (j: nat):
          j < length(RL) AND nth(RL, length(RL) - 1 - j)`ub >= x IMPLIES
           (j < length(TB) AND
             nth(TB, length(TB) - 1 - j)`ub =
              nth(RL, length(RL) - 1 - j)`ub
              AND
              nth(TB, length(TB) - 1 - j)`lb =
               (IF nth(RL, length(RL) - 1 - j)`lb >= x
                  THEN nth(RL, length(RL) - 1 - j)`lb
                ELSE x
                ENDIF)))
        AND
        (length(TB) > 0 IMPLIES nth(TB, 0)`lb >= x) AND
         (FORALL (j: nat):
            j < length(RL) AND nth(RL, length(RL) - 1 - j)`ub < x IMPLIES
             j >= length(TB)))}" mod_bands nil)
    (band_to_mod? const-decl "bool" mod_bands nil)
    (listn type-eq-decl nil listn structures)
    (add const-decl "listn[RealBand](length[RealBand](RL))" real_bands
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (bands_below def-decl "{TB |
   strictly_increasing_real?(RL) IMPLIES
    (strictly_increasing_real?(TB) AND
      length(TB) <= length(RL) AND
       (FORALL (j: nat):
          j < length(RL) AND nth(RL, j)`lb <= x IMPLIES
           (j < length(TB) AND
             nth(TB, j)`lb = nth(RL, j)`lb AND
              nth(TB, j)`ub =
               (IF nth(RL, j)`ub <= x THEN nth(RL, j)`ub ELSE x ENDIF)))
        AND
        (length(TB) > 0 IMPLIES nth(TB, length(TB) - 1)`ub <= x) AND
         (FORALL (j: nat):
            j < length(RL) AND nth(RL, j)`lb > x IMPLIES j >= length(TB)))}"
     mod_bands nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (band_mod_2pi subtype
    "real_bands.append_realband_spec(mod_bands.bands_above(0, mod_bands.RL), real_bands.add(number_fields.*(2, pi_def.pi), mod_bands.bands_below(0, mod_bands.RL)))"
    "(mod_bands.track_band?(mod_bands.RL))")))
 (band_mod_2pi_lb_TCC1 0
  (band_mod_2pi_lb_TCC1-1 nil 3639839104 ("" (subtype-tcc) nil nil)
   ((in? const-decl "bool" real_bands nil)
    (to2pi const-decl "nnreal_lt_2pi" to2pi trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (track_band? const-decl "bool" mod_bands nil)
    (list type-decl nil list_adt nil)
    (RealBand type-eq-decl nil real_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (band_to_mod? const-decl "bool" mod_bands nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil (band_mod_2pi_lb subtype "0" "below[length[RealBand](bm)]")))
 (band_mod_2pi_lb 0
  (band_mod_2pi_lb-1 nil 3639839135
   ("" (skeep)
    (("" (skoletin 1)
      (("" (flatten)
        (("" (case "length(RL) = 0")
          (("1" (expand "band_mod_2pi") (("1" (assert) nil nil)) nil)
           ("2" (typepred "bm")
            (("2" (expand "track_band?")
              (("2" (flatten)
                (("2" (inst -3 "nth(RL,0)`lb")
                  (("1" (assert)
                    (("1" (split -3)
                      (("1" (skosimp*)
                        (("1" (case "nth(bm,j!1)`lb>=nth(bm,0)`lb")
                          (("1" (expand "in?")
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (inst - "0")
                            (("2" (ground)
                              (("2"
                                (expand "strictly_increasing_real?")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (inst - "0")
                                    (("2"
                                      (inst - "0" "j!1")
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst + "0")
                        (("2" (expand "in?" 1)
                          (("2" (assert)
                            (("2" (case "NOT band_to_mod?(RL)")
                              (("1" (propax) nil nil)
                               ("2"
                                (expand "band_to_mod?" -1)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand
                                     "strictly_increasing_real?")
                                    (("2"
                                      (flatten)
                                      (("2" (inst - "0") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strictly_increasing_real? const-decl "bool" real_bands nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (RL skolem-const-decl "list[RealBand]" mod_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (band_mod_2pi const-decl "(track_band?(RL))" mod_bands nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (track_band? const-decl "bool" mod_bands nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (band_to_mod? const-decl "bool" mod_bands nil))
   shostak)))

