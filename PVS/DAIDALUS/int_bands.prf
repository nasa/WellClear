(int_bands
 (first_los_aircraft_TCC1 0
  (first_los_aircraft_TCC1-1 nil 3630774215 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (first_los_aircraft subtype "int_bands.j"
    "below[length[Aircraft](AL)]")))
 (first_los_aircraft_TCC2 0
  (first_los_aircraft_TCC2-1 nil 3630774215 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (first_los_aircraft subtype "int_bands.q"
    "below[length[Aircraft](AL)]")))
 (first_los_aircraft_TCC3 0
  (first_los_aircraft_TCC3-1 nil 3630774215 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (first_los_aircraft subtype "int_bands.q"
    "below[length[Aircraft](AL)]")))
 (first_los_aircraft_TCC4 0
  (first_los_aircraft_TCC4-1 nil 3630774215 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (first_los_aircraft subtype
    "real_defs.max((number_fields.+)((number_fields.-)(list_props[Aircraft].length(int_bands.AL), int_bands.i), 2), 0)"
    "naturalnumber")))
 (first_los_aircraft_TCC5 0
  (first_los_aircraft_TCC5-1 nil 3630774215 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (first_los_aircraft subtype "(number_fields.-)(1)"
    "{j: integers.int | booleans.AND((booleans.IFF(reals.>=(j, 0), (booleans.AND(reals.<=(int_bands.i, j), booleans.AND(reals.<(j, list_props[Aircraft].length(int_bands.AL)), booleans.AND(int_bands.LOS(int_bands.traj(number_fields.*(int_bands.k, int_bands.ts))`1, int_bands.traj(number_fields.*(int_bands.k, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, j)`s, vectors_3D.*((number_fields.*(int_bands.k, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, j)`v)), list_props[Aircraft].nth(int_bands.AL, j)`v), FORALL (q: integers.int): booleans.IMPLIES(booleans.AND(reals.>=(q, int_bands.i), reals.<(q, j)), (booleans.NOT)(int_bands.LOS(int_bands.traj(number_fields.*(int_bands.k, int_bands.ts))`1, int_bands.traj(number_fields.*(int_bands.k, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, q)`s, vectors_3D.*((number_fields.*(int_bands.k, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, q)`v)), list_props[Aircraft].nth(int_bands.AL, q)`v))))))))), (booleans.IFF(reals.<(j, 0), (FORALL (q: integers.int): booleans.IMPLIES(booleans.AND(reals.>=(q, int_bands.i), reals.<(q, list_props[Aircraft].length(int_bands.AL))), (booleans.NOT)(int_bands.LOS(int_bands.traj(number_fields.*(int_bands.k, int_bands.ts))`1, int_bands.traj(number_fields.*(int_bands.k, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, q)`s, vectors_3D.*((number_fields.*(int_bands.k, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, q)`v)), list_props[Aircraft].nth(int_bands.AL, q)`v)))))))}")))
 (first_los_aircraft_TCC6 0
  (first_los_aircraft_TCC6-1 nil 3630774215 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (first_los_aircraft subtype "int_bands.i"
    "below[length[Aircraft](AL)]")))
 (first_los_aircraft_TCC7 0
  (first_los_aircraft_TCC7-1 nil 3630774215 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (first_los_aircraft subtype "int_bands.i"
    "{j: integers.int | booleans.AND((booleans.IFF(reals.>=(j, 0), (booleans.AND(reals.<=(int_bands.i, j), booleans.AND(reals.<(j, list_props[Aircraft].length(int_bands.AL)), booleans.AND(int_bands.LOS(int_bands.traj(number_fields.*(int_bands.k, int_bands.ts))`1, int_bands.traj(number_fields.*(int_bands.k, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, j)`s, vectors_3D.*((number_fields.*(int_bands.k, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, j)`v)), list_props[Aircraft].nth(int_bands.AL, j)`v), FORALL (q: integers.int): booleans.IMPLIES(booleans.AND(reals.>=(q, int_bands.i), reals.<(q, j)), (booleans.NOT)(int_bands.LOS(int_bands.traj(number_fields.*(int_bands.k, int_bands.ts))`1, int_bands.traj(number_fields.*(int_bands.k, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, q)`s, vectors_3D.*((number_fields.*(int_bands.k, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, q)`v)), list_props[Aircraft].nth(int_bands.AL, q)`v))))))))), (booleans.IFF(reals.<(j, 0), (FORALL (q: integers.int): booleans.IMPLIES(booleans.AND(reals.>=(q, int_bands.i), reals.<(q, list_props[Aircraft].length(int_bands.AL))), (booleans.NOT)(int_bands.LOS(int_bands.traj(number_fields.*(int_bands.k, int_bands.ts))`1, int_bands.traj(number_fields.*(int_bands.k, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, q)`s, vectors_3D.*((number_fields.*(int_bands.k, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, q)`v)), list_props[Aircraft].nth(int_bands.AL, q)`v)))))))}")))
 (first_los_aircraft_TCC8 0
  (first_los_aircraft_TCC8-1 nil 3630774215
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (first_los_aircraft termination
    "int_bands.first_los_aircraft(int_bands.LOS, int_bands.traj, int_bands.k, int_bands.ts, (number_fields.+)(int_bands.i, 1), int_bands.AL)"
    "nil")))
 (first_los_aircraft_TCC9 0
  (first_los_aircraft_TCC9-1 nil 3630774215
   ("" (skeep)
    (("" (name "G" "v1(LOS, traj, k, ts, i + 1, AL)")
      (("1" (replaces -1)
        (("1" (assert)
          (("1" (split)
            (("1" (flatten)
              (("1" (assert)
                (("1" (typepred "G")
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (skeep 2)
                          (("1" (inst - "q") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (typepred "G") (("2" (assert) nil nil)) nil)) nil)
             ("3" (flatten)
              (("3" (typepred "G")
                (("3" (assert)
                  (("3" (skeep)
                    (("3" (inst - "q") (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (flatten)
              (("4" (typepred "G")
                (("4" (assert)
                  (("4" (flatten)
                    (("4" (assert)
                      (("4" (hide (-5 -6))
                        (("4" (skeep)
                          (("4" (inst - "q")
                            (("4" (inst - "q") (("4" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 4) (("2" (grind :exclude "length") nil nil)) nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (Traj type-eq-decl nil int_bands nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (string type-eq-decl nil strings nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (* const-decl "Vector" vectors_3D vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (first_los_aircraft subtype
    "int_bands.first_los_aircraft(int_bands.LOS, int_bands.traj, int_bands.k, int_bands.ts, (number_fields.+)(int_bands.i, 1), int_bands.AL)"
    "{j: integers.int | booleans.AND((booleans.IFF(reals.>=(j, 0), (booleans.AND(reals.<=(int_bands.i, j), booleans.AND(reals.<(j, list_props[Aircraft].length(int_bands.AL)), booleans.AND(int_bands.LOS(int_bands.traj(number_fields.*(int_bands.k, int_bands.ts))`1, int_bands.traj(number_fields.*(int_bands.k, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, j)`s, vectors_3D.*((number_fields.*(int_bands.k, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, j)`v)), list_props[Aircraft].nth(int_bands.AL, j)`v), FORALL (q: integers.int): booleans.IMPLIES(booleans.AND(reals.>=(q, int_bands.i), reals.<(q, j)), (booleans.NOT)(int_bands.LOS(int_bands.traj(number_fields.*(int_bands.k, int_bands.ts))`1, int_bands.traj(number_fields.*(int_bands.k, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, q)`s, vectors_3D.*((number_fields.*(int_bands.k, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, q)`v)), list_props[Aircraft].nth(int_bands.AL, q)`v))))))))), (booleans.IFF(reals.<(j, 0), (FORALL (q: integers.int): booleans.IMPLIES(booleans.AND(reals.>=(q, int_bands.i), reals.<(q, list_props[Aircraft].length(int_bands.AL))), (booleans.NOT)(int_bands.LOS(int_bands.traj(number_fields.*(int_bands.k, int_bands.ts))`1, int_bands.traj(number_fields.*(int_bands.k, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, q)`s, vectors_3D.*((number_fields.*(int_bands.k, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, q)`v)), list_props[Aircraft].nth(int_bands.AL, q)`v)))))))}")))
 (first_los_step_TCC1 0
  (first_los_step_TCC1-1 nil 3630772320
   ("" (skeep)
    (("" (case "NOT i>=0")
      (("1" (assert) nil nil)
       ("2" (mult-by -1 "ts") (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil))
   nil
   (first_los_step subtype "number_fields.*(int_bands.i, int_bands.ts)"
    "nnreal")))
 (first_los_step_TCC2 0
  (first_los_step_TCC2-1 nil 3630772320
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (first_los_step subtype
    "real_defs.max((number_fields.+)((number_fields.-)(int_bands.MaxN, int_bands.k), 1), 0)"
    "naturalnumber")))
 (first_los_step_TCC3 0
  (first_los_step_TCC3-1 nil 3630772320
   ("" (skeep*)
    (("" (assert) (("" (skeep) (("" (assert) nil nil)) nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (first_los_step subtype "(number_fields.-)(1)"
    "{i: integers.int | booleans.AND((booleans.IFF(reals.>=(i, 0), (booleans.AND(reals.<=(int_bands.k, i), booleans.AND(reals.<=(i, int_bands.MaxN), booleans.AND(EXISTS (p: naturalnumbers.nat): booleans.AND(reals.<(p, list_props[Aircraft].length(int_bands.AL)), int_bands.LOS(int_bands.traj(number_fields.*(i, int_bands.ts))`1, int_bands.traj(number_fields.*(i, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, p)`s, vectors_3D.*((number_fields.*(i, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, p)`v)), list_props[Aircraft].nth(int_bands.AL, p)`v)), FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<(j, i)), FORALL (p: naturalnumbers.nat): booleans.IMPLIES(reals.<(p, list_props[Aircraft].length(int_bands.AL)), (booleans.NOT)(int_bands.LOS(int_bands.traj(number_fields.*(j, int_bands.ts))`1, int_bands.traj(number_fields.*(j, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, p)`s, vectors_3D.*((number_fields.*(j, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, p)`v)), list_props[Aircraft].nth(int_bands.AL, p)`v)))))))))), (booleans.IFF(reals.<(i, 0), (FORALL (p, j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(p, list_props[Aircraft].length(int_bands.AL)), booleans.AND(reals.<=(int_bands.k, j), reals.<=(j, int_bands.MaxN))), (booleans.NOT)(int_bands.LOS(int_bands.traj(number_fields.*(j, int_bands.ts))`1, int_bands.traj(number_fields.*(j, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, p)`s, vectors_3D.*((number_fields.*(j, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, p)`v)), list_props[Aircraft].nth(int_bands.AL, p)`v)))))))}")))
 (first_los_step_TCC4 0
  (first_los_step_TCC4-1 nil 3630772320
   ("" (skeep)
    (("" (assert)
      (("" (typepred "first_los_aircraft(LOS,traj, k, ts, 0, AL)")
        (("" (assert)
          (("" (hide (-2 -3))
            (("" (flatten)
              (("" (assert)
                (("" (split 3)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)
                   ("2" (skeep) (("2" (assert) nil nil)) nil)
                   ("3"
                    (inst -
                     "first_los_aircraft(LOS,traj, k, ts, 0, AL)" "k")
                    (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Traj type-eq-decl nil int_bands nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (string type-eq-decl nil strings nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (* const-decl "Vector" vectors_3D vectors)
    (first_los_aircraft def-decl "{j: int |
   (j >= 0 IFF
     (i <= j AND
       j < length(AL) AND
        LOS(traj(k * ts)`1, traj(k * ts)`2,
            nth(AL, j)`s + (k * ts) * nth(AL, j)`v, nth(AL, j)`v)
         AND
         (FORALL (q: int):
            q >= i AND q < j IMPLIES
             NOT LOS(traj(k * ts)`1, traj(k * ts)`2,
                     nth(AL, q)`s + (k * ts) * nth(AL, q)`v,
                     nth(AL, q)`v))))
    AND
    (j < 0 IFF
      (FORALL (q: int):
         q >= i AND q < length(AL) IMPLIES
          NOT LOS(traj(k * ts)`1, traj(k * ts)`2,
                  nth(AL, q)`s + (k * ts) * nth(AL, q)`v, nth(AL, q)`v)))}"
     int_bands nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (first_los_step subtype "int_bands.k"
    "{i: integers.int | booleans.AND((booleans.IFF(reals.>=(i, 0), (booleans.AND(reals.<=(int_bands.k, i), booleans.AND(reals.<=(i, int_bands.MaxN), booleans.AND(EXISTS (p: naturalnumbers.nat): booleans.AND(reals.<(p, list_props[Aircraft].length(int_bands.AL)), int_bands.LOS(int_bands.traj(number_fields.*(i, int_bands.ts))`1, int_bands.traj(number_fields.*(i, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, p)`s, vectors_3D.*((number_fields.*(i, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, p)`v)), list_props[Aircraft].nth(int_bands.AL, p)`v)), FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<(j, i)), FORALL (p: naturalnumbers.nat): booleans.IMPLIES(reals.<(p, list_props[Aircraft].length(int_bands.AL)), (booleans.NOT)(int_bands.LOS(int_bands.traj(number_fields.*(j, int_bands.ts))`1, int_bands.traj(number_fields.*(j, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, p)`s, vectors_3D.*((number_fields.*(j, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, p)`v)), list_props[Aircraft].nth(int_bands.AL, p)`v)))))))))), (booleans.IFF(reals.<(i, 0), (FORALL (p, j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(p, list_props[Aircraft].length(int_bands.AL)), booleans.AND(reals.<=(int_bands.k, j), reals.<=(j, int_bands.MaxN))), (booleans.NOT)(int_bands.LOS(int_bands.traj(number_fields.*(j, int_bands.ts))`1, int_bands.traj(number_fields.*(j, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, p)`s, vectors_3D.*((number_fields.*(j, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, p)`v)), list_props[Aircraft].nth(int_bands.AL, p)`v)))))))}")))
 (first_los_step_TCC5 0
  (first_los_step_TCC5-1 nil 3630772320 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (first_los_step termination
    "int_bands.first_los_step(int_bands.LOS, int_bands.traj, (number_fields.+)(int_bands.k, 1), int_bands.ts, int_bands.MaxN, int_bands.AL)"
    "nil")))
 (first_los_step_TCC6 0
  (first_los_step_TCC6-2 "" 3794669315
   ("" (skeep*)
    (("" (name "G" "v1(LOS, traj, k + 1, ts, MaxN, AL)")
      (("1" (replaces -1)
        (("1" (typepred "G")
          (("1" (assert)
            (("1" (split +)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (split +)
                        (("1" (propax) nil nil)
                         ("2" (hide (-6 -7))
                          (("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (skeep)
                                (("2"
                                  (case "NOT j = k")
                                  (("1"
                                    (inst - "j")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst - "p")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (typepred
                                         "first_los_aircraft(LOS,traj, k, ts, 0, AL)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst - "p")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil)
               ("3" (flatten)
                (("3" (assert)
                  (("3" (hide (-2 -3 -5))
                    (("3" (skeep)
                      (("3" (inst - "p" "j")
                        (("3" (assert)
                          (("3"
                            (typepred
                             "first_los_aircraft(LOS,traj, k, ts, 0, AL)")
                            (("3" (assert)
                              (("3"
                                (inst - "p")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (flatten)
                (("4" (assert)
                  (("4" (flatten)
                    (("4" (skeep)
                      (("4" (inst - "p" "j") (("4" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 4)
        (("2" (grind :exclude "first_los_aircraft") nil nil)) nil))
      nil))
    nil)
   ((first_los_aircraft def-decl "{j: int |
   (j >= 0 IFF
     (i <= j AND
       j < length(AL) AND
        LOS(traj(k * ts)`1, traj(k * ts)`2,
            nth(AL, j)`s + (k * ts) * nth(AL, j)`v, nth(AL, j)`v)
         AND
         (FORALL (q: int):
            q >= i AND q < j IMPLIES
             NOT LOS(traj(k * ts)`1, traj(k * ts)`2,
                     nth(AL, q)`s + (k * ts) * nth(AL, q)`v,
                     nth(AL, q)`v))))
    AND
    (j < 0 IFF
      (FORALL (q: int):
         q >= i AND q < length(AL) IMPLIES
          NOT LOS(traj(k * ts)`1, traj(k * ts)`2,
                  nth(AL, q)`s + (k * ts) * nth(AL, q)`v, nth(AL, q)`v)))}"
     int_bands nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (Traj type-eq-decl nil int_bands nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (string type-eq-decl nil strings nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (* const-decl "Vector" vectors_3D vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (first_los_step subtype
    "int_bands.first_los_step(int_bands.LOS, int_bands.traj, (number_fields.+)(int_bands.k, 1), int_bands.ts, int_bands.MaxN, int_bands.AL)"
    "{i: integers.int | booleans.AND((booleans.IFF(reals.>=(i, 0), (booleans.AND(reals.<=(int_bands.k, i), booleans.AND(reals.<=(i, int_bands.MaxN), booleans.AND(EXISTS (p: naturalnumbers.nat): booleans.AND(reals.<(p, list_props[Aircraft].length(int_bands.AL)), int_bands.LOS(int_bands.traj(number_fields.*(i, int_bands.ts))`1, int_bands.traj(number_fields.*(i, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, p)`s, vectors_3D.*((number_fields.*(i, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, p)`v)), list_props[Aircraft].nth(int_bands.AL, p)`v)), FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<(j, i)), FORALL (p: naturalnumbers.nat): booleans.IMPLIES(reals.<(p, list_props[Aircraft].length(int_bands.AL)), (booleans.NOT)(int_bands.LOS(int_bands.traj(number_fields.*(j, int_bands.ts))`1, int_bands.traj(number_fields.*(j, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, p)`s, vectors_3D.*((number_fields.*(j, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, p)`v)), list_props[Aircraft].nth(int_bands.AL, p)`v)))))))))), (booleans.IFF(reals.<(i, 0), (FORALL (p, j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(p, list_props[Aircraft].length(int_bands.AL)), booleans.AND(reals.<=(int_bands.k, j), reals.<=(j, int_bands.MaxN))), (booleans.NOT)(int_bands.LOS(int_bands.traj(number_fields.*(j, int_bands.ts))`1, int_bands.traj(number_fields.*(j, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, p)`s, vectors_3D.*((number_fields.*(j, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, p)`v)), list_props[Aircraft].nth(int_bands.AL, p)`v)))))))}"))
  (first_los_step_TCC6-1 nil 3630772320
   ("" (skeep*)
    (("" (name "G" "v1(LOS, traj, k + 1, ts, MaxN, AL)")
      (("1" (replaces -1)
        (("1" (typepred "G")
          (("1" (assert)
            (("1" (split +)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (split +)
                        (("1" (propax) nil nil)
                         ("2" (hide (-6 -7))
                          (("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (skeep)
                                (("2"
                                  (case "NOT j = k")
                                  (("1"
                                    (inst - "j")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst - "p")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred
                                           "first_los_aircraft(LOS,traj, k, ts, 0, AL)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst - "p")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil)
               ("3" (flatten)
                (("3" (assert)
                  (("3" (hide (-2 -3 -5))
                    (("3" (skeep)
                      (("3" (inst - "p" "j")
                        (("3" (assert)
                          (("3"
                            (typepred
                             "first_los_aircraft(LOS,traj, k, ts, 0, AL)")
                            (("3" (assert)
                              (("3"
                                (inst - "p")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (flatten)
                (("4" (assert)
                  (("4" (flatten)
                    (("4" (skeep)
                      (("4" (inst - "p" "j") (("4" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 4)
        (("2" (grind :exclude "first_los_aircraft") nil nil)) nil))
      nil))
    nil)
   ((* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors))
   nil
   (first_los_step subtype
    "int_bands.first_los_step(int_bands.LOS, int_bands.traj, (number_fields.+)(int_bands.k, 1), int_bands.ts, int_bands.MaxN, int_bands.AL)"
    "{i: integers.int | booleans.AND((booleans.IFF(reals.>=(i, 0), (booleans.AND(reals.<=(int_bands.k, i), booleans.AND(reals.<=(i, int_bands.MaxN), booleans.AND(EXISTS (p: naturalnumbers.nat): booleans.AND(reals.<(p, list_props[Aircraft].length(int_bands.AL)), int_bands.LOS(int_bands.traj(number_fields.*(i, int_bands.ts))`1, int_bands.traj(number_fields.*(i, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, p)`s, vectors_3D.*((number_fields.*(i, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, p)`v)), list_props[Aircraft].nth(int_bands.AL, p)`v)), FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<(j, i)), FORALL (p: naturalnumbers.nat): booleans.IMPLIES(reals.<(p, list_props[Aircraft].length(int_bands.AL)), (booleans.NOT)(int_bands.LOS(int_bands.traj(number_fields.*(j, int_bands.ts))`1, int_bands.traj(number_fields.*(j, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, p)`s, vectors_3D.*((number_fields.*(j, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, p)`v)), list_props[Aircraft].nth(int_bands.AL, p)`v)))))))))), (booleans.IFF(reals.<(i, 0), (FORALL (p, j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<(p, list_props[Aircraft].length(int_bands.AL)), booleans.AND(reals.<=(int_bands.k, j), reals.<=(j, int_bands.MaxN))), (booleans.NOT)(int_bands.LOS(int_bands.traj(number_fields.*(j, int_bands.ts))`1, int_bands.traj(number_fields.*(j, int_bands.ts))`2, (vectors_3D.+)(list_props[Aircraft].nth(int_bands.AL, p)`s, vectors_3D.*((number_fields.*(j, int_bands.ts)), list_props[Aircraft].nth(int_bands.AL, p)`v)), list_props[Aircraft].nth(int_bands.AL, p)`v)))))))}")))
 (first_los_step_range 0
  (first_los_step_range-1 nil 3637424236
   (""
    (case "FORALL (AL: AircraftList,
              LOS: [[Vect3, Vect3, Vect3, Vect3] -> bool], MaxN, k: nat,
              traj: Traj, ts: posreal,Z:nat): max(MaxN-k+1,0)<=Z IMPLIES 
        first_los_step(LOS, traj, k, ts, MaxN, AL) >= -1 AND
         first_los_step(LOS, traj, k, ts, MaxN, AL) <= MaxN")
    (("1" (skeep)
      (("1" (insteep - :but "Z")
        (("1" (inst - "max(MaxN-k+1,0)")
          (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "Z")
        (("1" (skeep)
          (("1" (assert)
            (("1" (expand "max" -1)
              (("1" (lift-if)
                (("1" (expand "first_los_step")
                  (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem 1 "Z")
          (("2" (flatten)
            (("2" (skeep)
              (("2" (case "NOT max(MaxN - k + 1, 0) =Z+1")
                (("1" (insteep -)
                  (("1" (assert)
                    (("1" (ground)
                      (("1" (hide 1) (("1" (grind) nil nil)) nil)
                       ("2" (hide 1) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (copy -1)
                  (("2" (expand "max" -1)
                    (("2" (lift-if)
                      (("2" (split -)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "first_los_step" +)
                              (("2"
                                (insteep - :but "k")
                                (("2"
                                  (inst - "k+1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (lift-if)
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_nnreal_0 formula-decl nil min_max reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (k skolem-const-decl "nat" int_bands nil)
    (MaxN skolem-const-decl "nat" int_bands nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnreal type-eq-decl nil real_types nil)
    (Traj type-eq-decl nil int_bands nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (* const-decl "Vector" vectors_3D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (first_los_step def-decl "{i: int |
   (i >= 0 IFF
     (k <= i AND
       i <= MaxN AND
        (EXISTS (p: nat):
           p < length(AL) AND
            LOS(traj(i * ts)`1, traj(i * ts)`2,
                nth(AL, p)`s + (i * ts) * nth(AL, p)`v, nth(AL, p)`v))
         AND
         (FORALL (j: nat):
            k <= j AND j < i IMPLIES
             (FORALL (p: nat):
                p < length(AL) IMPLIES
                 NOT LOS(traj(j * ts)`1, traj(j * ts)`2,
                         nth(AL, p)`s + (j * ts) * nth(AL, p)`v,
                         nth(AL, p)`v)))))
    AND
    (i < 0 IFF
      (FORALL (p, j: nat):
         p < length(AL) AND k <= j AND j <= MaxN IMPLIES
          NOT LOS(traj(j * ts)`1, traj(j * ts)`2,
                  nth(AL, p)`s + (j * ts) * nth(AL, p)`v, nth(AL, p)`v)))}"
     int_bands nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   shostak))
 (CD_future_traj_TCC1 0
  (CD_future_traj_TCC1-1 nil 3630832788 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (aircraft_at const-decl "Aircraft" int_bands nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (CD_future_traj subtype
    "(number_fields.-)(int_bands.B, int_bands.tjump)" "nnreal")))
 (CD_future_traj_TCC2 0
  (CD_future_traj_TCC2-1 nil 3630832788 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (aircraft_at const-decl "Aircraft" int_bands nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (CD_future_traj subtype
    "(number_fields.-)(int_bands.T, int_bands.tjump)" "nnreal")))
 (CD_future_traj_TCC3 0
  (CD_future_traj_TCC3-1 nil 3630832788 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (aircraft_at const-decl "Aircraft" int_bands nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (CD_future_traj subtype
    "(number_fields.-)(int_bands.T, int_bands.tjump)" "nnreal")))
 (CD_future_traj_def 0
  (CD_future_traj_def-1 nil 3630833037
   ("" (skeep)
    (("" (ground)
      (("1" (expand "CD_future_traj")
        (("1" (split -)
          (("1" (propax) nil nil)
           ("2" (flatten)
            (("2" (split -)
              (("1" (flatten)
                (("1" (expand "detector?")
                  (("1" (inst? -3)
                    (("1" (assert)
                      (("1" (hide -2)
                        (("1" (skeep)
                          (("1" (inst + "t+tjump")
                            (("1" (assert)
                              (("1"
                                (expand "traj_position")
                                (("1"
                                  (expand "position")
                                  (("1"
                                    (expand "aircraft_at")
                                    (("1"
                                      (hide-all-but (-2 3))
                                      (("1"
                                        (grind :exclude "nth")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil) ("3" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (expand "detector?")
                    (("2" (inst? -2)
                      (("2" (assert)
                        (("2" (hide -1)
                          (("2" (skeep)
                            (("2" (inst + "t+tjump")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "traj_position")
                                  (("2"
                                    (expand "traj_velocity")
                                    (("2"
                                      (lift-if +)
                                      (("2"
                                        (split +)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (case "NOT t = 0")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (replaces -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "aircraft_at")
                                                  (("2"
                                                    (expand "position")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (hide-all-but (-1 2))
                                            (("2"
                                              (grind :exclude "nth")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "CD_future_traj")
        (("2" (split +)
          (("1" (skosimp*) (("1" (ground) nil nil)) nil)
           ("2" (flatten)
            (("2" (split +)
              (("1" (flatten)
                (("1" (expand "detector?")
                  (("1" (inst? -3)
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (inst + "t-tjump")
                          (("1" (assert)
                            (("1" (expand "traj_position")
                              (("1"
                                (expand "traj_velocity")
                                (("1"
                                  (hide-all-but (-5 4))
                                  (("1"
                                    (grind :exclude "nth")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil) ("3" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (expand "detector?")
                    (("2" (inst? -2)
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst + "t-tjump")
                            (("1" (expand "traj_position")
                              (("1"
                                (expand "traj_velocity")
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split -)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case "NOT t = tjump")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (replaces -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide-all-but (-2 5))
                                              (("2"
                                                (grind :exclude "nth")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (hide-all-but (-1 6))
                                        (("2"
                                          (grind :exclude "nth")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((t skolem-const-decl "nnreal" int_bands nil)
    (t skolem-const-decl "nnreal" int_bands nil)
    (add_zero_right formula-decl nil vectors_3D vectors)
    (scal_0 formula-decl nil vectors_3D vectors)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (traj_velocity const-decl "Vect3" int_bands nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (position const-decl "Vect3" int_bands nil)
    (traj_position const-decl "Vect3" int_bands nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (aircraft_at const-decl "Aircraft" int_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (string type-eq-decl nil strings nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (Traj type-eq-decl nil int_bands nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (T skolem-const-decl "nnreal" int_bands nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (B skolem-const-decl "nnreal" int_bands nil)
    (tjump skolem-const-decl "nnreal" int_bands nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (detector? const-decl "bool" int_bands nil)
    (CD_future_traj const-decl "bool" int_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (first_conflict_aircraft_TCC1 0
  (first_conflict_aircraft_TCC1-1 nil 3630838886
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (first_conflict_aircraft subtype "int_bands.q"
    "{i | reals.<(int_bands.i, list_props[Aircraft].length(int_bands.AL))}")))
 (first_conflict_aircraft_TCC2 0
  (first_conflict_aircraft_TCC2-1 nil 3630838886
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (first_conflict_aircraft subtype "int_bands.q"
    "{i | reals.<(int_bands.i, list_props[Aircraft].length(int_bands.AL))}")))
 (first_conflict_aircraft_TCC3 0
  (first_conflict_aircraft_TCC3-1 nil 3630838886
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (first_conflict_aircraft subtype "(number_fields.-)(1)"
    "{j: integers.int | booleans.AND((booleans.IFF(reals.>=(j, 0), (booleans.AND(reals.<=(int_bands.i, j), booleans.AND(reals.<(j, list_props[Aircraft].length(int_bands.AL)), booleans.AND(int_bands.CD_future_traj(int_bands.CD, int_bands.B, int_bands.T, int_bands.traj, number_fields.*(int_bands.k, int_bands.tsn), int_bands.AL, j), FORALL (q: integers.int): booleans.IMPLIES(booleans.AND(reals.>=(q, int_bands.i), reals.<(q, j)), (booleans.NOT)(int_bands.CD_future_traj(int_bands.CD, int_bands.B, int_bands.T, int_bands.traj, number_fields.*(int_bands.k, int_bands.tsn), int_bands.AL, q))))))))), (booleans.IFF(reals.<(j, 0), (FORALL (q: integers.int): booleans.IMPLIES(booleans.AND(reals.>=(q, int_bands.i), reals.<(q, list_props[Aircraft].length(int_bands.AL))), (booleans.NOT)(int_bands.CD_future_traj(int_bands.CD, int_bands.B, int_bands.T, int_bands.traj, number_fields.*(int_bands.k, int_bands.tsn), int_bands.AL, q)))))))}")))
 (first_conflict_aircraft_TCC4 0
  (first_conflict_aircraft_TCC4-1 nil 3630838886
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (first_conflict_aircraft subtype "int_bands.i"
    "{j: integers.int | booleans.AND((booleans.IFF(reals.>=(j, 0), (booleans.AND(reals.<=(int_bands.i, j), booleans.AND(reals.<(j, list_props[Aircraft].length(int_bands.AL)), booleans.AND(int_bands.CD_future_traj(int_bands.CD, int_bands.B, int_bands.T, int_bands.traj, number_fields.*(int_bands.k, int_bands.tsn), int_bands.AL, j), FORALL (q: integers.int): booleans.IMPLIES(booleans.AND(reals.>=(q, int_bands.i), reals.<(q, j)), (booleans.NOT)(int_bands.CD_future_traj(int_bands.CD, int_bands.B, int_bands.T, int_bands.traj, number_fields.*(int_bands.k, int_bands.tsn), int_bands.AL, q))))))))), (booleans.IFF(reals.<(j, 0), (FORALL (q: integers.int): booleans.IMPLIES(booleans.AND(reals.>=(q, int_bands.i), reals.<(q, list_props[Aircraft].length(int_bands.AL))), (booleans.NOT)(int_bands.CD_future_traj(int_bands.CD, int_bands.B, int_bands.T, int_bands.traj, number_fields.*(int_bands.k, int_bands.tsn), int_bands.AL, q)))))))}")))
 (first_conflict_aircraft_TCC5 0
  (first_conflict_aircraft_TCC5-1 nil 3630838886
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (first_conflict_aircraft termination
    "int_bands.first_conflict_aircraft(int_bands.CD, int_bands.B, int_bands.T, int_bands.traj, int_bands.k, int_bands.tsn, (number_fields.+)(int_bands.i, 1), int_bands.AL)"
    "nil")))
 (first_conflict_aircraft_TCC6 0
  (first_conflict_aircraft_TCC6-1 nil 3630838886
   ("" (skeep)
    (("" (name "G" "v(CD,B, T, traj, k, tsn, i + 1, AL)")
      (("1" (replaces -1)
        (("1" (assert)
          (("1" (typepred "G")
            (("1" (assert)
              (("1" (split +)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (inst - "q") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil)
                 ("3" (flatten)
                  (("3" (assert)
                    (("3" (skeep)
                      (("3" (inst - "q") (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (flatten)
                  (("4" (assert)
                    (("4" (flatten)
                      (("4" (assert)
                        (("4" (skeep)
                          (("4" (inst - "q") (("4" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind :exclude "length") nil nil))
      nil))
    nil)
   ((aircraft_at const-decl "Aircraft" int_bands nil)
    (+ const-decl "Vector" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Traj type-eq-decl nil int_bands nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (CD_future_traj const-decl "bool" int_bands nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (first_conflict_aircraft subtype
    "int_bands.first_conflict_aircraft(int_bands.CD, int_bands.B, int_bands.T, int_bands.traj, int_bands.k, int_bands.tsn, (number_fields.+)(int_bands.i, 1), int_bands.AL)"
    "{j: integers.int | booleans.AND((booleans.IFF(reals.>=(j, 0), (booleans.AND(reals.<=(int_bands.i, j), booleans.AND(reals.<(j, list_props[Aircraft].length(int_bands.AL)), booleans.AND(int_bands.CD_future_traj(int_bands.CD, int_bands.B, int_bands.T, int_bands.traj, number_fields.*(int_bands.k, int_bands.tsn), int_bands.AL, j), FORALL (q: integers.int): booleans.IMPLIES(booleans.AND(reals.>=(q, int_bands.i), reals.<(q, j)), (booleans.NOT)(int_bands.CD_future_traj(int_bands.CD, int_bands.B, int_bands.T, int_bands.traj, number_fields.*(int_bands.k, int_bands.tsn), int_bands.AL, q))))))))), (booleans.IFF(reals.<(j, 0), (FORALL (q: integers.int): booleans.IMPLIES(booleans.AND(reals.>=(q, int_bands.i), reals.<(q, list_props[Aircraft].length(int_bands.AL))), (booleans.NOT)(int_bands.CD_future_traj(int_bands.CD, int_bands.B, int_bands.T, int_bands.traj, number_fields.*(int_bands.k, int_bands.tsn), int_bands.AL, q)))))))}")))
 (neg_TCC1 0
  (neg_TCC1-1 nil 3634303063
   ("" (skeep)
    (("" (rewrite "length_reverse")
      (("" (rewrite "map_length") nil nil)) nil))
    nil)
   ((map_length formula-decl nil more_map_props nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int nonempty-type-eq-decl nil integers nil)
    (negib const-decl "IntBand" int_bands nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list type-decl nil list_adt nil)
    (length_reverse formula-decl nil list_props nil))
   nil
   (neg subtype
    "list_props[IntBand].reverse(list_adt_map[IntBand, IntBand].map(int_bands.negib)(int_bands.L))"
    "listn[IntBand].listn(list_props[IntBand].length(int_bands.L))")))
 (neg_intband_def 0
  (neg_intband_def-1 nil 3634303254
   ("" (skeep)
    (("" (ground)
      (("1" (skeep)
        (("1" (inst + "length(L)-1-i")
          (("1" (expand "neg")
            (("1" (rewrite "reverse_def")
              (("1" (rewrite "map_length")
                (("1" (rewrite "map_nth_rw")
                  (("1" (grind :exclude "nth") nil nil)) nil))
                nil)
               ("2" (rewrite "map_length") (("2" (assert) nil nil))
                nil))
              nil))
            nil)
           ("2" (expand "neg")
            (("2" (rewrite "length_reverse")
              (("2" (rewrite "map_length") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (inst + "length(L)-1-i")
          (("1" (expand "neg")
            (("1" (rewrite "reverse_def")
              (("1" (rewrite "map_length")
                (("1" (rewrite "map_nth_rw")
                  (("1" (grind :exclude ("nth" "length")) nil nil)
                   ("2" (typepred "i")
                    (("2" (expand "neg" -1)
                      (("2" (rewrite "length_reverse")
                        (("2" (rewrite "map_length")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (rewrite "map_length")
                (("2" (assert)
                  (("2" (typepred "i")
                    (("2" (expand "neg" -1)
                      (("2" (rewrite "length_reverse")
                        (("2" (rewrite "map_length") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "i")
            (("2" (expand "neg" -1)
              (("2" (rewrite "length_reverse")
                (("2" (rewrite "map_length") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (i skolem-const-decl "below(length(neg(L)))" int_bands nil)
    (length_reverse formula-decl nil list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (in? const-decl "bool" int_bands nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map_length formula-decl nil more_map_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (reverse_def formula-decl nil more_list_props structures)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (negib const-decl "IntBand" int_bands nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (L skolem-const-decl "list[IntBand]" int_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(length(L))" int_bands nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (listn type-eq-decl nil listn structures)
    (neg const-decl "listn[IntBand](length[IntBand](L))" int_bands nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (neg_intband_def2_TCC1 0
  (neg_intband_def2_TCC1-1 nil 3634303063
   ("" (skeep)
    (("" (expand "neg")
      (("" (rewrite "length_reverse")
        (("" (rewrite "map_length") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (map_length formula-decl nil more_map_props nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int nonempty-type-eq-decl nil integers nil)
    (negib const-decl "IntBand" int_bands nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list type-decl nil list_adt nil)
    (length_reverse formula-decl nil list_props nil)
    (neg const-decl "listn[IntBand](length[IntBand](L))" int_bands
     nil))
   nil
   (neg_intband_def2 subtype "int_bands.i"
    "below[length[IntBand](neg(L))]")))
 (neg_intband_def2_TCC2 0
  (neg_intband_def2_TCC2-1 nil 3634303063 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (neg_intband_def2 subtype
    "(number_fields.-)((number_fields.-)(list_props[IntBand].length(int_bands.L), 1), int_bands.i)"
    "below[length[IntBand](L)]")))
 (neg_intband_def2 0
  (neg_intband_def2-1 nil 3634303434
   ("" (skeep*)
    (("" (expand "neg" + 1)
      (("" (rewrite "reverse_def")
        (("1" (rewrite "map_length")
          (("1" (rewrite "map_nth_rw") nil nil)) nil)
         ("2" (rewrite "map_length" 1) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((map_nth_rw formula-decl nil more_map_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (map_length formula-decl nil more_map_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (negib const-decl "IntBand" int_bands nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list type-decl nil list_adt nil)
    (reverse_def formula-decl nil more_list_props structures)
    (neg const-decl "listn[IntBand](length[IntBand](L))" int_bands nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (Bands?_TCC1 0
  (Bands?_TCC1-1 nil 3630843161 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil))
   nil (Bands? subtype "int_bands.j" "below[length[IntBand](L)]")))
 (Bands?_TCC2 0
  (Bands?_TCC2-1 nil 3630843161 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil))
   nil (Bands? subtype "int_bands.z" "below[length[IntBand](L)]")))
 (nat_bands_rec_TCC1 0
  (nat_bands_rec_TCC1-1 nil 3630847601 ("" (subtype-tcc) nil nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (nat_bands_rec subtype
    "real_defs.max((number_fields.+)((number_fields.-)(int_bands.maxi, int_bands.i), 2), 0)"
    "naturalnumber")))
 (nat_bands_rec_TCC2 0
  (nat_bands_rec_TCC2-1 nil 3630847601
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (every adt-def-decl "boolean" list_adt nil))
   nil
   (nat_bands_rec subtype
    "(: (# lb := int_bands.d, ub := (number_fields.-)(int_bands.i, 1) #) :)"
    "list_adt[IntBand].list")))
 (nat_bands_rec_TCC3 0
  (nat_bands_rec_TCC3-3 "" 3794669320
   ("" (skeep)
    (("" (typepred "L")
      (("" (typepred "maxi")
        (("" (expand "Bands?")
          (("" (flatten)
            (("" (assert)
              (("" (split 1)
                (("1" (skeep)
                  (("1" (rewrite "nth_append" +)
                    (("1" (typepred "j")
                      (("1" (rewrite "length_append")
                        (("1" (assert)
                          (("1" (lift-if +)
                            (("1" (split +)
                              (("1"
                                (flatten)
                                (("1"
                                  (inst - "j")
                                  (("1" (ground) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (lemma "length_append[IntBand]")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (expand "length" - 2)
                                      (("2"
                                        (expand "length" - 2)
                                        (("2"
                                          (case "NOT j = length(L)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (replaces -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "nth" +)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "j")
                      (("2" (lemma "length_append[IntBand]")
                        (("2" (inst?)
                          (("2" (replaces -1)
                            (("2" (expand "length" - 2)
                              (("2"
                                (expand "length" - 2)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but 1) (("3" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (typepred "z")
                    (("2" (typepred "j")
                      (("2" (lemma "length_append[IntBand]")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (replaces -1)
                              (("2"
                                (expand "length" -1 1)
                                (("2"
                                  (expand "length" -2 1)
                                  (("2"
                                    (rewrite "nth_append" +)
                                    (("2"
                                      (rewrite "nth_append" +)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split +)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst - "z" "j")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (case
                                                 "NOT j = length(L)")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (replaces -1 +)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "nth"
                                                       +
                                                       1)
                                                      (("2"
                                                        (inst - "z")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep)
                  (("3" (case "NOT maxi = i-1")
                    (("1" (assert) nil nil)
                     ("2" (replaces -1)
                      (("2" (assert)
                        (("2" (inst -6 "z")
                          (("2" (assert)
                            (("2" (lemma "length_append[IntBand]")
                              (("2"
                                (inst?)
                                (("1"
                                  (expand "length" - 3)
                                  (("1"
                                    (expand "length" - 3)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split +)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     +
                                                     "length(L)")
                                                    (("1"
                                                      (expand "in?")
                                                      (("1"
                                                        (rewrite
                                                         "nth_append"
                                                         +)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           +)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst + "j")
                                                      (("2"
                                                        (rewrite
                                                         "nth_append"
                                                         +)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (rewrite
                                                     "nth_append"
                                                     -)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split -)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               +
                                                               "j")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "in?"
                                                                 -1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in? const-decl "bool" int_bands nil)
    (nth def-decl "T" list_props nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (j skolem-const-decl
     "below(length(append[IntBand](L, (: (# lb := d, ub := i - 1 #) :))))"
     int_bands nil)
    (L skolem-const-decl "{L | Bands?(maxi, 0, i - 1, IP, d)(L)}"
     int_bands nil)
    (d skolem-const-decl "int" int_bands nil)
    (IP skolem-const-decl "[nat -> bool]" int_bands nil)
    (maxi skolem-const-decl "{maxi | i - 1 <= maxi}" int_bands nil)
    (i skolem-const-decl "nat" int_bands nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (append def-decl "list[T]" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth_append formula-decl nil more_list_props structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Bands? const-decl "bool" int_bands nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak
   (nat_bands_rec subtype
    "list_props[IntBand].append(int_bands.L, (: (# lb := int_bands.d, ub := (number_fields.-)(int_bands.i, 1) #) :))"
    "(int_bands.Bands?(int_bands.maxi, 0, int_bands.maxi, int_bands.IP, (number_fields.-)(1)))"))
  (nat_bands_rec_TCC3-2 nil 3630848942
   ("" (skeep)
    (("" (typepred "L")
      (("" (typepred "maxi")
        (("" (expand "Bands?")
          (("" (flatten)
            (("" (assert)
              (("" (split 1)
                (("1" (skeep)
                  (("1" (rewrite "nth_append" +)
                    (("1" (typepred "j")
                      (("1" (rewrite "length_append")
                        (("1" (assert)
                          (("1" (lift-if +)
                            (("1" (split +)
                              (("1"
                                (flatten)
                                (("1"
                                  (inst - "j")
                                  (("1" (ground) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (lemma "length_append[IntBand]")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (replaces -1)
                                      (("2"
                                        (expand "length" - 2)
                                        (("2"
                                          (expand "length" - 2)
                                          (("2"
                                            (case "NOT j = length(L)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (replaces -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "nth" +)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "j")
                      (("2" (lemma "length_append[IntBand]")
                        (("2" (inst?)
                          (("2" (replaces -1)
                            (("2" (expand "length" - 2)
                              (("2"
                                (expand "length" - 2)
                                (("2"
                                  (expand "length" + 1)
                                  (("2"
                                    (expand "length" + 2)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but 1) (("3" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (typepred "z")
                    (("2" (typepred "j")
                      (("2" (lemma "length_append[IntBand]")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (replaces -1)
                              (("2"
                                (expand "length" -1 1)
                                (("2"
                                  (expand "length" -1 2)
                                  (("2"
                                    (expand "length" -2 1)
                                    (("2"
                                      (expand "length" -2 2)
                                      (("2"
                                        (rewrite "nth_append" +)
                                        (("2"
                                          (rewrite "nth_append" +)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split +)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst
                                                         -
                                                         "z"
                                                         "j")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (case
                                                         "NOT j = length(L)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (replaces
                                                           -1
                                                           +)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "nth"
                                                               +
                                                               1)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "z")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep)
                  (("3" (case "NOT maxi = i-1")
                    (("1" (assert) nil nil)
                     ("2" (replaces -1)
                      (("2" (assert)
                        (("2" (inst -6 "z")
                          (("2" (assert)
                            (("2" (lemma "length_append[IntBand]")
                              (("2"
                                (inst?)
                                (("1"
                                  (expand "length" - 3)
                                  (("1"
                                    (expand "length" - 3)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split +)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     +
                                                     "length(L)")
                                                    (("1"
                                                      (expand "in?")
                                                      (("1"
                                                        (rewrite
                                                         "nth_append"
                                                         +)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           +)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "length"
                                                           +
                                                           2)
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             +
                                                             3)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst + "j")
                                                      (("2"
                                                        (rewrite
                                                         "nth_append"
                                                         +)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (rewrite
                                                     "nth_append"
                                                     -)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split -)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               +
                                                               "j")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "in?"
                                                                 -1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       +
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         +
                                                         2)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_singleton formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures))
   nil
   (nat_bands_rec subtype
    "list_props[IntBand].append(int_bands.L, (: (# lb := int_bands.d, ub := (number_fields.-)(int_bands.i, 1) #) :))"
    "(int_bands.Bands?(int_bands.maxi, 0, int_bands.maxi, int_bands.IP, (number_fields.-)(1)))"))
  (nat_bands_rec_TCC3-1 nil 3630847601 ("" (subtype-tcc) nil nil) nil
   nil
   (nat_bands_rec subtype
    "list_props[IntBand].append(int_bands.L, (: (# lb := int_bands.d, ub := (number_fields.-)(int_bands.i, 1) #) :))"
    "(int_bands.Bands?(int_bands.maxi, 0, int_bands.maxi, int_bands.IP, (number_fields.-)(1)))")))
 (nat_bands_rec_TCC4 0
  (nat_bands_rec_TCC4-2 "" 3794669320
   ("" (skeep)
    (("" (assert)
      (("" (typepred "L")
        (("" (assert)
          (("" (expand "Bands?")
            (("" (flatten)
              (("" (assert)
                (("" (case "NOT maxi = i-1")
                  (("1" (assert) nil nil)
                   ("2" (replaces -1)
                    (("2" (replaces -1) (("2" (replaces -1) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Bands? const-decl "bool" int_bands nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak
   (nat_bands_rec subtype "int_bands.L"
    "(int_bands.Bands?(int_bands.maxi, 0, int_bands.maxi, int_bands.IP, (number_fields.-)(1)))"))
  (nat_bands_rec_TCC4-1 nil 3630847601
   ("" (skeep)
    (("" (assert)
      (("" (typepred "L")
        (("" (assert)
          (("" (expand "Bands?")
            (("" (flatten)
              (("" (assert)
                (("" (replaces -1)
                  (("" (case "NOT maxi = i-1")
                    (("1" (assert) nil nil)
                     ("2" (replaces -1)
                      (("2" (replaces -1) (("2" (replaces -1) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (nat_bands_rec subtype "int_bands.L"
    "(int_bands.Bands?(int_bands.maxi, 0, int_bands.maxi, int_bands.IP, (number_fields.-)(1)))")))
 (nat_bands_rec_TCC5 0
  (nat_bands_rec_TCC5-1 nil 3630847601 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Bands? const-decl "bool" int_bands nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (in? const-decl "bool" int_bands nil))
   nil
   (nat_bands_rec subtype "int_bands.maxi"
    "{maxi | reals.<=(int_bands.i, int_bands.maxi)}")))
 (nat_bands_rec_TCC6 0
  (nat_bands_rec_TCC6-1 nil 3630847601
   ("" (skeep)
    (("" (assert)
      (("" (hide 1)
        (("" (typepred "L")
          (("" (expand "Bands?")
            (("" (assert)
              (("" (flatten)
                (("" (assert)
                  (("" (split +)
                    (("1" (skeep)
                      (("1" (inst - "j")
                        (("1" (assert)
                          (("1" (flatten) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil)
                     ("3" (skeep)
                      (("3" (case "NOT z = i")
                        (("1" (inst -5 "z") (("1" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Bands? const-decl "bool" int_bands nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (nat_bands_rec subtype "int_bands.L"
    "{L | int_bands.Bands?(int_bands.maxi, 0, int_bands.i, int_bands.IP, int_bands.d)(int_bands.L)}")))
 (nat_bands_rec_TCC7 0
  (nat_bands_rec_TCC7-1 nil 3630847601 ("" (subtype-tcc) nil nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (nat_bands_rec termination
    "int_bands.nat_bands_rec((number_fields.+)(int_bands.i, 1), int_bands.maxi, int_bands.IP, int_bands.d, int_bands.L)"
    "nil")))
 (nat_bands_rec_TCC8 0
  (nat_bands_rec_TCC8-1 nil 3630847601 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Bands? const-decl "bool" int_bands nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (in? const-decl "bool" int_bands nil))
   nil
   (nat_bands_rec subtype "int_bands.maxi"
    "{maxi | reals.<=(int_bands.i, int_bands.maxi)}")))
 (nat_bands_rec_TCC9 0
  (nat_bands_rec_TCC9-1 nil 3630847601
   ("" (skeep)
    (("" (assert) (("" (hide 3) (("" (grind) nil nil)) nil)) nil)) nil)
   ((every adt-def-decl "boolean" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (nat_bands_rec subtype
    "(: (# lb := int_bands.d, ub := (number_fields.-)(int_bands.i, 1) #) :)"
    "list_adt[IntBand].list")))
 (nat_bands_rec_TCC10 0
  (nat_bands_rec_TCC10-2 "" 3794669321
   ("" (skeep)
    (("" (hide 2)
      (("" (assert)
        (("" (typepred "L")
          (("" (expand "Bands?")
            (("" (flatten)
              (("" (assert)
                (("" (split +)
                  (("1" (skeep)
                    (("1" (typepred "j")
                      (("1" (lemma "length_append[IntBand]")
                        (("1" (inst?)
                          (("1" (expand "length" - 3)
                            (("1" (expand "length" - 3)
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite "nth_append" +)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split +)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst - "j")
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "nth" +)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (typepred "j")
                      (("2" (typepred "z")
                        (("2" (lemma "length_append[IntBand]")
                          (("2" (inst?)
                            (("2" (expand "length" - 3)
                              (("2"
                                (expand "length" - 3)
                                (("2"
                                  (case "j /= length(L)")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst - "z" "j")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite "nth_append" +)
                                          (("1"
                                            (rewrite "nth_append" +)
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil)
                                       ("3" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (rewrite "nth_append" +)
                                        (("2"
                                          (rewrite "nth_append" +)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "nth" + 1)
                                              (("2"
                                                (inst - "z")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep)
                    (("3" (assert)
                      (("3" (lemma "length_append[IntBand]")
                        (("3" (inst?)
                          (("1" (expand "length" - 3)
                            (("1" (expand "length" - 3)
                              (("1"
                                (assert)
                                (("1"
                                  (case "NOT z = i")
                                  (("1"
                                    (inst -6 "z")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split +)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -)
                                              (("1"
                                                (inst + "length(L)")
                                                (("1"
                                                  (rewrite
                                                   "nth_append"
                                                   +)
                                                  (("1"
                                                    (expand "nth" +)
                                                    (("1"
                                                      (expand "in?")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst + "j")
                                                    (("2"
                                                      (rewrite
                                                       "nth_append"
                                                       +)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (case
                                               "NOT j = length(L)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst + "j")
                                                    (("1"
                                                      (rewrite
                                                       "nth_append"
                                                       -)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred "j")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "nth_append"
                                                           -)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             -
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "in?")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (rewrite "nth_append" -)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst - "j")
                                                (("1"
                                                  (expand "in?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "nth" - 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "in?" -1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (flatten)
                    (("4" (skeep -)
                      (("4" (typepred "j")
                        (("4" (lemma "length_append[IntBand]")
                          (("4" (inst?)
                            (("4" (replaces -1)
                              (("4"
                                (expand "length" -1 2)
                                (("4"
                                  (expand "length" -1 2)
                                  (("4"
                                    (rewrite "nth_append")
                                    (("4"
                                      (assert)
                                      (("4"
                                        (lift-if -2)
                                        (("4"
                                          (split -)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst - "j")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "nth" -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (in? const-decl "bool" int_bands nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (j skolem-const-decl
     "below(length(append[IntBand](L, (: (# lb := d, ub := i - 1 #) :))))"
     int_bands nil)
    (z skolem-const-decl
     "below(length(append[IntBand](L, (: (# lb := d, ub := i - 1 #) :))))"
     int_bands nil)
    (L skolem-const-decl "{L | Bands?(maxi, 0, i - 1, IP, d)(L)}"
     int_bands nil)
    (d skolem-const-decl "int" int_bands nil)
    (IP skolem-const-decl "[nat -> bool]" int_bands nil)
    (maxi skolem-const-decl "{maxi | i - 1 <= maxi}" int_bands nil)
    (i skolem-const-decl "nat" int_bands nil)
    (/= const-decl "boolean" notequal nil)
    (nth def-decl "T" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_append formula-decl nil list_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Bands? const-decl "bool" int_bands nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (nat_bands_rec subtype
    "list_props[IntBand].append(int_bands.L, (: (# lb := int_bands.d, ub := (number_fields.-)(int_bands.i, 1) #) :))"
    "{L | int_bands.Bands?(int_bands.maxi, 0, int_bands.i, int_bands.IP, (number_fields.-)(1))(int_bands.L)}"))
  (nat_bands_rec_TCC10-1 nil 3630847601
   ("" (skeep)
    (("" (hide 3)
      (("" (assert)
        (("" (typepred "L")
          (("" (expand "Bands?")
            (("" (flatten)
              (("" (assert)
                (("" (split +)
                  (("1" (skeep)
                    (("1" (typepred "j")
                      (("1" (lemma "length_append[IntBand]")
                        (("1" (inst?)
                          (("1" (expand "length" - 3)
                            (("1" (expand "length" - 3)
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite "nth_append" +)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split +)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst - "j")
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "nth" +)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "length" + 1)
                                    (("2"
                                      (expand "length" + 2)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (typepred "j")
                      (("2" (typepred "z")
                        (("2" (lemma "length_append[IntBand]")
                          (("2" (inst?)
                            (("2" (expand "length" - 3)
                              (("2"
                                (expand "length" - 3)
                                (("2"
                                  (case "j /= length(L)")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst - "z" "j")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite "nth_append" +)
                                          (("1"
                                            (rewrite "nth_append" +)
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil)
                                       ("3" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (rewrite "nth_append" +)
                                        (("1"
                                          (rewrite "nth_append" +)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "nth" + 1)
                                              (("1"
                                                (inst - "z")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "length" + 2)
                                          (("2"
                                            (expand "length" + 3)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep)
                    (("3" (assert)
                      (("3" (lemma "length_append[IntBand]")
                        (("3" (inst?)
                          (("1" (expand "length" - 3)
                            (("1" (expand "length" - 3)
                              (("1"
                                (assert)
                                (("1"
                                  (case "NOT z = i")
                                  (("1"
                                    (inst -6 "z")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split +)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -)
                                              (("1"
                                                (inst + "length(L)")
                                                (("1"
                                                  (rewrite
                                                   "nth_append"
                                                   +)
                                                  (("1"
                                                    (expand "nth" +)
                                                    (("1"
                                                      (expand "in?")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "length"
                                                     +
                                                     2)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       +
                                                       3)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst + "j")
                                                    (("2"
                                                      (rewrite
                                                       "nth_append"
                                                       +)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (case
                                               "NOT j = length(L)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst + "j")
                                                    (("1"
                                                      (rewrite
                                                       "nth_append"
                                                       -)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred "j")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "nth_append"
                                                           -)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             -
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "in?")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "length"
                                                             +
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               +
                                                               2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (rewrite "nth_append" -)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (split -)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst - "j")
                                                (("1"
                                                  (expand "in?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "nth" - 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "in?" -1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "length" + 1)
                                          (("2"
                                            (expand "length" + 2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (flatten)
                    (("4" (skeep -)
                      (("4" (typepred "j")
                        (("4" (lemma "length_append[IntBand]")
                          (("4" (inst?)
                            (("4" (replaces -1)
                              (("4"
                                (expand "length" -1 2)
                                (("4"
                                  (expand "length" -1 2)
                                  (("4"
                                    (rewrite "nth_append")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if -2)
                                        (("1"
                                          (split -)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst - "j")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "nth" -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "length" 1 1)
                                      (("2"
                                        (expand "length" 1 2)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth_append formula-decl nil more_list_props structures)
    (length_singleton formula-decl nil more_list_props structures))
   nil
   (nat_bands_rec subtype
    "list_props[IntBand].append(int_bands.L, (: (# lb := int_bands.d, ub := (number_fields.-)(int_bands.i, 1) #) :))"
    "{L | int_bands.Bands?(int_bands.maxi, 0, int_bands.i, int_bands.IP, (number_fields.-)(1))(int_bands.L)}")))
 (nat_bands_rec_TCC11 0
  (nat_bands_rec_TCC11-1 nil 3630847601 ("" (termination-tcc) nil nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (nat_bands_rec termination
    "int_bands.nat_bands_rec((number_fields.+)(int_bands.i, 1), int_bands.maxi, int_bands.IP, (number_fields.-)(1), list_props[IntBand].append(int_bands.L, (: (# lb := int_bands.d, ub := (number_fields.-)(int_bands.i, 1) #) :)))"
    "nil")))
 (nat_bands_rec_TCC12 0
  (nat_bands_rec_TCC12-1 nil 3630847601 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Bands? const-decl "bool" int_bands nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (in? const-decl "bool" int_bands nil))
   nil
   (nat_bands_rec subtype "int_bands.maxi"
    "{maxi | reals.<=(int_bands.i, int_bands.maxi)}")))
 (nat_bands_rec_TCC13 0
  (nat_bands_rec_TCC13-1 nil 3630847601
   ("" (skeep)
    (("" (assert)
      (("" (eval-expr "FALSE AND FALSE")
        (("" (replace -1 :hide? t)
          (("" (typepred "L")
            (("" (expand "Bands?")
              (("" (flatten)
                (("" (assert)
                  (("" (split +)
                    (("1" (skeep)
                      (("1" (assert)
                        (("1" (inst-cp - "j")
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (inst + "j")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil)
                     ("3" (skeep)
                      (("3" (case "z = i")
                        (("1" (assert) nil nil)
                         ("2" (inst -4 "z") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Bands? const-decl "bool" int_bands nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FALSE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (nat_bands_rec subtype "int_bands.L"
    "{L | int_bands.Bands?(int_bands.maxi, 0, int_bands.i, int_bands.IP, int_bands.i)(int_bands.L)}")))
 (nat_bands_rec_TCC14 0
  (nat_bands_rec_TCC14-1 nil 3630847601 ("" (subtype-tcc) nil nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (nat_bands_rec termination
    "int_bands.nat_bands_rec((number_fields.+)(int_bands.i, 1), int_bands.maxi, int_bands.IP, int_bands.i, int_bands.L)"
    "nil")))
 (nat_bands_rec_TCC15 0
  (nat_bands_rec_TCC15-1 nil 3630847601 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Bands? const-decl "bool" int_bands nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (in? const-decl "bool" int_bands nil))
   nil
   (nat_bands_rec subtype "int_bands.maxi"
    "{maxi | reals.<=(int_bands.i, int_bands.maxi)}")))
 (nat_bands_rec_TCC16 0
  (nat_bands_rec_TCC16-1 nil 3630847601
   ("" (skeep)
    (("" (assert)
      (("" (eval-expr "FALSE AND FALSE")
        (("" (replace -1 :hide? t)
          (("" (typepred "L")
            (("" (expand "Bands?")
              (("" (flatten)
                (("" (assert)
                  (("" (split)
                    (("1" (skeep)
                      (("1" (inst - "j") (("1" (ground) nil nil)) nil))
                      nil)
                     ("2" (propax) nil nil)
                     ("3" (skeep)
                      (("3" (inst -4 "z")
                        (("3" (ground)
                          (("3" (case "NOT z = i")
                            (("1" (assert) nil nil)
                             ("2" (replace -1)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst - "j!1")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "in?")
                                      (("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (flatten)
                      (("4" (skeep -1)
                        (("4" (inst + "j") (("4" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in? const-decl "bool" int_bands nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Bands? const-decl "bool" int_bands nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FALSE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil
   (nat_bands_rec subtype "int_bands.L"
    "{L | int_bands.Bands?(int_bands.maxi, 0, int_bands.i, int_bands.IP, (number_fields.-)(1))(int_bands.L)}")))
 (nat_bands_rec_TCC17 0
  (nat_bands_rec_TCC17-1 nil 3630848895 ("" (termination-tcc) nil nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (nat_bands_rec termination
    "int_bands.nat_bands_rec((number_fields.+)(int_bands.i, 1), int_bands.maxi, int_bands.IP, (number_fields.-)(1), int_bands.L)"
    "nil")))
 (nat_bands_TCC1 0
  (nat_bands_TCC1-1 nil 3630850731 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int nonempty-type-eq-decl nil integers nil)
    (length_null formula-decl nil more_list_props structures)
    (in? const-decl "bool" int_bands nil)
    (Bands? const-decl "bool" int_bands nil))
   nil
   (nat_bands subtype "list_adt[IntBand].null"
    "{L | int_bands.Bands?(int_bands.maxi, 0, -1, int_bands.IP, (number_fields.-)(1))(int_bands.L)}")))
 (nat_bands_connected_TCC1 0
  (nat_bands_connected_TCC1-1 nil 3633434279 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_bands const-decl "(Bands?(maxi, 0, maxi, IP, -1))" int_bands
     nil))
   nil
   (nat_bands_connected subtype "int_bands.z"
    "below[length[IntBand](nat_bands(maxi, IP))]")))
 (nat_bands_connected 0
  (nat_bands_connected-1 nil 3633434280
   ("" (skeep)
    (("" (name "A" "nat_bands(maxi,IP)")
      (("" (replaces -1)
        (("" (typepred "A")
          (("" (expand "Bands?")
            (("" (flatten)
              (("" (assert)
                (("" (inst? -2) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Bands? const-decl "bool" int_bands nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nat_bands const-decl "(Bands?(maxi, 0, maxi, IP, -1))" int_bands
     nil))
   shostak))
 (linvel_def_vect2_TCC1 0
  (linvel_def_vect2_TCC1-1 nil 3630924368 ("" (subtype-tcc) nil nil)
   nil nil
   (linvel_def_vect2 subtype "(number_fields.-)(int_bands.z, 1)"
    "nat")))
 (linvel_def_vect2 0
  (linvel_def_vect2-1 nil 3630924274
   ("" (induct "k")
    (("1" (skeep)
      (("1" (expand "maneuver_position_at")
        (("1" (assert)
          (("1" (case "NOT floor(0)=0")
            (("1" (assert) nil nil)
             ("2" (replaces -1)
              (("2" (assert)
                (("2" (expand "min")
                  (("2" (assert)
                    (("2" (expand "man_pos_seq")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 "k")
      (("2" (flatten)
        (("2" (skeep)
          (("2" (insteep -1)
            (("2" (rewrite "manuever_position_at_def")
              (("2" (rewrite "manuever_position_at_def")
                (("2" (assert)
                  (("2" (expand "man_pos_seq" +)
                    (("2" (replaces -1) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (manuever_position_at_def formula-decl nil repulsive_iterative
     ACCoRD)
    (man_pos_seq def-decl "Vect2" repulsive_iterative ACCoRD)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (< const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (linvel const-decl "Vect3" int_bands nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (maneuver_position_at const-decl "Vect2" repulsive_iterative
     ACCoRD)
    (VelSeq type-eq-decl nil repulsive_iterative ACCoRD)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Traj type-eq-decl nil int_bands nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (linvel_def_vect2_2 0
  (linvel_def_vect2_2-1 nil 3630931340
   ("" (induct "k")
    (("1" (skeep)
      (("1" (expand "maneuver_position_at")
        (("1" (assert)
          (("1" (case "NOT floor(0)=0")
            (("1" (assert) nil nil)
             ("2" (replaces -1)
              (("2" (assert)
                (("2" (expand "min")
                  (("2" (assert)
                    (("2" (expand "man_pos_seq")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 "k")
      (("2" (flatten)
        (("2" (skeep)
          (("2" (insteep -1)
            (("2" (rewrite "manuever_position_at_def")
              (("2" (rewrite "manuever_position_at_def")
                (("2" (assert)
                  (("2" (expand "man_pos_seq" +)
                    (("2" (replaces -1) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (manuever_position_at_def formula-decl nil repulsive_iterative
     ACCoRD)
    (man_pos_seq def-decl "Vect2" repulsive_iterative ACCoRD)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (< const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sub_zero_right formula-decl nil vectors_3D vectors)
    (scal_0 formula-decl nil vectors_3D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (* const-decl "Vector" vectors_3D vectors)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (linvel const-decl "Vect3" int_bands nil)
    (- const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (maneuver_position_at const-decl "Vect2" repulsive_iterative
     ACCoRD)
    (VelSeq type-eq-decl nil repulsive_iterative ACCoRD)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Traj type-eq-decl nil int_bands nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (linvel_def_vect2_3_TCC1 0
  (linvel_def_vect2_3_TCC1-1 nil 3630939234 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (linvel_def_vect2_3 subtype "(number_fields.-)(int_bands.i, 1)"
    "nat")))
 (linvel_def_vect2_3 0
  (linvel_def_vect2_3-1 nil 3630934319
   ("" (induct "j")
    (("1" (assert)
      (("1" (skeep)
        (("1" (expand "maneuver_position_at")
          (("1" (case "NOT floor(0) = 0")
            (("1" (assert) nil nil)
             ("2" (replaces -1)
              (("2" (assert)
                (("2" (expand "min")
                  (("2" (assert)
                    (("2" (expand "man_pos_seq")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 "j")
      (("2" (flatten)
        (("2" (assert)
          (("2" (skeep)
            (("2" (insteep -1)
              (("2" (assert)
                (("2" (expand "maneuver_position_at" +)
                  (("2" (assert)
                    (("2" (case "NOT floor(j+1) = j+1")
                      (("1" (assert) nil nil)
                       ("2" (replaces -1)
                        (("2" (assert)
                          (("2" (expand "min")
                            (("2" (assert)
                              (("2"
                                (expand "maneuver_position_at")
                                (("2"
                                  (case "NOT floor(j) = j")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (replaces -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "min")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "man_pos_seq" +)
                                            (("2"
                                              (replaces -1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (man_pos_seq def-decl "Vect2" repulsive_iterative ACCoRD)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (< const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (sub_zero_right formula-decl nil vectors_3D vectors)
    (scal_0 formula-decl nil vectors_3D vectors)
    (nat_induction formula-decl nil naturalnumbers nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (linvel const-decl "Vect3" int_bands nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (maneuver_position_at const-decl "Vect2" repulsive_iterative
     ACCoRD)
    (VelSeq type-eq-decl nil repulsive_iterative ACCoRD)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Traj type-eq-decl nil int_bands nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (linevel_def_2 0
  (linevel_def_2-1 nil 3630925924
   ("" (skeep)
    (("" (expand "linvel")
      (("" (assert)
        (("" (decompose-equality 1)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "Vector" vectors_3D vectors)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Traj type-eq-decl nil int_bands nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "Vector" vectors_3D vectors)
    (scal_assoc formula-decl nil vectors_3D vectors)
    (scal_1 formula-decl nil vectors_3D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (linvel const-decl "Vect3" int_bands nil))
   shostak))
 (linvel_def_vect3 0
  (linvel_def_vect3-1 nil 3631279184
   ("" (induct "j")
    (("1" (assert)
      (("1" (skeep)
        (("1" (expand "maneuver_position_v3_at")
          (("1" (case "NOT floor(0) = 0")
            (("1" (assert) nil nil)
             ("2" (replaces -1)
              (("2" (assert)
                (("2" (expand "min")
                  (("2" (assert)
                    (("2" (expand "man_pos_seq_v3")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 "j")
      (("2" (flatten)
        (("2" (assert)
          (("2" (skeep)
            (("2" (insteep -1)
              (("2" (assert)
                (("2" (expand "maneuver_position_v3_at")
                  (("2" (assert)
                    (("2" (case "NOT floor(j+1) = j+1")
                      (("1" (assert) nil nil)
                       ("2" (replaces -1)
                        (("2" (assert)
                          (("2" (expand "min")
                            (("2" (assert)
                              (("2"
                                (case "NOT floor(j) = j")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (replaces -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "man_pos_seq_v3" +)
                                      (("2"
                                        (replaces -1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Vector" vectors_3D vectors)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (man_pos_seq_v3 def-decl "Vect3" repulsive_vertical_it ACCoRD)
    (add_zero_right formula-decl nil vectors_3D vectors)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (< const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (sub_zero_right formula-decl nil vectors_3D vectors)
    (scal_0 formula-decl nil vectors_3D vectors)
    (nat_induction formula-decl nil naturalnumbers nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (linvel const-decl "Vect3" int_bands nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (maneuver_position_v3_at const-decl "Vect3" repulsive_vertical_it
     ACCoRD)
    (VelSeq type-eq-decl nil repulsive_vertical_it ACCoRD)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Traj type-eq-decl nil int_bands nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (repulsive_at_TCC1 0
  (repulsive_at_TCC1-1 nil 3630925914 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "Vector" vectors_3D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (linvel const-decl "Vect3" int_bands nil)
    (/= const-decl "boolean" notequal nil)
    (det const-decl "real" det_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (repulsive_criteria const-decl "bool" repulsive ACCoRD)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (repulsive_at subtype "(number_fields.-)(int_bands.k, 1)" "nat")))
 (first_nonrepulsive_step_TCC1 0
  (first_nonrepulsive_step_TCC1-1 nil 3630926756
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (first_nonrepulsive_step subtype "int_bands.i" "nat")))
 (first_nonrepulsive_step_TCC2 0
  (first_nonrepulsive_step_TCC2-1 nil 3630926756
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "Vector" vectors_3D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (linvel const-decl "Vect3" int_bands nil)
    (/= const-decl "boolean" notequal nil)
    (det const-decl "real" det_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (repulsive_criteria const-decl "bool" repulsive ACCoRD)
    (+ const-decl "Vector" vectors_3D vectors)
    (repulsive_at const-decl "bool" int_bands nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil))
   nil
   (first_nonrepulsive_step subtype "(number_fields.-)(1)"
    "{i: integers.int | booleans.AND((booleans.IFF(reals.>=(i, 0), (booleans.AND((booleans.AND(reals.<=(int_bands.k, i), booleans.AND(reals.<=(i, int_bands.MaxN), (booleans.NOT)(int_bands.repulsive_at(int_bands.traj, i, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps))))), FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<(j, i)), int_bands.repulsive_at(int_bands.traj, j, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps)))))), (booleans.IFF(reals.<(i, 0), (FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<=(j, int_bands.MaxN)), int_bands.repulsive_at(int_bands.traj, j, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps))))))}")))
 (first_nonrepulsive_step_TCC3 0
  (first_nonrepulsive_step_TCC3-1 nil 3630926756
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (first_nonrepulsive_step subtype "int_bands.k"
    "{i: integers.int | booleans.AND((booleans.IFF(reals.>=(i, 0), (booleans.AND((booleans.AND(reals.<=(int_bands.k, i), booleans.AND(reals.<=(i, int_bands.MaxN), (booleans.NOT)(int_bands.repulsive_at(int_bands.traj, i, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps))))), FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<(j, i)), int_bands.repulsive_at(int_bands.traj, j, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps)))))), (booleans.IFF(reals.<(i, 0), (FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<=(j, int_bands.MaxN)), int_bands.repulsive_at(int_bands.traj, j, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps))))))}")))
 (first_nonrepulsive_step_TCC4 0
  (first_nonrepulsive_step_TCC4-2 "" 3794669330
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_nnreal_0 formula-decl nil min_max reals)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (first_nonrepulsive_step termination
    "int_bands.first_nonrepulsive_step(int_bands.traj, (number_fields.+)(int_bands.k, 1), int_bands.ts, int_bands.MaxN, int_bands.si, int_bands.vi, int_bands.eps)"
    "nil"))
  (first_nonrepulsive_step_TCC4-1 nil 3630926756
   ("" (skeep)
    (("" (assert)
      (("" (split)
        (("1" (skeep) (("1" (assert) nil nil)) nil)
         ("2" (inst - "k") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((max_nnreal_0 formula-decl nil min_max reals)) nil
   (first_nonrepulsive_step termination
    "int_bands.first_nonrepulsive_step(int_bands.traj, (number_fields.+)(int_bands.k, 1), int_bands.ts, int_bands.MaxN, int_bands.si, int_bands.vi, int_bands.eps)"
    "nil")))
 (first_nonrepulsive_step_TCC5 0
  (first_nonrepulsive_step_TCC5-2 nil 3630928763
   ("" (skeep)
    (("" (name "G" "v(traj, k + 1, ts, MaxN, si, vi, eps)")
      (("1" (replaces -1)
        (("1" (typepred "G")
          (("1" (assert)
            (("1" (split +)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (inst - "j") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil)
               ("3" (flatten)
                (("3" (assert)
                  (("3" (skeep)
                    (("3" (inst - "j") (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("4" (flatten)
                (("4" (assert)
                  (("4" (flatten)
                    (("4" (assert)
                      (("4" (skeep)
                        (("4" (inst - "j") (("4" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 3) (("2" (grind :exclude "repulsive_at") nil nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Traj type-eq-decl nil int_bands nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals) (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (repulsive_at const-decl "bool" int_bands nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (first_nonrepulsive_step subtype
    "int_bands.first_nonrepulsive_step(int_bands.traj, (number_fields.+)(int_bands.k, 1), int_bands.ts, int_bands.MaxN, int_bands.si, int_bands.vi, int_bands.eps)"
    "{i: integers.int | booleans.AND((booleans.IFF(reals.>=(i, 0), (booleans.AND((booleans.AND(reals.<=(int_bands.k, i), booleans.AND(reals.<=(i, int_bands.MaxN), (booleans.NOT)(int_bands.repulsive_at(int_bands.traj, i, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps))))), FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<(j, i)), int_bands.repulsive_at(int_bands.traj, j, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps)))))), (booleans.IFF(reals.<(i, 0), (FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<=(j, int_bands.MaxN)), int_bands.repulsive_at(int_bands.traj, j, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps))))))}"))
  (first_nonrepulsive_step_TCC5-1 nil 3630926756
   ("" (grind :exclude "repulsive_at") nil nil)
   ((Sign type-eq-decl nil sign reals)) nil
   (first_nonrepulsive_step subtype
    "int_bands.first_nonrepulsive_step(int_bands.traj, (number_fields.+)(int_bands.k, 1), int_bands.ts, int_bands.MaxN, int_bands.si, int_bands.vi, int_bands.eps)"
    "{i: integers.int | booleans.AND((booleans.IFF(reals.>=(i, 0), (booleans.AND((booleans.AND(reals.<=(int_bands.k, i), booleans.AND(reals.<=(i, int_bands.MaxN), (booleans.NOT)(int_bands.repulsive_at(int_bands.traj, i, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps))))), FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<(j, i)), int_bands.repulsive_at(int_bands.traj, j, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps)))))), (booleans.IFF(reals.<(i, 0), (FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<=(j, int_bands.MaxN)), int_bands.repulsive_at(int_bands.traj, j, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps))))))}")))
 (first_nonrepulsive_step_repulsive_TCC1 0
  (first_nonrepulsive_step_repulsive_TCC1-1 nil 3630928560
   ("" (subtype-tcc) nil nil)
   ((- const-decl "Vector" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (first_nonrepulsive_step_repulsive subtype
    "(number_fields.-)(int_bands.j, 1)" "nat")))
 (first_nonrepulsive_step_repulsive 0
  (first_nonrepulsive_step_repulsive-1 nil 3630928856
   ("" (skeep)
    (("" (assert)
      (("" (expand "relative_velseq_vel")
        (("" (expand "repulsive_criteria_iterative")
          ((""
            (name "G"
                  "first_nonrepulsive_step(traj, 0, ts, MaxN, si, vi, eps)")
            (("" (replaces -1)
              (("" (label "Gdef" -3)
                (("" (typepred "G")
                  (("" (split +)
                    (("1" (split "Gdef")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (inst - "1")
                            (("1" (assert)
                              (("1"
                                (expand "repulsive_at" -3)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (hide (-2 -3))
                          (("2" (inst - "1")
                            (("2" (assert)
                              (("2"
                                (expand "repulsive_at" -2)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (typepred "m")
                        (("2" (split "Gdef")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma
                                   "repulsive_iterative.manuever_position_at_def")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst - "MaxN+1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replaces -1 :dir rl)
                                            (("1"
                                              (lemma
                                               "linvel_def_vect2_3")
                                              (("1"
                                                (insteep
                                                 -1
                                                 :but
                                                 ("MaxN" "j"))
                                                (("1"
                                                  (inst - "MaxN" "m")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "NOT (LAMBDA (i: posnat):
                                        IF i - 1 /= k
                                          THEN vect2(linvel(traj, ts, i - 1))
                                        ELSE vect2(traj(k * ts)`2)
                                        ENDIF
                                         - vect2(vi)) = (LAMBDA
                                                         (x: posnat):
                                                         vect2
                                                         (IF x - 1 /= k
                                                          THEN linvel(traj, ts, x - 1)
                                                          ELSE traj(k * ts)`2
                                                          ENDIF
                                                          -
                                                          vi))")
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (decompose-equality)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "m")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "repulsive_at"
                                                                       -)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-8
                                                                              2))
                                                                            (("1"
                                                                              (grind
                                                                               :exclude
                                                                               "repulsive_criteria")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "k")
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "repulsive_at"
                                                                         -)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-6
                                                                              1))
                                                                            (("2"
                                                                              (grind
                                                                               :exclude
                                                                               "repulsive_criteria")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (lemma
                               "repulsive_iterative.manuever_position_at_def")
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst - "MaxN+1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replaces -1 :dir rl)
                                        (("2"
                                          (lemma "linvel_def_vect2_3")
                                          (("2"
                                            (insteep
                                             -1
                                             :but
                                             ("MaxN" "j"))
                                            (("2"
                                              (inst - "MaxN" "m")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case
                                                   "NOT (LAMBDA (i: posnat):
                                        IF i - 1 /= k
                                          THEN vect2(linvel(traj, ts, i - 1))
                                        ELSE vect2(traj(k * ts)`2)
                                        ENDIF
                                         - vect2(vi)) = (LAMBDA
                                                         (x: posnat):
                                                         vect2
                                                         (IF x - 1 /= k
                                                          THEN linvel(traj, ts, x - 1)
                                                          ELSE traj(k * ts)`2
                                                          ENDIF
                                                          -
                                                          vi))")
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (decompose-equality)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (split +)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "m")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "repulsive_at")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-7
                                                                        2))
                                                                      (("1"
                                                                        (grind
                                                                         :exclude
                                                                         "repulsive_criteria")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "k")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "repulsive_at")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (-5
                                                                          1))
                                                                        (("2"
                                                                          (grind
                                                                           :exclude
                                                                           "repulsive_criteria")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "Vector" vectors_3D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector" vectors_3D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (linvel_def_vect2_3 formula-decl nil int_bands nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (VelSeq type-eq-decl nil repulsive_iterative ACCoRD)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (linvel const-decl "Vect3" int_bands nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (manuever_position_at_def formula-decl nil repulsive_iterative
     ACCoRD)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subrange type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Traj type-eq-decl nil int_bands nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (repulsive_at const-decl "bool" int_bands nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (first_nonrepulsive_step def-decl "{i: int |
   (i >= 0 IFF
     ((k <= i AND i <= MaxN AND NOT repulsive_at(traj, i, ts, si, vi, eps))
       AND
       (FORALL (j: nat):
          k <= j AND j < i IMPLIES
           repulsive_at(traj, j, ts, si, vi, eps))))
    AND
    (i < 0 IFF
      (FORALL (j: nat):
         k <= j AND j <= MaxN IMPLIES
          repulsive_at(traj, j, ts, si, vi, eps)))}" int_bands nil)
    (repulsive_criteria_iterative const-decl "bool" repulsive_iterative
     ACCoRD)
    (relative_velseq_vel const-decl "Vect3" repulsive_vertical_it
     ACCoRD)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (vert_repul_at_TCC1 0
  (vert_repul_at_TCC1-1 nil 3632845527 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "Vector" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (linvel const-decl "Vect3" int_bands nil)
    (vertical_repulsive_crit const-decl "bool" repulsive_vertical_it
     ACCoRD)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (vert_repul_at subtype "(number_fields.-)(int_bands.k, 1)" "nat")))
 (first_nonvert_repul_step_TCC1 0
  (first_nonvert_repul_step_TCC1-1 nil 3631034735
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "Vector" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (linvel const-decl "Vect3" int_bands nil)
    (vertical_repulsive_crit const-decl "bool" repulsive_vertical_it
     ACCoRD)
    (+ const-decl "Vector" vectors_3D vectors)
    (vert_repul_at const-decl "bool" int_bands nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (first_nonvert_repul_step subtype "(number_fields.-)(1)"
    "{i: integers.int | booleans.AND((booleans.IFF(reals.>=(i, 0), (booleans.AND((booleans.AND(reals.<=(int_bands.k, i), booleans.AND(reals.<=(i, int_bands.MaxN), (booleans.NOT)(int_bands.vert_repul_at(int_bands.traj, i, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps))))), FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<(j, i)), int_bands.vert_repul_at(int_bands.traj, j, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps)))))), (booleans.IFF(reals.<(i, 0), (FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<=(j, int_bands.MaxN)), int_bands.vert_repul_at(int_bands.traj, j, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps))))))}")))
 (first_nonvert_repul_step_TCC2 0
  (first_nonvert_repul_step_TCC2-1 nil 3631034735
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (first_nonvert_repul_step subtype "int_bands.k"
    "{i: integers.int | booleans.AND((booleans.IFF(reals.>=(i, 0), (booleans.AND((booleans.AND(reals.<=(int_bands.k, i), booleans.AND(reals.<=(i, int_bands.MaxN), (booleans.NOT)(int_bands.vert_repul_at(int_bands.traj, i, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps))))), FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<(j, i)), int_bands.vert_repul_at(int_bands.traj, j, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps)))))), (booleans.IFF(reals.<(i, 0), (FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<=(j, int_bands.MaxN)), int_bands.vert_repul_at(int_bands.traj, j, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps))))))}")))
 (first_nonvert_repul_step_TCC3 0
  (first_nonvert_repul_step_TCC3-1 nil 3631034735
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "Vector" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (linvel const-decl "Vect3" int_bands nil)
    (vertical_repulsive_crit const-decl "bool" repulsive_vertical_it
     ACCoRD)
    (+ const-decl "Vector" vectors_3D vectors)
    (vert_repul_at const-decl "bool" int_bands nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (first_nonvert_repul_step termination
    "int_bands.first_nonvert_repul_step(int_bands.traj, (number_fields.+)(int_bands.k, 1), int_bands.ts, int_bands.MaxN, int_bands.si, int_bands.vi, int_bands.eps)"
    "nil")))
 (first_nonvert_repul_step_TCC4 0
  (first_nonvert_repul_step_TCC4-2 nil 3631035173
   ("" (skeep)
    (("" (name "G" "v(traj, k + 1, ts, MaxN, si, vi, eps)")
      (("1" (replaces -1)
        (("1" (typepred "G")
          (("1" (assert)
            (("1" (split +)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (inst - "j") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil)
               ("3" (flatten)
                (("3" (assert)
                  (("3" (skeep)
                    (("3" (inst - "j") (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("4" (flatten)
                (("4" (assert)
                  (("4" (flatten)
                    (("4" (assert)
                      (("4" (skeep)
                        (("4" (inst - "j") (("4" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 3) (("2" (grind :exclude "repulsive_at") nil nil))
        nil))
      nil))
    nil)
   ((+ const-decl "Vector" vectors_3D vectors)
    (vertical_repulsive_crit const-decl "bool" repulsive_vertical_it
     ACCoRD)
    (linvel const-decl "Vect3" int_bands nil)
    (* const-decl "Vector" vectors_3D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Traj type-eq-decl nil int_bands nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals) (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vert_repul_at const-decl "bool" int_bands nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (first_nonvert_repul_step subtype
    "int_bands.first_nonvert_repul_step(int_bands.traj, (number_fields.+)(int_bands.k, 1), int_bands.ts, int_bands.MaxN, int_bands.si, int_bands.vi, int_bands.eps)"
    "{i: integers.int | booleans.AND((booleans.IFF(reals.>=(i, 0), (booleans.AND((booleans.AND(reals.<=(int_bands.k, i), booleans.AND(reals.<=(i, int_bands.MaxN), (booleans.NOT)(int_bands.vert_repul_at(int_bands.traj, i, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps))))), FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<(j, i)), int_bands.vert_repul_at(int_bands.traj, j, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps)))))), (booleans.IFF(reals.<(i, 0), (FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<=(j, int_bands.MaxN)), int_bands.vert_repul_at(int_bands.traj, j, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps))))))}"))
  (first_nonvert_repul_step_TCC4-1 nil 3631034735
   ("" (subtype-tcc) nil nil) nil nil
   (first_nonvert_repul_step subtype
    "int_bands.first_nonvert_repul_step(int_bands.traj, (number_fields.+)(int_bands.k, 1), int_bands.ts, int_bands.MaxN, int_bands.si, int_bands.vi, int_bands.eps)"
    "{i: integers.int | booleans.AND((booleans.IFF(reals.>=(i, 0), (booleans.AND((booleans.AND(reals.<=(int_bands.k, i), booleans.AND(reals.<=(i, int_bands.MaxN), (booleans.NOT)(int_bands.vert_repul_at(int_bands.traj, i, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps))))), FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<(j, i)), int_bands.vert_repul_at(int_bands.traj, j, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps)))))), (booleans.IFF(reals.<(i, 0), (FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(int_bands.k, j), reals.<=(j, int_bands.MaxN)), int_bands.vert_repul_at(int_bands.traj, j, int_bands.ts, int_bands.si, int_bands.vi, int_bands.eps))))))}")))
 (first_nonvert_repul_step_vert_repul_TCC1 0
  (first_nonvert_repul_step_vert_repul_TCC1-1 nil 3631275834
   ("" (subtype-tcc) nil nil)
   ((- const-decl "Vector" vectors_3D vectors)
    (* const-decl "real" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (/= const-decl "boolean" notequal nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (first_nonvert_repul_step_vert_repul subtype
    "(number_fields.-)(int_bands.j, 1)" "nat")))
 (first_nonvert_repul_step_vert_repul 0
  (first_nonvert_repul_step_vert_repul-3 "" 3794669337
   ("" (skeep)
    (("" (assert)
      (("" (expand "relative_velseq_vel")
        (("" (expand "vertical_repulsive_crit_iterative")
          ((""
            (name "G"
                  "first_nonvert_repul_step(traj, 0, ts, MaxN, si, vi, eps)")
            (("" (replaces -1)
              (("" (label "Gdef" -4)
                (("" (typepred "G")
                  (("" (split +)
                    (("1" (split "Gdef")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (inst - "1")
                            (("1" (assert)
                              (("1"
                                (expand "vert_repul_at")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (hide (-2 -3))
                          (("2" (inst - "1")
                            (("2" (assert)
                              (("2"
                                (expand "vert_repul_at")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (typepred "m")
                        (("2" (split "Gdef")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma
                                   "repulsive_vertical_it.manuever_position_at_def")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst - "MaxN+1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replaces -1 :dir rl)
                                            (("1"
                                              (lemma
                                               "linvel_def_vect3")
                                              (("1"
                                                (insteep
                                                 -1
                                                 :but
                                                 ("MaxN" "j"))
                                                (("1"
                                                  (inst - "MaxN" "m")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split +)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "m")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "vert_repul_at")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         +)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-8
                                                                            3))
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-8
                                                                              3))
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (lemma
                                                                             "repulsive_vertical_it.manuever_position_at_def")
                                                                            (("3"
                                                                              (inst?)
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (lemma
                                                                                   "linvel_def_vect3")
                                                                                  (("3"
                                                                                    (insteep
                                                                                     -1
                                                                                     :but
                                                                                     ("MaxN"
                                                                                      "j"))
                                                                                    (("3"
                                                                                      (inst
                                                                                       -
                                                                                       "MaxN"
                                                                                       "m")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (hide-all-but
                                                                                           (-10
                                                                                            3))
                                                                                          (("3"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "k")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "vert_repul_at")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (-6
                                                                          1))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (lemma
                               "repulsive_vertical_it.manuever_position_at_def")
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst - "MaxN+1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replaces -1 :dir rl)
                                        (("2"
                                          (lemma "linvel_def_vect3")
                                          (("2"
                                            (insteep
                                             -1
                                             :but
                                             ("MaxN" "j"))
                                            (("2"
                                              (inst - "MaxN" "m")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (split +)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst - "m")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "vert_repul_at")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-7
                                                                    2))
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "k")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "vert_repul_at")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-5
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Vector" vectors_3D vectors)
    (vertical_repulsive_crit const-decl "bool" repulsive_vertical_it
     ACCoRD)
    (* const-decl "Vector" vectors_3D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (linvel_def_vect3 formula-decl nil int_bands nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (VelSeq type-eq-decl nil repulsive_vertical_it ACCoRD)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (linvel const-decl "Vect3" int_bands nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (manuever_position_at_def formula-decl nil repulsive_vertical_it
     ACCoRD)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subrange type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Traj type-eq-decl nil int_bands nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vert_repul_at const-decl "bool" int_bands nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (first_nonvert_repul_step def-decl "{i: int |
   (i >= 0 IFF
     ((k <= i AND
        i <= MaxN AND NOT vert_repul_at(traj, i, ts, si, vi, eps))
       AND
       (FORALL (j: nat):
          k <= j AND j < i IMPLIES
           vert_repul_at(traj, j, ts, si, vi, eps))))
    AND
    (i < 0 IFF
      (FORALL (j: nat):
         k <= j AND j <= MaxN IMPLIES
          vert_repul_at(traj, j, ts, si, vi, eps)))}" int_bands nil)
    (vertical_repulsive_crit_iterative const-decl "bool"
     repulsive_vertical_it ACCoRD)
    (relative_velseq_vel const-decl "Vect3" repulsive_vertical_it
     ACCoRD)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak)
  (first_nonvert_repul_step_vert_repul-2 nil 3631277821
   ("" (skeep)
    (("" (assert)
      (("" (expand "relative_velseq_vel")
        (("" (expand "vertical_repulsive_crit_iterative")
          ((""
            (name "G"
                  "first_nonvert_repul_step(traj, 0, ts, MaxN, si, vi, eps)")
            (("" (replaces -1)
              (("" (label "Gdef" -4)
                (("" (typepred "G")
                  (("" (split +)
                    (("1" (split "Gdef")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (inst - "1")
                            (("1" (assert)
                              (("1"
                                (expand "vert_repul_at")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (hide (-2 -3))
                          (("2" (inst - "1")
                            (("2" (assert)
                              (("2"
                                (expand "vert_repul_at")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (typepred "m")
                        (("2" (split "Gdef")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma
                                   "repulsive_vertical_it.manuever_position_at_def")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst - "MaxN+1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replaces -1 :dir rl)
                                            (("1"
                                              (lemma
                                               "linvel_def_vect3")
                                              (("1"
                                                (insteep
                                                 -1
                                                 :but
                                                 ("MaxN" "j"))
                                                (("1"
                                                  (inst - "MaxN" "m")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split +)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "m")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "vert_repul_at")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         +)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-8
                                                                            3))
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-8
                                                                              3))
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (lemma
                                                                             "repulsive_vertical_it.manuever_position_at_def")
                                                                            (("3"
                                                                              (inst?)
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (replaces
                                                                                   -1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("3"
                                                                                    (lemma
                                                                                     "linvel_def_vect3")
                                                                                    (("3"
                                                                                      (insteep
                                                                                       -1
                                                                                       :but
                                                                                       ("MaxN"
                                                                                        "j"))
                                                                                      (("3"
                                                                                        (inst
                                                                                         -
                                                                                         "MaxN"
                                                                                         "m")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("3"
                                                                                              (hide-all-but
                                                                                               (-10
                                                                                                3))
                                                                                              (("3"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "k")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "vert_repul_at")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (-6
                                                                          1))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (lemma
                               "repulsive_vertical_it.manuever_position_at_def")
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst - "MaxN+1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replaces -1 :dir rl)
                                        (("2"
                                          (lemma "linvel_def_vect3")
                                          (("2"
                                            (insteep
                                             -1
                                             :but
                                             ("MaxN" "j"))
                                            (("2"
                                              (inst - "MaxN" "m")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (split +)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst - "m")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "vert_repul_at")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-7
                                                                    2))
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "k")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "vert_repul_at")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-5
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vertical_repulsive_crit_iterative const-decl "bool"
     repulsive_vertical_it ACCoRD)
    (manuever_position_at_def formula-decl nil repulsive_vertical_it
     ACCoRD)
    (+ const-decl "Vector" vectors_3D vectors)
    (vertical_repulsive_crit const-decl "bool" repulsive_vertical_it
     ACCoRD)
    (* const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (VelSeq type-eq-decl nil repulsive_vertical_it ACCoRD)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Sign type-eq-decl nil sign reals)
    (relative_velseq_vel const-decl "Vect3" repulsive_vertical_it
     ACCoRD))
   nil)
  (first_nonvert_repul_step_vert_repul-1 nil 3631277483
   ("" (skeep)
    (("" (assert)
      (("" (expand "relative_velseq_vel")
        (("" (expand "repulsive_criteria_iterative")
          ((""
            (name "G"
                  "first_nonrepulsive_step(traj, 0, ts, MaxN, si, vi, eps)")
            (("" (replaces -1)
              (("" (label "Gdef" -3)
                (("" (typepred "G")
                  (("" (split +)
                    (("1" (split "Gdef")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (inst - "0")
                            (("1" (assert)
                              (("1"
                                (expand "repulsive_at" -3)
                                (("1" (propax) nil)))))))))))
                       ("2" (assert)
                        (("2" (hide (-2 -3))
                          (("2" (inst - "0")
                            (("2" (assert)
                              (("2"
                                (expand "repulsive_at" -2)
                                (("2" (propax) nil)))))))))))))
                     ("2" (skeep)
                      (("2" (typepred "m")
                        (("2" (split "Gdef")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma
                                   "repulsive_iterative.manuever_position_at_def")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst - "MaxN+1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replaces -1 :dir rl)
                                            (("1"
                                              (lemma
                                               "linvel_def_vect2_3")
                                              (("1"
                                                (insteep
                                                 -1
                                                 :but
                                                 ("MaxN" "j"))
                                                (("1"
                                                  (inst - "MaxN" "m")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "NOT (LAMBDA (i: posnat):
                                        IF i - 1 /= k
                                          THEN vect2(linvel(traj, ts, i - 1))
                                        ELSE vect2(traj(k * ts)`2)
                                        ENDIF
                                         - vect2(vi)) = (LAMBDA
                                                         (x: posnat):
                                                         vect2
                                                         (IF x - 1 /= k
                                                          THEN linvel(traj, ts, x - 1)
                                                          ELSE traj(k * ts)`2
                                                          ENDIF
                                                          -
                                                          vi))")
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (decompose-equality)
                                                          (("1"
                                                            (grind)
                                                            nil)))))
                                                       ("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "m")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "repulsive_at"
                                                                       -)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-7
                                                                              2))
                                                                            (("1"
                                                                              (grind
                                                                               :exclude
                                                                               "repulsive_criteria")
                                                                              nil)))))))))))))))
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "k")
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "repulsive_at"
                                                                         -)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-5
                                                                              1))
                                                                            (("2"
                                                                              (grind
                                                                               :exclude
                                                                               "repulsive_criteria")
                                                                              nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                           ("2" (assert)
                            (("2"
                              (lemma
                               "repulsive_iterative.manuever_position_at_def")
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst - "MaxN+1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replaces -1 :dir rl)
                                        (("2"
                                          (lemma "linvel_def_vect2_3")
                                          (("2"
                                            (insteep
                                             -1
                                             :but
                                             ("MaxN" "j"))
                                            (("2"
                                              (inst - "MaxN" "m")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case
                                                   "NOT (LAMBDA (i: posnat):
                                        IF i - 1 /= k
                                          THEN vect2(linvel(traj, ts, i - 1))
                                        ELSE vect2(traj(k * ts)`2)
                                        ENDIF
                                         - vect2(vi)) = (LAMBDA
                                                         (x: posnat):
                                                         vect2
                                                         (IF x - 1 /= k
                                                          THEN linvel(traj, ts, x - 1)
                                                          ELSE traj(k * ts)`2
                                                          ENDIF
                                                          -
                                                          vi))")
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (decompose-equality)
                                                      (("1"
                                                        (grind)
                                                        nil)))))
                                                   ("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (split +)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "m")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "repulsive_at")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-6
                                                                        2))
                                                                      (("1"
                                                                        (grind
                                                                         :exclude
                                                                         "repulsive_criteria")
                                                                        nil)))))))))))))
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "k")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "repulsive_at")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (-4
                                                                          1))
                                                                        (("2"
                                                                          (grind
                                                                           :exclude
                                                                           "repulsive_criteria")
                                                                          nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil))
 (remove_last_int_TCC1 0
  (remove_last_int_TCC1-1 nil 3637660214
   ("" (skeep)
    (("" (lemma "length_reverse[IntBand]")
      (("" (inst?) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (length_reverse formula-decl nil list_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (IntBand type-eq-decl nil int_bands nil))
   nil
   (remove_last_int subtype "list_props[IntBand].reverse(int_bands.L)"
    "(list_adt[IntBand].cons?)")))
 (length_remove_last_int 0
  (length_remove_last_int-1 nil 3637660271
   ("" (skeep)
    (("" (expand "remove_last_int")
      (("" (lift-if)
        (("" (assert)
          (("" (ground)
            (("" (rewrite "length_reverse")
              (("" (lemma "length_reverse[IntBand]")
                (("" (inst - "L")
                  (("" (replaces -1 :dir rl)
                    (("" (expand "length" 2 2)
                      (("" (lift-if)
                        (("" (ground)
                          (("" (hide 1)
                            (("" (grind :exclude "reverse") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int nonempty-type-eq-decl nil integers nil)
    (reverse def-decl "list[T]" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (length_reverse formula-decl nil list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (max_0_nnreal formula-decl nil min_max reals)
    (max_0_npreal formula-decl nil min_max reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (remove_last_int const-decl "list[IntBand]" int_bands nil))
   nil))
 (remove_last_int_def_TCC1 0
  (remove_last_int_def_TCC1-1 nil 3637660214
   ("" (skeep*)
    (("" (rewrite "length_remove_last_int")
      (("" (grind :exclude "length") nil nil)) nil))
    nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list type-decl nil list_adt nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int nonempty-type-eq-decl nil integers nil)
    (length_remove_last_int formula-decl nil int_bands nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (remove_last_int_def subtype "int_bands.j"
    "below[length[IntBand](remove_last_int(L))]")))
 (remove_last_int_def_TCC2 0
  (remove_last_int_def_TCC2-1 nil 3637660214 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (remove_last_int_def subtype "int_bands.j"
    "below[length[IntBand](L)]")))
 (remove_last_int_def 0
  (remove_last_int_def-2 "" 3794669338
   ("" (skeep)
    (("" (skeep)
      ((""
        (case "NOT length[IntBand](cdr(L)) = length(cdr(reverse(L)))")
        (("1" (case "NOT length[IntBand](L) = length(reverse(L))")
          (("1" (rewrite "length_reverse") nil nil)
           ("2" (expand "length" -1)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (ground)
                  (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "remove_last_int")
          (("2" (lift-if)
            (("2" (assert)
              (("2" (rewrite "reverse_def")
                (("1"
                  (case "FORALL (rl:list[IntBand],j:nat): j<length(rl)-1 IMPLIES nth(cdr(rl),j)=nth(rl,j+1)")
                  (("1" (rewrite -1 1)
                    (("1" (rewrite "reverse_def")
                      (("1" (expand "length" 1 1)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (split +)
                              (("1"
                                (flatten)
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "length_reverse[IntBand]")
                        (("2" (inst - "L")
                          (("2" (expand "length" -1)
                            (("2" (lift-if)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split -)
                                  (("1"
                                    (flatten)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (split -)
                                        (("1"
                                          (flatten)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (both-sides "-" "1" -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (rewrite
                                                   "reverse_def"
                                                   4)
                                                  (("1"
                                                    (case
                                                     "NOT length(L) = length(cdr(L))+1")
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       +
                                                       1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1 4)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "length"
                                                     +
                                                     2)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3"
                        (case "NOT length(cdr(reverse(L))) = length(reverse(L))-1")
                        (("1" (expand "length" + 2)
                          (("1" (lift-if)
                            (("1" (ground)
                              (("1"
                                (hide-all-but (-1 -4))
                                (("1"
                                  (lemma "length_reverse[IntBand]")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (grind :exclude "reverse")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replaces -1 +)
                          (("2" (rewrite "length_reverse" 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "length" + 2)
                      (("2" (lift-if)
                        (("2" (ground)
                          (("2" (hide-all-but (-1 -4))
                            (("2" (lemma "length_reverse[IntBand]")
                              (("2"
                                (inst?)
                                (("2"
                                  (grind :exclude "reverse")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3"
                      (case "NOT length(cdr(reverse(L))) = length(reverse(L))-1")
                      (("1" (expand "length" + 2)
                        (("1" (lift-if)
                          (("1" (ground)
                            (("1" (hide-all-but (-1 -3))
                              (("1"
                                (lemma "length_reverse[IntBand]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (grind :exclude "reverse")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (replaces -1)
                          (("2" (rewrite "length_reverse" 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (skeep)
                      (("2" (expand "nth" + 2) (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep) (("3" (assert) nil nil)) nil)
                   ("4" (skeep)
                    (("4" (expand "length" -1)
                      (("4" (lift-if) (("4" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (expand "length" -3)
                  (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (lemma "length_reverse[IntBand]")
          (("3" (inst?)
            (("3" (hide 2) (("3" (grind :exclude "reverse") nil nil))
              nil))
            nil))
          nil)
         ("4" (hide 2) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (TRUE const-decl "bool" booleans nil)
    (odd? const-decl "bool" integers nil)
    (> const-decl "bool" reals nil)
    (j skolem-const-decl "nat" int_bands nil)
    (L skolem-const-decl "list[IntBand]" int_bands nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (reverse_def formula-decl nil more_list_props structures)
    (remove_last_int const-decl "list[IntBand]" int_bands nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_reverse formula-decl nil list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int nonempty-type-eq-decl nil integers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (reverse def-decl "list[T]" list_props nil))
   shostak)
  (remove_last_int_def-1 nil 3637660236
   ("" (skeep)
    (("" (skeep)
      ((""
        (case "NOT length[IntBand](cdr(L)) = length(cdr(reverse(L)))")
        (("1" (case "NOT length[IntBand](L) = length(reverse(L))")
          (("1" (rewrite "length_reverse") nil nil)
           ("2" (expand "length" -1)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (replaces -1)
                  (("2" (ground)
                    (("2" (lift-if) (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "remove_last_int")
          (("2" (lift-if)
            (("2" (assert)
              (("2" (rewrite "reverse_def")
                (("1"
                  (case "FORALL (rl:list[IntBand],j:nat): j<length(rl)-1 IMPLIES nth(cdr(rl),j)=nth(rl,j+1)")
                  (("1" (rewrite -1 1)
                    (("1" (rewrite "reverse_def")
                      (("1" (expand "length" 1 1)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (split +)
                              (("1"
                                (flatten)
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "length_reverse[IntBand]")
                        (("2" (inst - "L")
                          (("2" (expand "length" -1)
                            (("2" (lift-if)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split -)
                                  (("1"
                                    (flatten)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (split -)
                                        (("1"
                                          (flatten)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (both-sides "-" "1" -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (rewrite
                                                   "reverse_def"
                                                   4)
                                                  (("1"
                                                    (case
                                                     "NOT length(L) = length(cdr(L))+1")
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       +
                                                       1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1 4)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "length"
                                                     +
                                                     2)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3"
                        (case "NOT length(cdr(reverse(L))) = length(reverse(L))-1")
                        (("1" (expand "length" + 2)
                          (("1" (lift-if)
                            (("1" (ground)
                              (("1"
                                (hide-all-but (-1 -4))
                                (("1"
                                  (lemma "length_reverse[IntBand]")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (grind :exclude "reverse")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replaces -1 +)
                          (("2" (rewrite "length_reverse" 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "length" + 2)
                      (("2" (lift-if)
                        (("2" (ground)
                          (("2" (hide-all-but (-1 -4))
                            (("2" (lemma "length_reverse[IntBand]")
                              (("2"
                                (inst?)
                                (("2"
                                  (grind :exclude "reverse")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3"
                      (case "NOT length(cdr(reverse(L))) = length(reverse(L))-1")
                      (("1" (expand "length" + 2)
                        (("1" (lift-if)
                          (("1" (ground)
                            (("1" (hide-all-but (-1 -3))
                              (("1"
                                (lemma "length_reverse[IntBand]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (grind :exclude "reverse")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (replaces -1)
                          (("2" (rewrite "length_reverse" 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (skeep)
                      (("2" (expand "nth" + 2) (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep) (("3" (assert) nil nil)) nil)
                   ("4" (skeep)
                    (("4" (expand "length" -1)
                      (("4" (lift-if) (("4" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (expand "length" -3)
                  (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (lemma "length_reverse[IntBand]")
          (("3" (inst?)
            (("3" (hide 2) (("3" (grind :exclude "reverse") nil nil))
              nil))
            nil))
          nil)
         ("4" (hide 2) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((reverse_def formula-decl nil more_list_props structures)) nil))
 (append_intband_spec_TCC1 0
  (append_intband_spec_TCC1-1 nil 3637661772 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (append_intband_spec subtype "0" "below[length[IntBand](L2)]")))
 (append_intband_spec_TCC2 0
  (append_intband_spec_TCC2-1 nil 3637661772 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (append_intband_spec subtype
    "(number_fields.-)(list_props[IntBand].length(int_bands.L1), 1)"
    "below[length[IntBand](L1)]")))
 (append_intband_spec_TCC3 0
  (append_intband_spec_TCC3-1 nil 3637661772
   ("" (skeep*) (("" (grind) nil nil)) nil)
   ((length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (append_intband_spec subtype "int_bands.L2"
    "(list_adt[IntBand].cons?)")))
 (append_intband_spec_length 0
  (append_intband_spec_length-1 nil 3637663957
   ("" (skeep)
    (("" (expand "append_intband_spec")
      (("" (lift-if)
        (("" (split +)
          (("1" (flatten)
            (("1" (rewrite "length_append")
              (("1" (rewrite "length_append")
                (("1" (rewrite "length_remove_last_int")
                  (("1" (expand "length" + 4)
                    (("1" (assert)
                      (("1" (lift-if +)
                        (("1" (split +)
                          (("1" (grind) nil nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten) (("2" (rewrite "length_append") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (max_0_nnreal formula-decl nil min_max reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_remove_last_int formula-decl nil int_bands nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int nonempty-type-eq-decl nil integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (remove_last_int const-decl "list[IntBand]" int_bands nil)
    (append def-decl "list[T]" list_props nil)
    (list type-decl nil list_adt nil)
    (length_append formula-decl nil list_props nil)
    (append_intband_spec const-decl "list[IntBand]" int_bands nil))
   shostak))
 (append_intband_spec_def 0
  (append_intband_spec_def-2 "" 3794669344
   ("" (skeep)
    (("" (skoletin 1)
      (("" (lemma "append_intband_spec_length")
        (("" (insteep -)
          (("" (replace -2 :dir rl)
            (("" (assert)
              (("" (case "NOT strictly_increasing_int?(AIS)")
                (("1" (hide 2)
                  (("1" (expand "append_intband_spec")
                    (("1" (lift-if)
                      (("1" (split -)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "strictly_increasing_int?")
                              (("1"
                                (flatten)
                                (("1"
                                  (split +)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (typepred "i")
                                      (("1"
                                        (replaces -6 +)
                                        (("1"
                                          (rewrite "nth_append" +)
                                          (("1"
                                            (rewrite "length_append" +)
                                            (("1"
                                              (rewrite
                                               "length_remove_last_int")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (rewrite
                                                       "nth_append"
                                                       +)
                                                      (("1"
                                                        (rewrite
                                                         "length_remove_last_int")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (lemma
                                                                 "remove_last_int_def")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "i")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "i")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "NOT i = length(L1)-1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       2
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "nth"
                                                                         2
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "length(L1)-1")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "0")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "length_remove_last_int"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -7)
                                                      (("2"
                                                        (hide -6)
                                                        (("2"
                                                          (inst
                                                           -
                                                           "i-length(L1)+1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "nth"
                                                               -6)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (rewrite
                                               "length_append"
                                               1)
                                              (("2"
                                                (rewrite
                                                 "length_remove_last_int"
                                                 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -5
                                                     3)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split -)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (replaces -6 +)
                                      (("2"
                                        (rewrite "nth_append" +)
                                        (("1"
                                          (rewrite "length_append")
                                          (("1"
                                            (rewrite
                                             "length_remove_last_int"
                                             1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split +)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (rewrite
                                                       "nth_append"
                                                       +)
                                                      (("1"
                                                        (rewrite
                                                         "length_remove_last_int"
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (rewrite
                                                                   "nth_append"
                                                                   +)
                                                                  (("1"
                                                                    (lift-if
                                                                     +)
                                                                    (("1"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_remove_last_int"
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             +)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "nth_append"
                                                                                 +)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "length_remove_last_int"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "remove_last_int_def")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "L1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (inst-cp
                                                                                                   -
                                                                                                   "i")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "i"
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (case
                                                                                             "NOT j = length(L1)-1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   2
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "remove_last_int_def")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "i"
                                                                                                                 "length(L1)-1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (rewrite
                                                                                   "length_remove_last_int"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "remove_last_int_def")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "i"
                                                                                               "length(L1)-1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "length(L1)-1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "0"
                                                                                                       "j-length(L1)+1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "nth"
                                                                                                           -11
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "0")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "length_append"
                                                                     1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_remove_last_int"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "remove_last_int_def")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "i")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "j")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -8)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "length"
                                                                                           -1
                                                                                           2)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   +
                                                                   1)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite
                                                                         "nth_append"
                                                                         +)
                                                                        (("1"
                                                                          (rewrite
                                                                           "length_append"
                                                                           +)
                                                                          (("1"
                                                                            (rewrite
                                                                             "length_remove_last_int")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -10
                                                                                 "0"
                                                                                 "j-length(L1)+1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth"
                                                                                     -10
                                                                                     2)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           3)
                                                                          (("2"
                                                                            (rewrite
                                                                             "length_append"
                                                                             +)
                                                                            (("2"
                                                                              (rewrite
                                                                               "length_remove_last_int")
                                                                              (("2"
                                                                                (typepred
                                                                                 "j")
                                                                                (("2"
                                                                                  (replace
                                                                                   -7)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "length"
                                                                                     -1
                                                                                     2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (rewrite
                                                           "length_remove_last_int")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (rewrite
                                                       "nth_append"
                                                       +)
                                                      (("1"
                                                        (rewrite
                                                         "length_append"
                                                         +)
                                                        (("1"
                                                          (rewrite
                                                           "length_remove_last_int")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -9
                                                               "i-length(L1)+1"
                                                               "j-length(L1)+1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -9)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "length_append"
                                                         1)
                                                        (("2"
                                                          (rewrite
                                                           "length_remove_last_int")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (typepred
                                                               "j")
                                                              (("2"
                                                                (replace
                                                                 -6)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -1
                                                                   2)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "length_append" 1)
                                          (("2"
                                            (rewrite
                                             "length_remove_last_int")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (typepred "i")
                                                (("2"
                                                  (replace -6)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1
                                                     2)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replace 1)
                            (("2" (case "length(L1)=0 OR length(L2)=0")
                              (("1"
                                (split)
                                (("1"
                                  (case "L1=null")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (case "AIS = L2")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (replace -3 1)
                                        (("2"
                                          (lemma
                                           "append_null[IntBand]")
                                          (("2"
                                            (expand "append" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (case "L2 = null")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (replace -4 +)
                                      (("1"
                                        (rewrite "append_null" +)
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split -)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand
                                       "strictly_increasing_int?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (replace -3 +)
                                              (("1"
                                                (rewrite "nth_append")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (inst - "i")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       -6
                                                       "i-length(L1)")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (replace -4 1)
                                                (("2"
                                                  (rewrite
                                                   "nth_append"
                                                   1)
                                                  (("2"
                                                    (rewrite
                                                     "nth_append"
                                                     1)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "i"
                                                                 "j")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "i"
                                                                 "length(L1)-1")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "length(L1)-1")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "0")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "0"
                                                                       "j-length(L1)")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (inst
                                                                 -8
                                                                 "i-length(L1)"
                                                                 "j-length(L1)")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (lift-if)
                    (("2" (split -)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "append_intband_spec")
                            (("1" (skeep)
                              (("1"
                                (ground)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (replace -8 -2)
                                    (("1"
                                      (rewrite "nth_append")
                                      (("1"
                                        (rewrite "length_append")
                                        (("1"
                                          (rewrite
                                           "length_remove_last_int")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (rewrite
                                                   "nth_append")
                                                  (("1"
                                                    (rewrite
                                                     "length_remove_last_int")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "remove_last_int_def")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (inst?
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (case
                                                               "k<=nth(L1,length(L1)-1)`ub")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "length(L1)-1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "in?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -2
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 4
                                                                 "0")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "in?")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "length_remove_last_int")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst
                                                   3
                                                   "j-length(L1)+1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "nth"
                                                       3
                                                       1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "length_append" 1)
                                        (("2"
                                          (rewrite
                                           "length_remove_last_int")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "length" -6 3)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst + "j")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -8 +)
                                        (("2"
                                          (rewrite "nth_append")
                                          (("1"
                                            (rewrite "length_append" 1)
                                            (("1"
                                              (rewrite
                                               "length_remove_last_int")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "nth_append")
                                                  (("1"
                                                    (rewrite
                                                     "length_remove_last_int")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split +)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "remove_last_int_def")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "j")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "nth"
                                                               +
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   -7)
                                                                  (("2"
                                                                    (expand
                                                                     "strictly_increasing_int?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst
                                                                         -10
                                                                         "0")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "length(L1)-1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "in?")
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "length_remove_last_int")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "length_append")
                                            (("2"
                                              (rewrite
                                               "length_remove_last_int")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skeep)
                                  (("3"
                                    (inst + "length(L1)-1+j")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (replace -8 +)
                                        (("3"
                                          (rewrite "nth_append" +)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (rewrite "length_append")
                                              (("1"
                                                (rewrite
                                                 "length_remove_last_int")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split +)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "nth_append"
                                                           +)
                                                          (("1"
                                                            (rewrite
                                                             "length_remove_last_int")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "NOT j = 0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     +
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -8)
                                                                        (("2"
                                                                          (expand
                                                                           "strictly_increasing_int?")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "length(L1)-1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "in?")
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "length_remove_last_int")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "nth"
                                                           -2)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "length_append" 1)
                                            (("2"
                                              (rewrite
                                               "length_remove_last_int")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "length"
                                                   -6
                                                   3)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "append_intband_spec")
                          (("2" (replace 1)
                            (("2" (case "length(L1)=0 OR length(L2)=0")
                              (("1"
                                (case "L1=null OR L2=null")
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (split -)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (case "NOT AIS = L2")
                                        (("1"
                                          (replace -4)
                                          (("1"
                                            (expand "append" 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1)
                                      (("2"
                                        (rewrite "append_null")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -4)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-1 1))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide -6)
                                    (("2"
                                      (replace -3 +)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (ground)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (rewrite
                                                 "length_append"
                                                 -1)
                                                (("1"
                                                  (rewrite
                                                   "nth_append"
                                                   -)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst? 3)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (inst + "j")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite
                                                     "nth_append"
                                                     +)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep)
                                              (("3"
                                                (inst + "length(L1)+j")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (rewrite
                                                     "nth_append")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (append_null formula-decl nil list_props nil)
    (length_null formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (remove_last_int_def formula-decl nil int_bands nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (max_0_nnreal formula-decl nil min_max reals)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_remove_last_int formula-decl nil int_bands nil)
    (length_singleton formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_append formula-decl nil more_list_props structures)
    (append def-decl "list[T]" list_props nil)
    (remove_last_int const-decl "list[IntBand]" int_bands nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (append_intband_spec_length formula-decl nil int_bands nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (strictly_increasing_int? const-decl "bool" int_bands nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (in? const-decl "bool" int_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (append_intband_spec const-decl "list[IntBand]" int_bands nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)
  (append_intband_spec_def-1 nil 3637663358
   ("" (skeep)
    (("" (skoletin 1)
      (("" (lemma "append_intband_spec_length")
        (("" (insteep -)
          (("" (replace -2 :dir rl)
            (("" (assert)
              (("" (case "NOT strictly_increasing_int?(AIS)")
                (("1" (hide 2)
                  (("1" (expand "append_intband_spec")
                    (("1" (lift-if)
                      (("1" (split -)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "strictly_increasing_int?")
                              (("1"
                                (flatten)
                                (("1"
                                  (split +)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (typepred "i")
                                      (("1"
                                        (replaces -6 +)
                                        (("1"
                                          (rewrite "nth_append" +)
                                          (("1"
                                            (rewrite "length_append" +)
                                            (("1"
                                              (rewrite
                                               "length_remove_last_int")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (rewrite
                                                       "nth_append"
                                                       +)
                                                      (("1"
                                                        (rewrite
                                                         "length_remove_last_int")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (lemma
                                                                 "remove_last_int_def")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "i")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "i")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "NOT i = length(L1)-1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       2
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "nth"
                                                                         2
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "length(L1)-1")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "0")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "length_remove_last_int"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -7)
                                                      (("2"
                                                        (hide -6)
                                                        (("2"
                                                          (inst
                                                           -
                                                           "i-length(L1)+1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "nth"
                                                               -6)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (rewrite
                                               "length_append"
                                               1)
                                              (("2"
                                                (rewrite
                                                 "length_remove_last_int"
                                                 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -5
                                                     3)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (split -)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (replaces -6 +)
                                      (("2"
                                        (rewrite "nth_append" +)
                                        (("1"
                                          (rewrite "length_append")
                                          (("1"
                                            (rewrite
                                             "length_remove_last_int"
                                             1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split +)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (rewrite
                                                       "nth_append"
                                                       +)
                                                      (("1"
                                                        (rewrite
                                                         "length_remove_last_int"
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (rewrite
                                                                   "nth_append"
                                                                   +)
                                                                  (("1"
                                                                    (lift-if
                                                                     +)
                                                                    (("1"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_remove_last_int"
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             +)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "nth_append"
                                                                                 +)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "length_remove_last_int"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "remove_last_int_def")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "L1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (inst-cp
                                                                                                   -
                                                                                                   "i")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "i"
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (case
                                                                                             "NOT j = length(L1)-1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   2
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "remove_last_int_def")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "i"
                                                                                                                 "length(L1)-1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (rewrite
                                                                                   "length_remove_last_int"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "remove_last_int_def")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "i"
                                                                                               "length(L1)-1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "length(L1)-1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "0"
                                                                                                       "j-length(L1)+1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "nth"
                                                                                                           -11
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "0")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "length_append"
                                                                     1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_remove_last_int"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "remove_last_int_def")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "i")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "j")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -8)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "length"
                                                                                           -1
                                                                                           2)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   +
                                                                   1)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite
                                                                         "nth_append"
                                                                         +)
                                                                        (("1"
                                                                          (rewrite
                                                                           "length_append"
                                                                           +)
                                                                          (("1"
                                                                            (rewrite
                                                                             "length_remove_last_int")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -10
                                                                                 "0"
                                                                                 "j-length(L1)+1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth"
                                                                                     -10
                                                                                     2)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           3)
                                                                          (("2"
                                                                            (rewrite
                                                                             "length_append"
                                                                             +)
                                                                            (("2"
                                                                              (rewrite
                                                                               "length_remove_last_int")
                                                                              (("2"
                                                                                (typepred
                                                                                 "j")
                                                                                (("2"
                                                                                  (replace
                                                                                   -7)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "length"
                                                                                     -1
                                                                                     2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (rewrite
                                                           "length_remove_last_int")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (rewrite
                                                       "nth_append"
                                                       +)
                                                      (("1"
                                                        (rewrite
                                                         "length_append"
                                                         +)
                                                        (("1"
                                                          (rewrite
                                                           "length_remove_last_int")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -9
                                                               "i-length(L1)+1"
                                                               "j-length(L1)+1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -9)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "length_append"
                                                         1)
                                                        (("2"
                                                          (rewrite
                                                           "length_remove_last_int")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (typepred
                                                               "j")
                                                              (("2"
                                                                (replace
                                                                 -6)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -1
                                                                   2)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "length_append" 1)
                                          (("2"
                                            (rewrite
                                             "length_remove_last_int")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (typepred "i")
                                                (("2"
                                                  (replace -6)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1
                                                     2)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replace 1)
                            (("2" (case "length(L1)=0 OR length(L2)=0")
                              (("1"
                                (split)
                                (("1"
                                  (case "L1=null")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (case "AIS = L2")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (replace -3 1)
                                        (("2"
                                          (lemma
                                           "append_null[IntBand]")
                                          (("2"
                                            (expand "append" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (case "L2 = null")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (replace -4 +)
                                      (("1"
                                        (rewrite "append_null" +)
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split -)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand
                                       "strictly_increasing_int?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (replace -3 +)
                                              (("1"
                                                (rewrite "nth_append")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (inst - "i")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       -6
                                                       "i-length(L1)")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (replace -4 1)
                                                (("2"
                                                  (rewrite
                                                   "nth_append"
                                                   1)
                                                  (("2"
                                                    (rewrite
                                                     "nth_append"
                                                     1)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "i"
                                                                 "j")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "i"
                                                                 "length(L1)-1")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "length(L1)-1")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "0")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "0"
                                                                       "j-length(L1)")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (inst
                                                                 -8
                                                                 "i-length(L1)"
                                                                 "j-length(L1)")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (lift-if)
                    (("2" (split -)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "append_intband_spec")
                            (("1" (skeep)
                              (("1"
                                (ground)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (replace -8 -2)
                                    (("1"
                                      (rewrite "nth_append")
                                      (("1"
                                        (rewrite "length_append")
                                        (("1"
                                          (rewrite
                                           "length_remove_last_int")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (rewrite
                                                   "nth_append")
                                                  (("1"
                                                    (rewrite
                                                     "length_remove_last_int")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "remove_last_int_def")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (inst?
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (case
                                                               "k<=nth(L1,length(L1)-1)`ub")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "length(L1)-1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "in?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -2
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 4
                                                                 "0")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "in?")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "length_remove_last_int")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst
                                                   3
                                                   "j-length(L1)+1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "nth"
                                                       3
                                                       1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "length_append" 1)
                                        (("2"
                                          (rewrite
                                           "length_remove_last_int")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "length" -6 3)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst + "j")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -8 +)
                                        (("2"
                                          (rewrite "nth_append")
                                          (("1"
                                            (rewrite "length_append" 1)
                                            (("1"
                                              (rewrite
                                               "length_remove_last_int")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "nth_append")
                                                  (("1"
                                                    (rewrite
                                                     "length_remove_last_int")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split +)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "remove_last_int_def")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "j")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "nth"
                                                               +
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   -7)
                                                                  (("2"
                                                                    (expand
                                                                     "strictly_increasing_int?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst
                                                                         -10
                                                                         "0")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "length(L1)-1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "in?")
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "length_remove_last_int")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "length_append")
                                            (("2"
                                              (rewrite
                                               "length_remove_last_int")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skeep)
                                  (("3"
                                    (inst + "length(L1)-1+j")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (replace -8 +)
                                        (("3"
                                          (rewrite "nth_append" +)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (rewrite "length_append")
                                              (("1"
                                                (rewrite
                                                 "length_remove_last_int")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split +)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "nth_append"
                                                           +)
                                                          (("1"
                                                            (rewrite
                                                             "length_remove_last_int")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "NOT j = 0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     +
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -8)
                                                                        (("2"
                                                                          (expand
                                                                           "strictly_increasing_int?")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "length(L1)-1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "in?")
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "length_remove_last_int")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "nth"
                                                           -2)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "length_append" 1)
                                            (("2"
                                              (rewrite
                                               "length_remove_last_int")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "length"
                                                   -6
                                                   3)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "append_intband_spec")
                          (("2" (replace 1)
                            (("2" (case "length(L1)=0 OR length(L2)=0")
                              (("1"
                                (case "L1=null OR L2=null")
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (split -)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (case "NOT AIS = L2")
                                        (("1"
                                          (replace -4)
                                          (("1"
                                            (expand "append" 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1)
                                      (("2"
                                        (rewrite "append_null")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -4)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-1 1))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide -6)
                                    (("2"
                                      (replace -3 +)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (ground)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (rewrite
                                                 "length_append"
                                                 -1)
                                                (("1"
                                                  (rewrite
                                                   "nth_append"
                                                   -)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst? 3)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (inst + "j")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite
                                                     "nth_append"
                                                     +)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep)
                                              (("3"
                                                (inst + "length(L1)+j")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (rewrite
                                                     "nth_append")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_null formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures)
    (max_0_nnreal formula-decl nil min_max reals)
    (length_singleton formula-decl nil more_list_props structures))
   shostak))
 (append_intband_spec_connected_TCC1 0
  (append_intband_spec_connected_TCC1-1 nil 3637672064
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (append_intband_spec_connected subtype "int_bands.j"
    "below[length[IntBand](L1)]")))
 (append_intband_spec_connected_TCC2 0
  (append_intband_spec_connected_TCC2-1 nil 3637672064
   ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (append_intband_spec_connected subtype "int_bands.j"
    "below[length[IntBand](L2)]")))
 (append_intband_spec_connected_TCC3 0
  (append_intband_spec_connected_TCC3-1 nil 3637672064
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strictly_increasing_int? const-decl "bool" int_bands nil))
   nil
   (append_intband_spec_connected subtype "int_bands.j"
    "below[length[IntBand](AIS)]")))
 (append_intband_spec_connected 0
  (append_intband_spec_connected-3 "" 3794669348
   ("" (skeep)
    (("" (label "i1" -4)
      (("" (label "i2" -5)
        (("" (case "length(L1) = 0 OR length(L2) = 0")
          (("1" (case "L1=null OR L2=null")
            (("1" (skoletin 1)
              (("1" (case "AIS = L1 OR AIS = L2")
                (("1" (hide (-3 -4))
                  (("1" (ground)
                    (("1" (replace -2) (("1" (propax) nil nil)) nil)
                     ("2" (replace -1) (("2" (propax) nil nil)) nil)
                     ("3" (replace -2) (("3" (propax) nil nil)) nil)
                     ("4" (replace -1) (("4" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (split -)
                  (("1" (expand "append_intband_spec")
                    (("1" (replace -1)
                      (("1" (assert)
                        (("1" (expand "append" -2)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (expand "append_intband_spec")
                      (("2" (assert)
                        (("2" (rewrite "append_null")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (skoletin 3)
              (("2" (assert)
                (("2" (skeep)
                  (("2" (lemma "append_intband_spec_length")
                    (("2" (insteep -)
                      (("2" (assert)
                        (("2" (replace -4 :dir rl)
                          (("2" (expand "append_intband_spec")
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("1"
                                  (replace -2 +)
                                  (("1"
                                    (rewrite "nth_append")
                                    (("1"
                                      (rewrite "length_append")
                                      (("1"
                                        (rewrite
                                         "length_remove_last_int")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (rewrite "nth_append")
                                                (("1"
                                                  (rewrite
                                                   "length_remove_last_int")
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (lemma
                                                         "remove_last_int_def")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "k")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_append"
                                                                     +)
                                                                    (("1"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_remove_last_int")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (rewrite
                                                                             "nth_append"
                                                                             +)
                                                                            (("1"
                                                                              (rewrite
                                                                               "length_remove_last_int")
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "remove_last_int_def")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "j")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j"
                                                                                               "k")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "length_remove_last_int")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_remove_last_int")
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           -6
                                                                           3)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "nth"
                                                         2
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "nth_append"
                                                             +)
                                                            (("1"
                                                              (rewrite
                                                               "length_append")
                                                              (("1"
                                                                (rewrite
                                                                 "length_remove_last_int")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_append")
                                                                    (("1"
                                                                      (rewrite
                                                                       "length_remove_last_int")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "remove_last_int_def")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "j")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "j"
                                                                                       "length(L1)-1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "length_remove_last_int")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "length_append"
                                                               1)
                                                              (("2"
                                                                (rewrite
                                                                 "length_remove_last_int")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "length_remove_last_int")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "NOT nth(cdr(L2),k-length(L1)) = nth(L2,k-length(L1)+1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "nth" + 2)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       "nth_append"
                                                       +)
                                                      (("1"
                                                        (rewrite
                                                         "length_append")
                                                        (("1"
                                                          (rewrite
                                                           "length_remove_last_int")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (split
                                                                 +)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (rewrite
                                                                       "nth_append"
                                                                       +)
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_remove_last_int")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (split
                                                                               +)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "remove_last_int_def")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "j")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j"
                                                                                               "length(L1)-1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (copy
                                                                                                   "i1")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "strictly_increasing_int?"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "length(L1)-1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "0"
                                                                                                               "1-length(L1)+k")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (copy
                                                                                                                   "i2")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "strictly_increasing_int?"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "0")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "nth"
                                                                                     2
                                                                                     2)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -9)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "0"
                                                                                         "1-length(L1)+k")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (rewrite
                                                                           "length_remove_last_int")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -9
                                                                     "1-length(L1)+j"
                                                                     "1-length(L1)+k")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -9
                                                                         2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "length_append"
                                                         1)
                                                        (("2"
                                                          (rewrite
                                                           "length_remove_last_int")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               -5
                                                               3)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "length_append")
                                      (("2"
                                        (rewrite
                                         "length_remove_last_int")
                                        (("2"
                                          (expand "length" -4 3)
                                          (("2"
                                            (lift-if)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1 +)
                                  (("2"
                                    (rewrite "nth_append" +)
                                    (("2"
                                      (rewrite "nth_append" +)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (ground)
                                                (("1"
                                                  (inst - "j" "k")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (copy "i1")
                                                  (("2"
                                                    (expand
                                                     "strictly_increasing_int?"
                                                     -1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst
                                                         -
                                                         "j"
                                                         "length(L1)-1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "length(L1)-1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (copy
                                                                 "i2")
                                                                (("2"
                                                                  (expand
                                                                   "strictly_increasing_int?"
                                                                   -1)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "0"
                                                                       "k-length(L1)")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "0")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide -5)
                                                  (("3"
                                                    (inst
                                                     -
                                                     "j-length(L1)"
                                                     "k-length(L1)")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((j skolem-const-decl "nat" int_bands nil)
    (L1 skolem-const-decl "list[IntBand]" int_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strictly_increasing_int? const-decl "bool" int_bands nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (remove_last_int_def formula-decl nil int_bands nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (max_0_nnreal formula-decl nil min_max reals)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_remove_last_int formula-decl nil int_bands nil)
    (length_singleton formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (nth_append formula-decl nil more_list_props structures)
    (remove_last_int const-decl "list[IntBand]" int_bands nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (append_intband_spec_length formula-decl nil int_bands nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (append_null formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (length_null formula-decl nil more_list_props structures)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (append_intband_spec const-decl "list[IntBand]" int_bands nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int nonempty-type-eq-decl nil integers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil))
   shostak)
  (append_intband_spec_connected-2 nil 3637672521
   ("" (skeep)
    (("" (label "i1" -4)
      (("" (label "i2" -5)
        (("" (case "length(L1) = 0 OR length(L2) = 0")
          (("1" (case "L1=null OR L2=null")
            (("1" (skoletin 1)
              (("1" (case "AIS = L1 OR AIS = L2")
                (("1" (hide (-3 -4))
                  (("1" (ground)
                    (("1" (replace -2) (("1" (propax) nil nil)) nil)
                     ("2" (replace -1) (("2" (propax) nil nil)) nil)
                     ("3" (replace -2) (("3" (propax) nil nil)) nil)
                     ("4" (replace -1) (("4" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (split -)
                  (("1" (expand "append_intband_spec")
                    (("1" (replace -1)
                      (("1" (assert)
                        (("1" (expand "append" -2)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (expand "append_intband_spec")
                      (("2" (assert)
                        (("2" (rewrite "append_null")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (skoletin 3)
              (("2" (assert)
                (("2" (skeep)
                  (("2" (lemma "append_intband_spec_length")
                    (("2" (insteep -)
                      (("2" (assert)
                        (("2" (replace -4 :dir rl)
                          (("2" (expand "append_intband_spec")
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("1"
                                  (replace -2 +)
                                  (("1"
                                    (rewrite "nth_append")
                                    (("1"
                                      (rewrite "length_append")
                                      (("1"
                                        (rewrite
                                         "length_remove_last_int")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (rewrite "nth_append")
                                                (("1"
                                                  (rewrite
                                                   "length_remove_last_int")
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (lemma
                                                         "remove_last_int_def")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "k")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_append"
                                                                     +)
                                                                    (("1"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_remove_last_int")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (rewrite
                                                                             "nth_append"
                                                                             +)
                                                                            (("1"
                                                                              (rewrite
                                                                               "length_remove_last_int")
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "remove_last_int_def")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "j")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j"
                                                                                               "k")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "length_remove_last_int")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_remove_last_int")
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           -6
                                                                           3)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "nth"
                                                         2
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "nth_append"
                                                             +)
                                                            (("1"
                                                              (rewrite
                                                               "length_append")
                                                              (("1"
                                                                (rewrite
                                                                 "length_remove_last_int")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_append")
                                                                    (("1"
                                                                      (rewrite
                                                                       "length_remove_last_int")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "remove_last_int_def")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "j")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "j"
                                                                                         "length(L1)-1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "length_remove_last_int")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "length_append"
                                                               1)
                                                              (("2"
                                                                (rewrite
                                                                 "length_remove_last_int")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "length_remove_last_int")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "NOT nth(cdr(L2),k-length(L1)) = nth(L2,k-length(L1)+1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "nth" + 2)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       "nth_append"
                                                       +)
                                                      (("1"
                                                        (rewrite
                                                         "length_append")
                                                        (("1"
                                                          (rewrite
                                                           "length_remove_last_int")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (split
                                                                 +)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (rewrite
                                                                       "nth_append"
                                                                       +)
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_remove_last_int")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (split
                                                                               +)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "remove_last_int_def")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "j")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j"
                                                                                               "length(L1)-1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (copy
                                                                                                   "i1")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "strictly_increasing_int?"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "length(L1)-1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "0"
                                                                                                               "1-length(L1)+k")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (copy
                                                                                                                   "i2")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "strictly_increasing_int?"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "0")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "nth"
                                                                                     2
                                                                                     2)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -9)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "0"
                                                                                         "1-length(L1)+k")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (rewrite
                                                                           "length_remove_last_int")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -9
                                                                     "1-length(L1)+j"
                                                                     "1-length(L1)+k")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -9
                                                                         2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "length_append"
                                                           1)
                                                          (("2"
                                                            (rewrite
                                                             "length_remove_last_int")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 -5
                                                                 3)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "length_append")
                                      (("2"
                                        (rewrite
                                         "length_remove_last_int")
                                        (("2"
                                          (expand "length" -4 3)
                                          (("2"
                                            (lift-if)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1 +)
                                  (("2"
                                    (rewrite "nth_append" +)
                                    (("2"
                                      (rewrite "nth_append" +)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (ground)
                                                (("1"
                                                  (inst - "j" "k")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (copy "i1")
                                                  (("2"
                                                    (expand
                                                     "strictly_increasing_int?"
                                                     -1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst
                                                         -
                                                         "j"
                                                         "length(L1)-1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "length(L1)-1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (copy
                                                                 "i2")
                                                                (("2"
                                                                  (expand
                                                                   "strictly_increasing_int?"
                                                                   -1)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "0"
                                                                       "k-length(L1)")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "0")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide -5)
                                                  (("3"
                                                    (inst
                                                     -
                                                     "j-length(L1)"
                                                     "k-length(L1)")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_null formula-decl nil more_list_props structures)
    (length_singleton formula-decl nil more_list_props structures)
    (max_0_nnreal formula-decl nil min_max reals)
    (nth_append formula-decl nil more_list_props structures))
   nil)
  (append_intband_spec_connected-1 nil 3637672064
   ("" (skeep)
    (("" (case "length(L1) = 0 OR length(L2) = 0")
      (("1" (case "L1=null OR L2=null")
        (("1" (skoletin 1)
          (("1" (case "AIS = L1 OR AIS = L2")
            (("1" (hide (-3 -4))
              (("1" (ground)
                (("1" (replace -2) (("1" (propax) nil nil)) nil)
                 ("2" (replace -1) (("2" (propax) nil nil)) nil)
                 ("3" (replace -2) (("3" (propax) nil nil)) nil)
                 ("4" (replace -1) (("4" (propax) nil nil)) nil))
                nil))
              nil)
             ("2" (split -)
              (("1" (expand "append_intband_spec")
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (expand "append" -2) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -1)
                (("2" (expand "append_intband_spec")
                  (("2" (assert)
                    (("2" (rewrite "append_null")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil))
        nil)
       ("2" (flatten)
        (("2" (skoletin 3)
          (("2" (assert)
            (("2" (skeep)
              (("2" (lemma "append_intband_spec_length")
                (("2" (insteep -)
                  (("2" (assert)
                    (("2" (replace -4 :dir rl)
                      (("2" (expand "append_intband_spec")
                        (("2" (lift-if)
                          (("2" (ground)
                            (("1" (replace -2 +)
                              (("1"
                                (rewrite "nth_append")
                                (("1"
                                  (rewrite "length_append")
                                  (("1"
                                    (rewrite "length_remove_last_int")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite "nth_append" +)
                                        (("1"
                                          (rewrite
                                           "length_remove_last_int")
                                          (("1"
                                            (rewrite "nth_append" +)
                                            (("1"
                                              (rewrite "length_append")
                                              (("1"
                                                (rewrite
                                                 "length_remove_last_int")
                                                (("1"
                                                  (rewrite
                                                   "nth_append"
                                                   +)
                                                  (("1"
                                                    (rewrite
                                                     "length_remove_last_int")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "remove_last_int_def")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "L1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (inst-cp
                                                                           -
                                                                           "j")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "k")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "j"
                                                                                 "k")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "nth"
                                                                           +
                                                                           1)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "j")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -2)
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "j"
                                                                                   "length(L1)-1")
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (inst
                                                                           -
                                                                           "j")
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (replace
                                                                               -3)
                                                                              (("3"
                                                                                (inst
                                                                                 -
                                                                                 "j"
                                                                                 "length(L1)-1")
                                                                                (("3"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (postpone)
                                                                          nil
                                                                          nil)
                                                                         ("5"
                                                                          (postpone)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil))
                                            nil))
                                          nil)
                                         ("2" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (append_intband_spec_nth_TCC1 0
  (append_intband_spec_nth_TCC1-1 nil 3637681336
   ("" (skeep*)
    (("" (assert)
      (("" (lemma "append_intband_spec_length")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((int nonempty-type-eq-decl nil integers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (append_intband_spec_length formula-decl nil int_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (append_intband_spec_nth subtype
    "(number_fields.+)((number_fields.-)(int_bands.j, list_props[IntBand].length(int_bands.L1)), 1)"
    "below[length[IntBand](L2)]")))
 (append_intband_spec_nth_TCC2 0
  (append_intband_spec_nth_TCC2-1 nil 3637681336
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strictly_increasing_int? const-decl "bool" int_bands nil))
   nil
   (append_intband_spec_nth subtype "int_bands.j"
    "below[length[IntBand](L1)]")))
 (append_intband_spec_nth_TCC3 0
  (append_intband_spec_nth_TCC3-1 nil 3637681336
   ("" (skeep*)
    (("" (assert)
      (("" (lemma "append_intband_spec_length")
        (("" (inst?) (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((int nonempty-type-eq-decl nil integers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (append_intband_spec_length formula-decl nil int_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (append_intband_spec_nth subtype
    "(number_fields.-)(int_bands.j, list_props[IntBand].length(int_bands.L1))"
    "below[length[IntBand](L2)]")))
 (append_intband_spec_nth 0
  (append_intband_spec_nth-1 nil 3637681484
   ("" (skeep*)
    (("" (skoletin 1)
      (("" (lemma "append_intband_spec_length")
        (("" (inst?)
          (("" (skeep)
            (("" (replace -3 +)
              (("" (replace -3 :dir rl)
                (("" (replaces -1)
                  (("" (replace -2)
                    (("" (expand "append_intband_spec")
                      (("" (lift-if)
                        (("" (lift-if)
                          (("" (assert)
                            (("" (lift-if)
                              ((""
                                (split +)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (ground)
                                      (("1"
                                        (rewrite "nth_append")
                                        (("1"
                                          (rewrite "length_append")
                                          (("1"
                                            (rewrite
                                             "length_remove_last_int")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite "nth_append")
                                                (("1"
                                                  (rewrite
                                                   "length_remove_last_int")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "remove_last_int_def")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "length_remove_last_int")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (rewrite "length_append")
                                            (("2"
                                              (rewrite
                                               "length_remove_last_int")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "nth_append" 1)
                                        (("1"
                                          (rewrite "length_append" 1)
                                          (("1"
                                            (rewrite
                                             "length_remove_last_int")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "nth_append"
                                                 1)
                                                (("1"
                                                  (rewrite
                                                   "length_remove_last_int")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "nth"
                                                       1
                                                       1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "length_remove_last_int")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "length_append" 1)
                                          (("2"
                                            (rewrite
                                             "length_remove_last_int")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (rewrite "nth_append" +)
                                        (("1"
                                          (rewrite "length_append" +)
                                          (("1"
                                            (rewrite
                                             "length_remove_last_int")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "nth" 2 2)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "length_append" +)
                                          (("2"
                                            (rewrite
                                             "length_remove_last_int")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "length" -4 2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (replace 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "nth_append[IntBand]")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (hide 1)
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove_last_int_def formula-decl nil int_bands nil)
    (max_0_nnreal formula-decl nil min_max reals)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_remove_last_int formula-decl nil int_bands nil)
    (length_singleton formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (nth_append formula-decl nil more_list_props structures)
    (append def-decl "list[T]" list_props nil)
    (remove_last_int const-decl "list[IntBand]" int_bands nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (append_intband_spec_length formula-decl nil int_bands nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (append_intband_spec const-decl "list[IntBand]" int_bands nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (conflict_step_rew 0
  (conflict_step_rew-1 nil 3637920967
   ("" (skeep)
    (("" (skoletin 1)
      (("" (expand "conflict_step")
        (("" (split)
          (("1" (flatten)
            (("1" (split)
              (("1" (invoke (name "az" "%1") (! 1 1))
                (("1" (replaces -1)
                  (("1" (typepred "az")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (inst - "p" "j")
                          (("1" (assert)
                            (("1" (case "j>=B/ts AND j<=T/ts")
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide (4 5 6 7 8))
                                    (("1"
                                      (expand "min" 2)
                                      (("1"
                                        (lift-if)
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (split 1)
                                (("1" (cross-mult 1) nil nil)
                                 ("2" (cross-mult 1) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (invoke (name "az" "%1") (! 2 1))
                    (("2" (replaces -1)
                      (("2" (typepred "az")
                        (("2" (assert)
                          (("2" (skeep)
                            (("2" (inst - "p" "j")
                              (("2"
                                (assert)
                                (("2"
                                  (case "j>=B2/ts AND j<=T2/ts")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide (4 5 6 7 8))
                                        (("1"
                                          (expand "min" 2)
                                          (("1"
                                            (lift-if)
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (split 1)
                                    (("1" (cross-mult 1) nil nil)
                                     ("2" (cross-mult 1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (flatten)
                (("3" (assert)
                  (("3" (hide (1 2))
                    (("3" (invoke (name "az" "%1") (! 1 1))
                      (("3" (replaces -1)
                        (("3" (typepred "az")
                          (("3" (assert)
                            (("3" (hide (-1 -2 -4))
                              (("3"
                                (skeep)
                                (("3"
                                  (inst - "j")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (flatten)
                (("4" (assert)
                  (("4" (hide (1 2 3))
                    (("4" (invoke (name "az" "%1") (! 1 1))
                      (("4" (replaces -1)
                        (("4" (typepred "az")
                          (("4" (assert)
                            (("4" (hide (-1 -2 -4))
                              (("4"
                                (skeep)
                                (("4"
                                  (inst - "j")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (assert)
                (("5" (hide (1 2 3 4))
                  (("5" (invoke (name "az" "%1") (! 1 1))
                    (("5" (replaces -1)
                      (("5" (typepred "az")
                        (("5" (assert)
                          (("5" (hide (-1 -2 -4))
                            (("5" (skeep)
                              (("5"
                                (inst - "p")
                                (("5"
                                  (assert)
                                  (("5"
                                    (lemma "CD_future_traj_def")
                                    (("5"
                                      (inst?)
                                      (("5"
                                        (inst - "LOS")
                                        (("5"
                                          (assert)
                                          (("5"
                                            (inst + "t")
                                            (("5" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("6" (assert)
                (("6" (flatten)
                  (("6" (assert)
                    (("6" (hide (1 2 3 4 5))
                      (("6" (invoke (name "az" "%1") (! 1 1))
                        (("6" (replaces -1)
                          (("6" (typepred "az")
                            (("6" (assert)
                              (("6"
                                (hide (-1 -2 -4))
                                (("6"
                                  (skeep)
                                  (("6"
                                    (inst - "p")
                                    (("6"
                                      (assert)
                                      (("6"
                                        (lemma "CD_future_traj_def")
                                        (("6"
                                          (inst?)
                                          (("6"
                                            (inst - "LOS2")
                                            (("6"
                                              (assert)
                                              (("6"
                                                (inst + "t")
                                                (("6"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (flatten)
                (("2" (split -)
                  (("1" (invoke (name "az" "%1") (! -1 1))
                    (("1" (replaces -1)
                      (("1" (typepred "az")
                        (("1" (assert)
                          (("1" (hide (3 4 5 6 7))
                            (("1" (hide (-2 -3))
                              (("1"
                                (flatten)
                                (("1"
                                  (skeep -)
                                  (("1"
                                    (inst + "az" "p")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case "az>=B/ts AND az<=T/ts")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (cross-mult -1)
                                              (("1"
                                                (cross-mult -2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide (1 3 4 5 6 7))
                      (("2" (invoke (name "az" "%1") (! -2 1))
                        (("2" (replaces -1)
                          (("2" (typepred "az")
                            (("2" (assert)
                              (("2"
                                (hide (-2 -3))
                                (("2"
                                  (flatten)
                                  (("2"
                                    (skeep -)
                                    (("2"
                                      (inst + "az" "p")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "az>=B2/ts AND az<=T2/ts")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (cross-mult -1)
                                                (("1"
                                                  (cross-mult -2)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide (1 2 4 5 6))
                    (("3" (flatten)
                      (("3" (assert)
                        (("3" (hide -1)
                          (("3" (invoke (name "az" "%1") (! -1 1))
                            (("3" (replaces -1)
                              (("3"
                                (typepred "az")
                                (("3"
                                  (assert)
                                  (("3"
                                    (hide (-2 -3))
                                    (("3"
                                      (flatten)
                                      (("3"
                                        (inst + "az")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (flatten)
                    (("4" (hide (1 2 3 5 6))
                      (("4" (assert)
                        (("4" (hide -1)
                          (("4" (invoke (name "az" "%1") (! -1 1))
                            (("4" (replaces -1)
                              (("4"
                                (typepred "az")
                                (("4"
                                  (assert)
                                  (("4"
                                    (hide (-2 -3))
                                    (("4"
                                      (flatten)
                                      (("4"
                                        (inst + "az")
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (invoke (name "az" "%1") (! -1 1))
                    (("5" (replaces -1)
                      (("5" (assert)
                        (("5" (typepred "az")
                          (("5" (assert)
                            (("5" (hide (-2 -3))
                              (("5"
                                (flatten)
                                (("5"
                                  (lemma "CD_future_traj_def")
                                  (("5"
                                    (inst?)
                                    (("5"
                                      (inst - "LOS")
                                      (("5"
                                        (assert)
                                        (("5"
                                          (skeep -)
                                          (("5"
                                            (inst 6 "az" "t")
                                            (("5" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (flatten)
                    (("6" (assert)
                      (("6" (hide (1 2 3 4 5))
                        (("6" (hide -1)
                          (("6" (invoke (name "az" "%1") (! -1 1))
                            (("6" (replaces -1)
                              (("6"
                                (typepred "az")
                                (("6"
                                  (assert)
                                  (("6"
                                    (hide (-2 -3))
                                    (("6"
                                      (flatten)
                                      (("6"
                                        (assert)
                                        (("6"
                                          (lemma "CD_future_traj_def")
                                          (("6"
                                            (inst?)
                                            (("6"
                                              (inst - "LOS2")
                                              (("6"
                                                (assert)
                                                (("6"
                                                  (skeep -)
                                                  (("6"
                                                    (inst + "az" "t")
                                                    (("6"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((az skolem-const-decl "{i: int |
   (i >= 0 IFF
     ((0 <= i AND
        i <= k AND NOT vert_repul_at(traj, i, ts, MI`s, MI`v, epsV))
       AND
       FORALL (j: nat):
         j < i IMPLIES vert_repul_at(traj, j, ts, MI`s, MI`v, epsV)))
    AND
    (i < 0 IFF
      FORALL (j: nat):
        j <= k IMPLIES vert_repul_at(traj, j, ts, MI`s, MI`v, epsV))}"
     int_bands nil)
    (epsV skolem-const-decl "Sign" int_bands nil)
    (az skolem-const-decl "{i: int |
   (i >= 0 IFF
     ((0 <= i AND
        i <= k AND NOT repulsive_at(traj, i, ts, MI`s, MI`v, epsH))
       AND
       FORALL (j: nat):
         j < i IMPLIES repulsive_at(traj, j, ts, MI`s, MI`v, epsH)))
    AND
    (i < 0 IFF
      FORALL (j: nat):
        j <= k IMPLIES repulsive_at(traj, j, ts, MI`s, MI`v, epsH))}"
     int_bands nil)
    (epsH skolem-const-decl "Sign" int_bands nil)
    (MI skolem-const-decl "Aircraft" int_bands nil)
    (az skolem-const-decl "{i: int |
   (i >= 0 IFF
     (ceiling(B2 / ts) <= i AND
       i <= min(floor(T2 / ts), k) AND
        (EXISTS (p: nat):
           p < length(AL) AND
            LOS2(traj(i * ts)`1, traj(i * ts)`2,
                 nth(AL, p)`s + (i * ts) * nth(AL, p)`v, nth(AL, p)`v))
         AND
         FORALL (j: nat):
           ceiling(B2 / ts) <= j AND j < i IMPLIES
            FORALL (p: nat):
              p < length(AL) IMPLIES
               NOT LOS2(traj(j * ts)`1, traj(j * ts)`2,
                        nth(AL, p)`s + (j * ts) * nth(AL, p)`v,
                        nth(AL, p)`v)))
    AND
    (i < 0 IFF
      FORALL (p, j: nat):
        p < length(AL) AND
         ceiling(B2 / ts) <= j AND j <= min(floor(T2 / ts), k)
         IMPLIES
         NOT LOS2(traj(j * ts)`1, traj(j * ts)`2,
                  nth(AL, p)`s + (j * ts) * nth(AL, p)`v, nth(AL, p)`v))}"
     int_bands nil)
    (LOS2 skolem-const-decl "[[Vect3, Vect3, Vect3, Vect3] -> bool]"
     int_bands nil)
    (T2 skolem-const-decl "nnreal" int_bands nil)
    (B2 skolem-const-decl "nnreal" int_bands nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (az skolem-const-decl "{i: int |
   (i >= 0 IFF
     (ceiling(B / ts) <= i AND
       i <= min(floor(T / ts), k) AND
        (EXISTS (p: nat):
           p < length(AL) AND
            LOS(traj(i * ts)`1, traj(i * ts)`2,
                nth(AL, p)`s + (i * ts) * nth(AL, p)`v, nth(AL, p)`v))
         AND
         FORALL (j: nat):
           ceiling(B / ts) <= j AND j < i IMPLIES
            FORALL (p: nat):
              p < length(AL) IMPLIES
               NOT LOS(traj(j * ts)`1, traj(j * ts)`2,
                       nth(AL, p)`s + (j * ts) * nth(AL, p)`v,
                       nth(AL, p)`v)))
    AND
    (i < 0 IFF
      FORALL (p, j: nat):
        p < length(AL) AND
         ceiling(B / ts) <= j AND j <= min(floor(T / ts), k)
         IMPLIES
         NOT LOS(traj(j * ts)`1, traj(j * ts)`2,
                 nth(AL, p)`s + (j * ts) * nth(AL, p)`v, nth(AL, p)`v))}"
     int_bands nil)
    (traj skolem-const-decl "Traj" int_bands nil)
    (LOS skolem-const-decl "[[Vect3, Vect3, Vect3, Vect3] -> bool]"
     int_bands nil)
    (AL skolem-const-decl "AircraftList" int_bands nil)
    (k skolem-const-decl "nat" int_bands nil)
    (T skolem-const-decl "nnreal" int_bands nil)
    (ts skolem-const-decl "posreal" int_bands nil)
    (B skolem-const-decl "nnreal" int_bands nil)
    (CD_future_traj_def formula-decl nil int_bands nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal type-eq-decl nil real_types nil)
    (Traj type-eq-decl nil int_bands nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (conflict_step const-decl "bool" int_bands nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (first_los_step def-decl "{i: int |
   (i >= 0 IFF
     (k <= i AND
       i <= MaxN AND
        (EXISTS (p: nat):
           p < length(AL) AND
            LOS(traj(i * ts)`1, traj(i * ts)`2,
                nth(AL, p)`s + (i * ts) * nth(AL, p)`v, nth(AL, p)`v))
         AND
         (FORALL (j: nat):
            k <= j AND j < i IMPLIES
             (FORALL (p: nat):
                p < length(AL) IMPLIES
                 NOT LOS(traj(j * ts)`1, traj(j * ts)`2,
                         nth(AL, p)`s + (j * ts) * nth(AL, p)`v,
                         nth(AL, p)`v)))))
    AND
    (i < 0 IFF
      (FORALL (p, j: nat):
         p < length(AL) AND k <= j AND j <= MaxN IMPLIES
          NOT LOS(traj(j * ts)`1, traj(j * ts)`2,
                  nth(AL, p)`s + (j * ts) * nth(AL, p)`v, nth(AL, p)`v)))}"
     int_bands nil)
    (repulsive_at const-decl "bool" int_bands nil)
    (first_nonrepulsive_step def-decl "{i: int |
   (i >= 0 IFF
     ((k <= i AND i <= MaxN AND NOT repulsive_at(traj, i, ts, si, vi, eps))
       AND
       (FORALL (j: nat):
          k <= j AND j < i IMPLIES
           repulsive_at(traj, j, ts, si, vi, eps))))
    AND
    (i < 0 IFF
      (FORALL (j: nat):
         k <= j AND j <= MaxN IMPLIES
          repulsive_at(traj, j, ts, si, vi, eps)))}" int_bands nil)
    (vert_repul_at const-decl "bool" int_bands nil)
    (first_nonvert_repul_step def-decl "{i: int |
   (i >= 0 IFF
     ((k <= i AND
        i <= MaxN AND NOT vert_repul_at(traj, i, ts, si, vi, eps))
       AND
       (FORALL (j: nat):
          k <= j AND j < i IMPLIES
           vert_repul_at(traj, j, ts, si, vi, eps))))
    AND
    (i < 0 IFF
      (FORALL (j: nat):
         k <= j AND j <= MaxN IMPLIES
          vert_repul_at(traj, j, ts, si, vi, eps)))}" int_bands nil)
    (CD_future_traj const-decl "bool" int_bands nil)
    (first_conflict_aircraft def-decl "{j: int |
   (j >= 0 IFF
     (i <= j AND
       j < length(AL) AND
        CD_future_traj(CD, B, T, traj, k * tsn, AL, j) AND
         (FORALL (q: int):
            q >= i AND q < j IMPLIES
             NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q))))
    AND
    (j < 0 IFF
      (FORALL (q: int):
         q >= i AND q < length(AL) IMPLIES
          NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q)))}"
     int_bands nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (string type-eq-decl nil strings nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak)))

