(alerting
 (bands_param_from_table_TCC1 0
  (bands_param_from_table_TCC1-2 "" 3813485094
   ("" (skeep)
    (("" (expand "min")
      (("" (assert)
        (("" (lift-if 2)
          (("" (split 2)
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (bands_param_from_table subtype
    "real_defs.min(alerting.par`left_trk, alerting.at`spread_trk`1)"
    "nnreal"))
  (bands_param_from_table_TCC1-1 nil 3683562999
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (expand "min")
          (("" (assert)
            (("" (lift-if 2)
              (("" (split 2)
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil))
   nil
   (bands_param_from_table subtype
    "real_defs.min(alerting.par`left_trk, alerting.at`spread_trk`1)"
    "nnreal")))
 (bands_param_from_table_TCC2 0
  (bands_param_from_table_TCC2-2 "" 3813485095
   ("" (skeep)
    (("" (expand "min")
      (("" (lift-if 2)
        (("" (split 2)
          (("1" (assert) nil nil)
           ("2" (assert) (("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (bands_param_from_table subtype
    "real_defs.min(alerting.par`right_trk, alerting.at`spread_trk`2)"
    "nnreal"))
  (bands_param_from_table_TCC2-1 nil 3683562999
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (expand "min")
          (("" (lift-if 2)
            (("" (split 2)
              (("1" (assert) nil nil)
               ("2" (assert)
                (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil))
   nil
   (bands_param_from_table subtype
    "real_defs.min(alerting.par`right_trk, alerting.at`spread_trk`2)"
    "nnreal")))
 (bands_param_from_table_TCC3 0
  (bands_param_from_table_TCC3-1 nil 3683562999
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (nnreal type-eq-decl nil real_types nil)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Parameters type-eq-decl nil kinematic_core nil)
    (pc_comp const-decl "bool" kinematic_core nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (round const-decl "{j: int | r - 1 / 2 < j AND j <= r + 1 / 2}"
           kinematic_trk_bands nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (gs const-decl "nnreal" Velocity aviation)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (bands_param_from_table subtype
    "real_defs.max(alerting.par`min_gs, (number_fields.-)(alerting.gs, alerting.at`spread_gs`1))"
    "posreal")))
 (bands_param_from_table_TCC4 0
  (bands_param_from_table_TCC4-2 "" 3813485095
   ("" (skeep)
    (("" (typepred "ucore`ownship")
      (("" (assert)
        (("" (ground)
          (("1" (expand "min")
            (("1" (lift-if 1)
              (("1" (split 1)
                (("1" (ground) nil nil) ("2" (ground) nil nil)) nil))
              nil))
            nil)
           ("2" (expand "min")
            (("2" (lift-if)
              (("2" (split 1)
                (("1" (ground) nil nil) ("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (bands_param_from_table subtype
    "real_defs.min(alerting.par`max_gs, (number_fields.+)(alerting.gs, alerting.at`spread_gs`2))"
    "posreal"))
  (bands_param_from_table_TCC4-1 nil 3683562999
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (typepred "ucore`ownship")
          (("" (assert)
            (("" (ground)
              (("1" (expand "min")
                (("1" (lift-if 1)
                  (("1" (split 1)
                    (("1" (ground) nil nil) ("2" (ground) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "min")
                (("2" (lift-if)
                  (("2" (split 1)
                    (("1" (ground) nil nil) ("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (gs const-decl "nnreal" Velocity aviation)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Parameters type-eq-decl nil kinematic_core nil)
    (pc_comp const-decl "bool" kinematic_core nil))
   nil
   (bands_param_from_table subtype
    "real_defs.min(alerting.par`max_gs, (number_fields.+)(alerting.gs, alerting.at`spread_gs`2))"
    "posreal")))
 (bands_alertor_from_table_TCC1 0
  (bands_alertor_from_table_TCC1-2 "" 3813485095
   ("" (skeep)
    (("" (typepred "ucore`ownship")
      (("" (expand "gs")
        (("" (expand "norm")
          (("" (lemma "sqrt_gt_0")
            (("" (inst -1 "sqv(vect2(ucore`ownship`v))")
              (("" (flatten)
                (("" (hide -1) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (bands_alertor_from_table subtype "alerting.ucore`ownship"
    "{ac: int_bands.Aircraft | reals.>(vectors_2D.sqv(vect_3D_2D.vect2(ac`v)), 0)}"))
  (bands_alertor_from_table_TCC1-1 nil 3683562999
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (typepred "ucore`ownship")
              (("" (expand "gs")
                (("" (expand "norm")
                  (("" (lemma "sqrt_gt_0")
                    (("" (inst -1 "sqv(vect2(ucore`ownship`v))")
                      (("" (flatten)
                        (("" (hide -1) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqrt_gt_0 formula-decl nil sqrt reals)
    (norm const-decl "nnreal" vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (gs const-decl "nnreal" Velocity aviation)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Parameters type-eq-decl nil kinematic_core nil)
    (pc_comp const-decl "bool" kinematic_core nil))
   nil
   (bands_alertor_from_table subtype "alerting.ucore`ownship"
    "{ac: int_bands.Aircraft | reals.>(vectors_2D.sqv(vect_3D_2D.vect2(ac`v)), 0)}")))
 (bands_alertor_from_table_TCC2 0
  (bands_alertor_from_table_TCC2-2 "" 3813485095
   ("" (skeep)
    (("" (lemma "detector_def")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak
   (bands_alertor_from_table subtype "alerting.los_cd" "LOS_CD"))
  (bands_alertor_from_table_TCC2-1 nil 3683562999
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (lemma "detector_def")
              (("" (inst?) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ConfDetector type-eq-decl nil los_and_cd nil)
    (project_ac const-decl "Aircraft" los_and_cd nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (string type-eq-decl nil strings nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (detector_def formula-decl nil los_and_cd nil))
   nil (bands_alertor_from_table subtype "alerting.los_cd" "LOS_CD")))
 (bands_alertor_from_table_TCC3 0
  (bands_alertor_from_table_TCC3-2 "" 3813485097
   ("" (skeep)
    (("" (typepred "ucore")
      (("" (expand "pc_comp")
        (("" (assert)
          (("" (assert)
            (("" (flatten)
              ((""
                (case "bpar`1<=par`left_trk AND bpar`2<=par`right_trk")
                (("1" (flatten)
                  (("1" (both-sides "/" "par`trk_step" -1)
                    (("1" (both-sides "/" "par`trk_step" -2)
                      (("1" (both-sides "+" "1/2" -1)
                        (("1" (both-sides "+" "1/2" -2)
                          (("1" (both-sides-f -1 "floor")
                            (("1" (both-sides-f -2 "floor")
                              (("1"
                                (expand "round")
                                (("1"
                                  (assert)
                                  (("1"
                                    (both-sides "*" "par`trk_step" -1)
                                    (("1"
                                      (both-sides
                                       "*"
                                       "par`trk_step"
                                       -2)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (ground)
                    (("1" (replaces -6)
                      (("1" (expand "bands_param_from_table")
                        (("1" (lift-if 1)
                          (("1" (split 1)
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replaces -6)
                      (("2" (expand "bands_param_from_table")
                        (("2" (lift-if 1)
                          (("2" (split 1)
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (bands_alertor_from_table subtype "alerting.par`trk_step"
    "{trkstep: real_types.posreal | booleans.AND(reals.<(trkstep, pi_def.pi), booleans.AND(reals.<=(number_fields.*(trkstep, kinematic_trk_bands.round(number_fields./(alerting.bpar`1, trkstep))), pi_def.pi), reals.<=(number_fields.*(trkstep, kinematic_trk_bands.round(number_fields./(alerting.bpar`2, trkstep))), pi_def.pi)))}"))
  (bands_alertor_from_table_TCC3-1 nil 3683562999
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (typepred "ucore")
              (("" (expand "pc_comp")
                (("" (assert)
                  (("" (assert)
                    (("" (flatten)
                      ((""
                        (case "bpar`1<=par`left_trk AND bpar`2<=par`right_trk")
                        (("1" (flatten)
                          (("1" (both-sides "/" "par`trk_step" -1)
                            (("1" (both-sides "/" "par`trk_step" -2)
                              (("1"
                                (both-sides "+" "1/2" -1)
                                (("1"
                                  (both-sides "+" "1/2" -2)
                                  (("1"
                                    (both-sides-f -1 "floor")
                                    (("1"
                                      (both-sides-f -2 "floor")
                                      (("1"
                                        (expand "round")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (both-sides
                                             "*"
                                             "par`trk_step"
                                             -1)
                                            (("1"
                                              (both-sides
                                               "*"
                                               "par`trk_step"
                                               -2)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 3)
                          (("2" (ground)
                            (("1" (replaces -6)
                              (("1"
                                (expand "bands_param_from_table")
                                (("1"
                                  (lift-if 1)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replaces -6)
                              (("2"
                                (expand "bands_param_from_table")
                                (("2"
                                  (lift-if 1)
                                  (("2"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bands_param_from_table const-decl
     "[nnreal, nnreal, posreal, posreal, real, real, real, real]"
     alerting nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (round const-decl "{j: int | r - 1 / 2 < j AND j <= r + 1 / 2}"
           kinematic_trk_bands nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (add_div formula-decl nil real_props nil)
    (both_sides_times_pos_le2 formula-decl nil real_props nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (both_sides_plus_le2 formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (nnreal type-eq-decl nil real_types nil)
    (gs const-decl "nnreal" Velocity aviation)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Parameters type-eq-decl nil kinematic_core nil)
    (pc_comp const-decl "bool" kinematic_core nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil
   (bands_alertor_from_table subtype "alerting.par`trk_step"
    "{trkstep: real_types.posreal | booleans.AND(reals.<(trkstep, pi_def.pi), booleans.AND(reals.<=(number_fields.*(trkstep, kinematic_trk_bands.round(number_fields./(alerting.bpar`1, trkstep))), pi_def.pi), reals.<=(number_fields.*(trkstep, kinematic_trk_bands.round(number_fields./(alerting.bpar`2, trkstep))), pi_def.pi)))}")))
 (bands_alertor_from_table_TCC4 0
  (bands_alertor_from_table_TCC4-2 "" 3813485097
   ("" (skeep)
    (("" (typepred "ucore`ownship")
      (("" (expand "gs")
        (("" (expand "norm")
          (("" (lemma "sqrt_gt_0")
            (("" (inst -1 "sqv(vect2(ucore`ownship`v))")
              (("" (flatten) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (bands_alertor_from_table subtype "alerting.ucore`ownship"
    "{ac: int_bands.Aircraft | reals.>(vectors_2D.sqv(vect_3D_2D.vect2(ac`v)), 0)}"))
  (bands_alertor_from_table_TCC4-1 nil 3683562999
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (typepred "ucore`ownship")
              (("" (expand "gs")
                (("" (expand "norm")
                  (("" (lemma "sqrt_gt_0")
                    (("" (inst -1 "sqv(vect2(ucore`ownship`v))")
                      (("" (flatten) (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqrt_gt_0 formula-decl nil sqrt reals)
    (norm const-decl "nnreal" vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (gs const-decl "nnreal" Velocity aviation)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Parameters type-eq-decl nil kinematic_core nil)
    (pc_comp const-decl "bool" kinematic_core nil))
   nil
   (bands_alertor_from_table subtype "alerting.ucore`ownship"
    "{ac: int_bands.Aircraft | reals.>(vectors_2D.sqv(vect_3D_2D.vect2(ac`v)), 0)}")))
 (bands_alertor_from_table_TCC5 0
  (bands_alertor_from_table_TCC5-2 "" 3813485097
   ("" (skeep)
    (("" (lemma "detector_def")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak
   (bands_alertor_from_table subtype "alerting.los_cd" "LOS_CD"))
  (dumb "dumb" 3688123078
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (lemma "detector_def")
              (("" (inst?) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ConfDetector type-eq-decl nil los_and_cd nil)
    (project_ac const-decl "Aircraft" los_and_cd nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (string type-eq-decl nil strings nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (detector_def formula-decl nil los_and_cd nil))
   shostak
   (bands_alertor_from_table subtype "alerting.los_cd" "LOS_CD"))
  (bands_alertor_from_table_TCC5-1 nil 3683562999
   ("" (skeep :preds? t)
    (("" (skeep) (("" (skeep) (("" (skeep) nil nil)) nil)) nil)) nil)
   nil nil
   (bands_alertor_from_table subtype "alerting.los_cd" "LOS_CD")))
 (bands_alertor_from_table_TCC6 0
  (bands_alertor_from_table_TCC6-2 "" 3813485097
   ("" (skeep)
    (("" (typepred "ucore`ownship")
      (("" (expand "gs")
        (("" (expand "norm")
          (("" (lemma "sqrt_gt_0")
            (("" (inst -1 "sqv(vect2(ucore`ownship`v))")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (bands_alertor_from_table subtype "alerting.ucore`ownship"
    "{ac: int_bands.Aircraft | reals.>(vectors_2D.sqv(vect_3D_2D.vect2(ac`v)), 0)}"))
  (bands_alertor_from_table_TCC6-1 nil 3683562999
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (typepred "ucore`ownship")
              (("" (expand "gs")
                (("" (expand "norm")
                  (("" (lemma "sqrt_gt_0")
                    (("" (inst -1 "sqv(vect2(ucore`ownship`v))")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqrt_gt_0 formula-decl nil sqrt reals)
    (norm const-decl "nnreal" vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (gs const-decl "nnreal" Velocity aviation)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Parameters type-eq-decl nil kinematic_core nil)
    (pc_comp const-decl "bool" kinematic_core nil))
   nil
   (bands_alertor_from_table subtype "alerting.ucore`ownship"
    "{ac: int_bands.Aircraft | reals.>(vectors_2D.sqv(vect_3D_2D.vect2(ac`v)), 0)}")))
 (bands_alertor_from_table_TCC7 0
  (bands_alertor_from_table_TCC7-2 "" 3813485097
   ("" (skeep)
    (("" (lemma "detector_def")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak
   (bands_alertor_from_table subtype "alerting.los_cd" "LOS_CD"))
  (bands_alertor_from_table_TCC7-1 nil 3683562999
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (lemma "detector_def")
              (("" (inst?) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ConfDetector type-eq-decl nil los_and_cd nil)
    (project_ac const-decl "Aircraft" los_and_cd nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (string type-eq-decl nil strings nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (detector_def formula-decl nil los_and_cd nil))
   nil (bands_alertor_from_table subtype "alerting.los_cd" "LOS_CD")))
 (bands_alertor_from_table_TCC8 0
  (bands_alertor_from_table_TCC8-2 "" 3813485097
   ("" (skeep)
    (("" (lemma "detector_def")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak
   (bands_alertor_from_table subtype "alerting.los_cd" "LOS_CD"))
  (bands_alertor_from_table_TCC8-1 nil 3683562999
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (lemma "detector_def")
              (("" (inst?) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ConfDetector type-eq-decl nil los_and_cd nil)
    (project_ac const-decl "Aircraft" los_and_cd nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (string type-eq-decl nil strings nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (detector_def formula-decl nil los_and_cd nil))
   nil (bands_alertor_from_table subtype "alerting.los_cd" "LOS_CD")))
 (bands_alertor_from_table_TCC9 0
  (bands_alertor_from_table_TCC9-2 "" 3813485097
   ("" (skeep)
    (("" (typepred "ucore")
      (("" (expand "pc_comp") (("" (flatten) nil nil)) nil)) nil))
    nil)
   nil shostak
   (bands_alertor_from_table subtype "alerting.par`max_alt"
    "{maxalt: real_types.posreal | reals.<(alerting.par`min_alt, maxalt)}"))
  (bands_alertor_from_table_TCC9-1 nil 3683562999
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (typepred "ucore")
              (("" (expand "pc_comp") (("" (flatten) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (nnreal type-eq-decl nil real_types nil)
    (gs const-decl "nnreal" Velocity aviation)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Parameters type-eq-decl nil kinematic_core nil)
    (pc_comp const-decl "bool" kinematic_core nil))
   nil
   (bands_alertor_from_table subtype "alerting.par`max_alt"
    "{maxalt: real_types.posreal | reals.<(alerting.par`min_alt, maxalt)}")))
 (alert_from_at_list_TCC1 0
  (alert_from_at_list_TCC1-1 nil 3683562999 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (nnreal type-eq-decl nil real_types nil)
    (gs const-decl "nnreal" Velocity aviation)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Parameters type-eq-decl nil kinematic_core nil)
    (pc_comp const-decl "bool" kinematic_core nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (round const-decl "{j: int | r - 1 / 2 < j AND j <= r + 1 / 2}"
           kinematic_trk_bands nil)
    (* const-decl "real" vectors_2D vectors)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil
   (alert_from_at_list subtype "0"
    "naturalnumbers.below((number_fields.+)(1, list_props[AlertTable].length(alerting.at_list)))")))
 (alert_from_at_list_TCC2 0
  (alert_from_at_list_TCC2-1 nil 3683562999 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (nnreal type-eq-decl nil real_types nil)
    (gs const-decl "nnreal" Velocity aviation)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Parameters type-eq-decl nil kinematic_core nil)
    (pc_comp const-decl "bool" kinematic_core nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_2D vectors)
    (round const-decl "{j: int | r - 1 / 2 < j AND j <= r + 1 / 2}"
           kinematic_trk_bands nil))
   nil
   (alert_from_at_list subtype "alerting.at_list"
    "(list_adt[AlertTable].cons?)")))
 (alert_from_at_list_TCC3 0
  (alert_from_at_list_TCC3-1 nil 3683562999 ("" (subtype-tcc) nil nil)
   ((is_thresh_alert const-decl "bool" alerting nil)) nil
   (alert_from_at_list subtype
    "list_props[AlertTable].length(alerting.at_list)"
    "naturalnumbers.below((number_fields.+)(1, list_props[AlertTable].length(alerting.at_list)))")))
 (alert_from_at_list_TCC4 0
  (alert_from_at_list_TCC4-2 "" 3813485098
   ("" (skeep)
    (("" (skeep)
      (("" (replace -2)
        (("" (expand "length" 3 2) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak
   (alert_from_at_list termination
    "alerting.alert_from_at_list(alerting.par, alerting.ucore, alerting.alert_rest)"
    "nil"))
  (alert_from_at_list_TCC4-1 nil 3683562999
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (replace -2)
          (("" (expand "length" 3 2) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (alert_from_at_list termination
    "alerting.alert_from_at_list(alerting.par, alerting.ucore, alerting.alert_rest)"
    "nil")))
 (alert_from_at_list_TCC5 0
  (alert_from_at_list_TCC5-2 "" 3813485098
   ("" (skeep :preds? t)
    (("" (skeep)
      (("" (typepred "v1(par, ucore, alert_rest)(aco)(aci)")
        (("" (assert)
          (("" (replace -6)
            (("" (expand "length" 3 1) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (alert_from_at_list subtype
    "alerting.alert_from_at_list(alerting.par, alerting.ucore, alerting.alert_rest)(alerting.aco)(alerting.aci)"
    "naturalnumbers.below((number_fields.+)(1, list_props[AlertTable].length(alerting.at_list)))"))
  (alert_from_at_list_TCC5-1 nil 3683562999
   ("" (skeep :preds? t)
    (("" (skeep)
      (("" (skeep)
        (("" (typepred "v1(par, ucore, alert_rest)(aco)(aci)")
          (("" (assert)
            (("" (replace -6)
              (("" (expand "length" 3 1) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (length def-decl "nat" list_props nil)
    (AlertTable type-eq-decl nil alertor nil)
    (WCVTable type-eq-decl nil alertor nil)
    (Spread type-eq-decl nil alertor nil)
    (Region type-decl nil alertor nil)
    (pc_comp const-decl "bool" kinematic_core nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Alertor type-eq-decl nil alertor nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (Core type-eq-decl nil kinematic_core nil)
    (gs const-decl "nnreal" Velocity aviation)
    (nnreal type-eq-decl nil real_types nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Sign type-eq-decl nil sign reals)
    (Traffic type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (string type-eq-decl nil strings nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (Parameters type-eq-decl nil kinematic_core nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (alert_from_at_list subtype
    "alerting.alert_from_at_list(alerting.par, alerting.ucore, alerting.alert_rest)(alerting.aco)(alerting.aci)"
    "naturalnumbers.below((number_fields.+)(1, list_props[AlertTable].length(alerting.at_list)))")))
 (alert_from_at_list_TCC6 0
  (alert_from_at_list_TCC6-1 nil 3683562999
   ("" (skeep) (("" (assert) nil nil)) nil) nil nil
   (alert_from_at_list subtype "alerting.at_list"
    "(list_adt[AlertTable].cons?)")))
 (alerting_TCC1 0
  (alerting_TCC1-1 nil 3683562999
   ("" (skeep)
    (("" (typepred "ucore`ownship")
      (("" (expand "gs")
        (("" (expand "norm")
          (("" (lemma "sqrt_gt_0")
            (("" (inst -1 "sqv(vect2(ucore`ownship`v))")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqrt_gt_0 formula-decl nil sqrt reals)
    (norm const-decl "nnreal" vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (gs const-decl "nnreal" Velocity aviation)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Parameters type-eq-decl nil kinematic_core nil)
    (pc_comp const-decl "bool" kinematic_core nil))
   nil
   (alerting subtype "alerting.ucore`ownship"
    "{nza: int_bands.Aircraft | reals.>(vectors_2D.sqv(vect_3D_2D.vect2(nza`v)), 0)}")))
 (alerting_TCC2 0
  (alerting_TCC2-1 nil 3687784439
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        ((""
          (typepred
           "alert_from_at_list(par, ucore, reverse(par`alertor`2))(ucore`ownship)(x1)")
          (("" (lemma "length_reverse[AlertTable]")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((length_reverse formula-decl nil list_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (Parameters type-eq-decl nil kinematic_core nil)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (nnreal type-eq-decl nil real_types nil)
    (gs const-decl "nnreal" Velocity aviation)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (pc_comp const-decl "bool" kinematic_core nil)
    (Region type-decl nil alertor nil)
    (Spread type-eq-decl nil alertor nil)
    (WCVTable type-eq-decl nil alertor nil)
    (AlertTable type-eq-decl nil alertor nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (alert_from_at_list def-decl "below(length(at_list) + 1)" alerting
     nil)
    (reverse def-decl "list[T]" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (alerting subtype "alerting.alertor"
    "[Aircraft -> naturalnumbers.below((number_fields.+)(1, list_props[AlertTable].length(alerting.par`alertor`2)))]"))))

