(real_bands
 (scal_TCC1 0
  (scal_TCC1-1 nil 3631551626
   ("" (skeep) (("" (rewrite "map_length") nil nil)) nil)
   ((RealBand type-eq-decl nil real_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (scalrb const-decl "RealBand" real_bands nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (map_length formula-decl nil more_map_props nil))
   nil
   (scal subtype
    "list_adt_map[IntBand, RealBand].map(real_bands.scalrb(real_bands.r))(real_bands.L)"
    "listn[RealBand].listn(list_props[IntBand].length(real_bands.L))")))
 (scal_TCC2 0
  (scal_TCC2-1 nil 3631551626
   ("" (skeep)
    (("" (rewrite "length_reverse")
      (("" (rewrite "map_length") nil nil)) nil))
    nil)
   ((map_length formula-decl nil more_map_props nil)
    (RealBand type-eq-decl nil real_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (scalrb const-decl "RealBand" real_bands nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (length_reverse formula-decl nil list_props nil))
   nil
   (scal subtype
    "list_props[RealBand].reverse(list_adt_map[IntBand, RealBand].map(real_bands.scalrb(real_bands.r))(real_bands.L))"
    "listn[RealBand].listn(list_props[IntBand].length(real_bands.L))")))
 (scal_intband_def 0
  (scal_intband_def-1 nil 3631611397
   ("" (skeep)
    (("" (case "r > 0")
      (("1" (ground)
        (("1" (skeep)
          (("1" (inst + "i")
            (("1" (expand "scal")
              (("1" (ground)
                (("1" (rewrite "map_nth_rw")
                  (("1" (expand "scalrb")
                    (("1" (expand "in?")
                      (("1" (flatten)
                        (("1" (mult-by -2 "r")
                          (("1" (mult-by -2 "r")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "scal")
              (("2" (rewrite "map_length") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (inst + "i")
            (("1" (expand "scal")
              (("1" (rewrite "map_nth_rw")
                (("1" (expand "scalrb")
                  (("1" (expand "in?")
                    (("1" (flatten)
                      (("1" (split)
                        (("1" (mult-by 1 "r")
                          (("1" (assert) (("1" (grind-reals) nil nil))
                            nil))
                          nil)
                         ("2" (mult-by 1 "r")
                          (("2" (assert) (("2" (grind-reals) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil)
       ("2" (ground)
        (("1" (skeep)
          (("1" (inst + "length(L)-1-i")
            (("1" (expand "scal")
              (("1" (rewrite "reverse_def")
                (("1" (rewrite "map_nth_rw")
                  (("1" (rewrite "map_length")
                    (("1" (assert)
                      (("1" (expand "scalrb")
                        (("1" (expand "in?")
                          (("1" (flatten)
                            (("1" (mult-by -2 "-r")
                              (("1"
                                (mult-by -2 "-r")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide (-1 2))
                    (("2" (rewrite "map_length")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (rewrite "map_length") (("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (expand "scal")
              (("2" (rewrite "length_reverse")
                (("2" (rewrite "map_length") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (inst + "length(L)-1-i")
            (("1" (expand "scal")
              (("1" (rewrite "reverse_def")
                (("1" (rewrite "map_length")
                  (("1" (rewrite "map_nth_rw")
                    (("1" (expand "scalrb")
                      (("1" (expand "in?")
                        (("1" (flatten)
                          (("1" (split)
                            (("1" (mult-by 1 "-r")
                              (("1" (assert) nil nil)
                               ("2"
                                (typepred "i")
                                (("2"
                                  (expand "scal" -1)
                                  (("2"
                                    (rewrite "length_reverse")
                                    (("2"
                                      (rewrite "map_length")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (mult-by 1 "-r")
                              (("1" (assert) nil nil)
                               ("2"
                                (typepred "i")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "i")
                      (("2" (expand "scal" -1)
                        (("2" (rewrite "length_reverse")
                          (("2" (rewrite "map_length")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "map_length")
                  (("2" (assert)
                    (("2" (typepred "i")
                      (("2" (expand "scal" -1)
                        (("2" (rewrite "length_reverse" -1)
                          (("2" (rewrite "map_length") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "i")
              (("2" (expand "scal" -1)
                (("2" (rewrite "length_reverse" -1)
                  (("2" (rewrite "map_length") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (i skolem-const-decl "below(length(scal(r, L)))" real_bands nil)
    (length_reverse formula-decl nil list_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (reverse_def formula-decl nil more_list_props structures)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "below(length(L))" real_bands nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (both_sides_times_pos_le2 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (i skolem-const-decl "below(length(scal(r, L)))" real_bands nil)
    (map_length formula-decl nil more_map_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (in? const-decl "bool" real_bands nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (scalrb const-decl "RealBand" real_bands nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (L skolem-const-decl "list[IntBand]" real_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(length(L))" real_bands nil)
    (RealBand type-eq-decl nil real_bands nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (listn type-eq-decl nil listn structures)
    (scal const-decl "listn[RealBand](length[IntBand](L))" real_bands
     nil)
    (r skolem-const-decl "nzreal" real_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil))
   shostak))
 (scal_intband_def2_TCC1 0
  (scal_intband_def2_TCC1-1 nil 3632225562 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (scal_intband_def2 subtype "real_bands.i"
    "below[length[RealBand](scal(r, L))]")))
 (scal_intband_def2_TCC2 0
  (scal_intband_def2_TCC2-1 nil 3632225562 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (scal_intband_def2 subtype
    "(number_fields.-)((number_fields.-)(list_props[IntBand].length(real_bands.L), 1), real_bands.i)"
    "below[length[IntBand](L)]")))
 (scal_intband_def2 0
  (scal_intband_def2-1 nil 3632225639
   ("" (skeep)
    (("" (lift-if)
      (("" (ground)
        (("1" (expand "scal" + 1)
          (("1" (rewrite "map_nth_rw") nil nil)) nil)
         ("2" (expand "scal" + 1)
          (("2" (rewrite "reverse_def")
            (("1" (rewrite "map_nth_rw")
              (("1" (rewrite "map_length") nil nil)
               ("2" (hide 3)
                (("2" (rewrite "map_length") (("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "map_length") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((map_length formula-decl nil more_map_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (reverse_def formula-decl nil more_list_props structures)
    (RealBand type-eq-decl nil real_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (list type-decl nil list_adt nil)
    (scalrb const-decl "RealBand" real_bands nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (scal const-decl "listn[RealBand](length[IntBand](L))" real_bands
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (add_TCC1 0
  (add_TCC1-1 nil 3631891912
   ("" (skeep) (("" (rewrite "map_length") nil nil)) nil)
   ((RealBand type-eq-decl nil real_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (list type-decl nil list_adt nil)
    (addrb const-decl "RealBand" real_bands nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (map_length formula-decl nil more_map_props nil))
   nil
   (add subtype
    "list_adt_map[RealBand, RealBand].map(real_bands.addrb(real_bands.r))(real_bands.RL)"
    "listn[RealBand].listn(list_props[RealBand].length(real_bands.RL))")))
 (add_realband_def_TCC1 0
  (add_realband_def_TCC1-1 nil 3631891912
   ("" (skeep)
    (("" (typepred "i")
      (("" (expand "add") (("" (rewrite "map_length") nil nil)) nil))
      nil))
    nil)
   ((map_length formula-decl nil more_map_props nil)
    (addrb const-decl "RealBand" real_bands nil)
    (add const-decl "listn[RealBand](length[RealBand](RL))" real_bands
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil
   (add_realband_def subtype "real_bands.i"
    "below[length[RealBand](add(r, RL))]")))
 (add_realband_def 0
  (add_realband_def-3 "" 3794669356
   ("" (skeep)
    (("" (ground)
      (("1" (expand "add")
        (("1" (rewrite "map_nth_rw")
          (("1" (grind :exclude "nth") nil nil)) nil))
        nil)
       ("2" (expand "add")
        (("2" (rewrite "map_nth_rw")
          (("2" (grind :exclude "nth") nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (in? const-decl "bool" real_bands nil)
    (RealBand type-eq-decl nil real_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (list type-decl nil list_adt nil)
    (addrb const-decl "RealBand" real_bands nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (add const-decl "listn[RealBand](length[RealBand](RL))" real_bands
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak)
  (add_realband_def-2 nil 3631891938
   ("" (skeep)
    (("" (ground)
      (("1" (expand "add")
        (("1" (rewrite "map_nth_rw")
          (("1" (expand "add") (("1" (grind :exclude "nth") nil nil))
            nil))
          nil))
        nil)
       ("2" (expand "add")
        (("2" (rewrite "map_nth_rw")
          (("2" (expand "add") (("2" (grind :exclude "nth") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (add_realband_def-1 nil 3631891922
   ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak))
 (strictly_increasing_scal 0
  (strictly_increasing_scal-1 nil 3631968172
   ("" (skeep)
    (("" (ground)
      (("1" (expand "strictly_increasing_real?")
        (("1" (expand "strictly_increasing_int?")
          (("1" (flatten)
            (("1" (assert)
              (("1" (split)
                (("1" (skeep)
                  (("1" (expand "scal")
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (inst - "i")
                          (("1" (rewrite "map_nth_rw")
                            (("1" (expand "scalrb")
                              (("1"
                                (mult-by -2 "r")
                                (("1"
                                  (assert)
                                  (("1" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "reverse_def")
                          (("1" (rewrite "map_nth_rw")
                            (("1" (rewrite "map_length")
                              (("1"
                                (inst?)
                                (("1"
                                  (expand "scalrb")
                                  (("1"
                                    (mult-by -1 "-r")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "map_length")
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("2" (rewrite "map_length")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (expand "scal" +)
                    (("2" (lift-if)
                      (("2" (split +)
                        (("1" (flatten)
                          (("1" (inst - "i" "j")
                            (("1" (assert)
                              (("1"
                                (rewrite "map_nth_rw")
                                (("1"
                                  (rewrite "map_nth_rw")
                                  (("1"
                                    (expand "scalrb")
                                    (("1" (div-by 1 "r") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (rewrite "reverse_def")
                            (("1" (rewrite "reverse_def")
                              (("1"
                                (rewrite "map_nth_rw")
                                (("1"
                                  (rewrite "map_nth_rw")
                                  (("1"
                                    (rewrite "map_length")
                                    (("1"
                                      (expand "scalrb")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           -
                                           "length(L)-1-j"
                                           "length(L)-1-i")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (mult-by -3 "-r")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "map_length")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "map_length")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "map_length")
                                (("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (rewrite "map_length")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "strictly_increasing_real?")
        (("2" (expand "strictly_increasing_int?")
          (("2" (flatten)
            (("2" (assert)
              (("2" (split)
                (("1" (skeep)
                  (("1" (case "r > 0")
                    (("1" (expand "scal")
                      (("1" (assert)
                        (("1" (inst - "i")
                          (("1" (rewrite "map_nth_rw")
                            (("1" (expand "scalrb")
                              (("1"
                                (mult-by 1 "r")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "scal")
                      (("2" (assert)
                        (("2" (inst - "length(L)-1-i")
                          (("2" (rewrite "reverse_def")
                            (("1" (rewrite "map_nth_rw")
                              (("1"
                                (rewrite "map_length")
                                (("1"
                                  (expand "scalrb")
                                  (("1"
                                    (mult-by 2 "-r")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "map_length")
                                (("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (rewrite "map_length")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (hide -2)
                    (("2" (case "r > 0")
                      (("1" (expand "scal")
                        (("1" (assert)
                          (("1" (inst - "i" "j")
                            (("1" (assert)
                              (("1"
                                (rewrite "map_nth_rw")
                                (("1"
                                  (rewrite "map_nth_rw")
                                  (("1"
                                    (expand "scalrb")
                                    (("1"
                                      (mult-by 1 "r")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "scal")
                        (("2" (assert)
                          (("2"
                            (inst - "length(L)-1-j" "length(L)-1-i")
                            (("2" (assert)
                              (("2"
                                (rewrite "reverse_def")
                                (("1"
                                  (rewrite "reverse_def")
                                  (("1"
                                    (rewrite "map_nth_rw")
                                    (("1"
                                      (rewrite "map_nth_rw")
                                      (("1"
                                        (rewrite "map_length")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "scalrb")
                                            (("1"
                                              (mult-by 2 "-r")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "map_length")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "map_length")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "map_length")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "map_length")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (map_length formula-decl nil more_map_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (reverse_def formula-decl nil more_list_props structures)
    (both_sides_times_pos_le2 formula-decl nil real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (scalrb const-decl "RealBand" real_bands nil)
    (listn type-eq-decl nil listn structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (RealBand type-eq-decl nil real_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (IntBand type-eq-decl nil int_bands nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scal const-decl "listn[RealBand](length[IntBand](L))" real_bands
     nil)
    (strictly_increasing_int? const-decl "bool" int_bands nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil))
   shostak))
 (strictly_increasing_add_real 0
  (strictly_increasing_add_real-1 nil 3631968817
   ("" (skeep)
    (("" (expand "strictly_increasing_real?")
      (("" (expand "add")
        (("" (ground)
          (("1" (skeep)
            (("1" (hide -2)
              (("1" (inst - "i")
                (("1" (rewrite "map_nth_rw")
                  (("1" (expand "addrb") (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (assert)
                  (("2" (typepred "i")
                    (("2" (expand "add")
                      (("2" (rewrite "map_length") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1)
            (("2" (skeep)
              (("2" (inst - "i" "j")
                (("1" (assert)
                  (("1" (rewrite "map_nth_rw")
                    (("1" (rewrite "map_nth_rw")
                      (("1" (expand "addrb") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "j")
                  (("2" (expand "add" -)
                    (("2" (rewrite "map_length") nil nil)) nil))
                  nil)
                 ("3" (typepred "i")
                  (("3" (expand "add" -)
                    (("3" (rewrite "map_length") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide -2)
            (("3" (skeep)
              (("3" (inst - "i")
                (("1" (rewrite "map_nth_rw")
                  (("1" (expand "addrb") (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (typepred "i")
                  (("2" (expand "add")
                    (("2" (rewrite "map_length") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (hide -1)
            (("4" (skeep)
              (("4" (inst - "i" "j")
                (("1" (assert)
                  (("1" (rewrite "map_nth_rw")
                    (("1" (rewrite "map_nth_rw")
                      (("1" (expand "addrb") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "j")
                  (("2" (expand "add")
                    (("2" (rewrite "map_length") nil nil)) nil))
                  nil)
                 ("3" (typepred "i")
                  (("3" (expand "add")
                    (("3" (rewrite "map_length") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((j skolem-const-decl "below(length(RL))" real_bands nil)
    (i skolem-const-decl "below(length(RL))" real_bands nil)
    (i skolem-const-decl "below(length(RL))" real_bands nil)
    (j skolem-const-decl "below(length(add(r, RL)))" real_bands nil)
    (i skolem-const-decl "below(length(add(r, RL)))" real_bands nil)
    (map_length formula-decl nil more_map_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (addrb const-decl "RealBand" real_bands nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (listn type-eq-decl nil listn structures)
    (r skolem-const-decl "real" real_bands nil)
    (RL skolem-const-decl "list[RealBand]" real_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(length(add(r, RL)))" real_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add const-decl "listn[RealBand](length[RealBand](RL))" real_bands
     nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil))
   shostak))
 (remove_last_TCC1 0
  (remove_last_TCC1-1 nil 3631988416
   ("" (skeep)
    (("" (lemma "length_reverse[RealBand]")
      (("" (inst?) (("" (grind :exclude "reverse") nil nil)) nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (length_reverse formula-decl nil list_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil))
   nil
   (remove_last subtype "list_props[RealBand].reverse(real_bands.RL)"
    "(list_adt[RealBand].cons?)")))
 (remove_last_def_TCC1 0
  (remove_last_def_TCC1-1 nil 3631990759
   ("" (skeep)
    (("" (skeep)
      (("" (expand "remove_last")
        (("" (assert)
          (("" (rewrite "length_reverse")
            ((""
              (case "length(cdr(reverse(RL))) = length(reverse(RL))-1")
              (("1" (assert)
                (("1" (replaces -1)
                  (("1" (rewrite "length_reverse") nil nil)) nil))
                nil)
               ("2" (expand "length" + 2)
                (("2" (lift-if)
                  (("2" (ground)
                    (("2" (lemma "length_reverse[RealBand]")
                      (("2" (inst?)
                        (("2" (hide +)
                          (("2" (grind :exclude "reverse") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (RealBand type-eq-decl nil real_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (reverse def-decl "list[T]" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (length_reverse formula-decl nil list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (remove_last const-decl "list[RealBand]" real_bands nil))
   nil
   (remove_last_def subtype "real_bands.j"
    "below[length[RealBand](remove_last(RL))]")))
 (remove_last_def_TCC2 0
  (remove_last_def_TCC2-1 nil 3631991798 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (remove_last_def subtype "real_bands.j"
    "below[length[RealBand](RL)]")))
 (remove_last_def 0
  (remove_last_def-2 "" 3794669374
   ("" (skeep)
    (("" (skeep)
      ((""
        (case "NOT length[RealBand](cdr(RL)) = length(cdr(reverse(RL)))")
        (("1" (case "NOT length[RealBand](RL) = length(reverse(RL))")
          (("1" (rewrite "length_reverse") nil nil)
           ("2" (expand "length" -1)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (ground)
                  (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "remove_last")
          (("2" (lift-if)
            (("2" (assert)
              (("2" (rewrite "reverse_def")
                (("1"
                  (case "FORALL (rl:list[RealBand],j:nat): j<length(rl)-1 IMPLIES nth(cdr(rl),j)=nth(rl,j+1)")
                  (("1" (rewrite -1 1)
                    (("1" (rewrite "reverse_def")
                      (("1" (expand "length" 1 1)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (split +)
                              (("1"
                                (flatten)
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "length_reverse[RealBand]")
                        (("2" (inst - "RL")
                          (("2" (expand "length" -1)
                            (("2" (lift-if)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split -)
                                  (("1"
                                    (flatten)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (split -)
                                        (("1"
                                          (flatten)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (both-sides "-" "1" -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (rewrite
                                                   "reverse_def"
                                                   4)
                                                  (("1"
                                                    (case
                                                     "NOT length(RL) = length(cdr(RL))+1")
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       +
                                                       1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1 4)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "length"
                                                     +
                                                     2)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3"
                        (case "NOT length(cdr(reverse(RL))) = length(reverse(RL))-1")
                        (("1" (expand "length" + 2)
                          (("1" (lift-if)
                            (("1" (ground)
                              (("1"
                                (hide-all-but (-1 -4))
                                (("1"
                                  (lemma "length_reverse[RealBand]")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (grind :exclude "reverse")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replaces -1 +)
                          (("2" (rewrite "length_reverse" 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "length" + 2)
                      (("2" (lift-if)
                        (("2" (ground)
                          (("2" (hide-all-but (-1 -4))
                            (("2" (lemma "length_reverse[RealBand]")
                              (("2"
                                (inst?)
                                (("2"
                                  (grind :exclude "reverse")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3"
                      (case "NOT length(cdr(reverse(RL))) = length(reverse(RL))-1")
                      (("1" (expand "length" + 2)
                        (("1" (lift-if)
                          (("1" (ground)
                            (("1" (hide-all-but (-1 -3))
                              (("1"
                                (lemma "length_reverse[RealBand]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (grind :exclude "reverse")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (replaces -1)
                          (("2" (rewrite "length_reverse" 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (skeep)
                      (("2" (expand "nth" + 2) (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep) (("3" (assert) nil nil)) nil)
                   ("4" (skeep)
                    (("4" (expand "length" -1)
                      (("4" (lift-if) (("4" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (expand "length" -3)
                  (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (lemma "length_reverse[RealBand]")
          (("3" (inst?)
            (("3" (hide 2) (("3" (grind :exclude "reverse") nil nil))
              nil))
            nil))
          nil)
         ("4" (hide 2) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (TRUE const-decl "bool" booleans nil)
    (odd? const-decl "bool" integers nil)
    (> const-decl "bool" reals nil)
    (j skolem-const-decl "nat" real_bands nil)
    (RL skolem-const-decl "list[RealBand]" real_bands nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (reverse_def formula-decl nil more_list_props structures)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_reverse formula-decl nil list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (reverse def-decl "list[T]" list_props nil))
   shostak)
  (remove_last_def-1 nil 3631990761
   ("" (skeep)
    (("" (skeep)
      ((""
        (case "NOT length[RealBand](cdr(RL)) = length(cdr(reverse(RL)))")
        (("1" (case "NOT length[RealBand](RL) = length(reverse(RL))")
          (("1" (rewrite "length_reverse") nil nil)
           ("2" (expand "length" -1)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (replaces -1)
                  (("2" (ground)
                    (("2" (lift-if) (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "remove_last")
          (("2" (lift-if)
            (("2" (assert)
              (("2" (rewrite "reverse_def")
                (("1"
                  (case "FORALL (rl:list[RealBand],j:nat): j<length(rl)-1 IMPLIES nth(cdr(rl),j)=nth(rl,j+1)")
                  (("1" (rewrite -1 1)
                    (("1" (rewrite "reverse_def")
                      (("1" (expand "length" 1 1)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (split +)
                              (("1"
                                (flatten)
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "length_reverse[RealBand]")
                        (("2" (inst - "RL")
                          (("2" (expand "length" -1)
                            (("2" (lift-if)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split -)
                                  (("1"
                                    (flatten)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (split -)
                                        (("1"
                                          (flatten)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (both-sides "-" "1" -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (rewrite
                                                   "reverse_def"
                                                   4)
                                                  (("1"
                                                    (case
                                                     "NOT length(RL) = length(cdr(RL))+1")
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       +
                                                       1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1 4)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "length"
                                                     +
                                                     2)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3"
                        (case "NOT length(cdr(reverse(RL))) = length(reverse(RL))-1")
                        (("1" (expand "length" + 2)
                          (("1" (lift-if)
                            (("1" (ground)
                              (("1"
                                (hide-all-but (-1 -4))
                                (("1"
                                  (lemma "length_reverse[RealBand]")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (grind :exclude "reverse")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replaces -1 +)
                          (("2" (rewrite "length_reverse" 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "length" + 2)
                      (("2" (lift-if)
                        (("2" (ground)
                          (("2" (hide-all-but (-1 -4))
                            (("2" (lemma "length_reverse[RealBand]")
                              (("2"
                                (inst?)
                                (("2"
                                  (grind :exclude "reverse")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3"
                      (case "NOT length(cdr(reverse(RL))) = length(reverse(RL))-1")
                      (("1" (expand "length" + 2)
                        (("1" (lift-if)
                          (("1" (ground)
                            (("1" (hide-all-but (-1 -3))
                              (("1"
                                (lemma "length_reverse[RealBand]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (grind :exclude "reverse")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (replaces -1)
                          (("2" (rewrite "length_reverse" 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (skeep)
                      (("2" (expand "nth" + 2) (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep) (("3" (assert) nil nil)) nil)
                   ("4" (skeep)
                    (("4" (expand "length" -1)
                      (("4" (lift-if) (("4" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (expand "length" -3)
                  (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (lemma "length_reverse[RealBand]")
          (("3" (inst?)
            (("3" (hide 2) (("3" (grind :exclude "reverse") nil nil))
              nil))
            nil))
          nil)
         ("4" (hide 2) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((reverse_def formula-decl nil more_list_props structures))
   shostak))
 (length_remove_last 0
  (length_remove_last-2 "" 3794669374
   ("" (skeep)
    (("" (expand "max")
      (("" (lift-if)
        (("" (ground)
          (("1" (expand "remove_last")
            (("1" (rewrite "length_reverse")
              (("1" (lemma "length_reverse[RealBand]")
                (("1" (inst - "RL")
                  (("1" (expand "length" -1 1)
                    (("1" (lift-if) (("1" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "remove_last")
            (("2" (lift-if)
              (("2" (ground)
                (("2" (rewrite "length_reverse")
                  (("2" (lemma "length_reverse[RealBand]")
                    (("2" (inst - "RL")
                      (("2" (expand "length" -1 1)
                        (("2" (lift-if) (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (RealBand type-eq-decl nil real_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (reverse def-decl "list[T]" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (length_reverse formula-decl nil list_props nil)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak)
  (length_remove_last-1 nil 3632050053
   ("" (skeep)
    (("" (expand "max")
      (("" (lift-if)
        (("" (ground)
          (("1" (expand "remove_last")
            (("1" (rewrite "length_reverse")
              (("1" (lemma "length_reverse[RealBand]")
                (("1" (inst - "RL")
                  (("1" (expand "length" -1 1)
                    (("1" (lift-if) (("1" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "remove_last")
            (("2" (assert)
              (("2" (lift-if)
                (("2" (ground)
                  (("2" (rewrite "length_reverse")
                    (("2" (lemma "length_reverse[RealBand]")
                      (("2" (inst - "RL")
                        (("2" (expand "length" -1 1)
                          (("2" (lift-if) (("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cdr_strictly_increasing_real_TCC1 0
  (cdr_strictly_increasing_real_TCC1-1 nil 3634302118
   ("" (grind) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (length def-decl "nat" list_props nil))
   nil
   (cdr_strictly_increasing_real subtype "real_bands.RL"
    "(list_adt[RealBand].cons?)")))
 (cdr_strictly_increasing_real 0
  (cdr_strictly_increasing_real-1 nil 3634304287
   ("" (skeep*)
    (("" (expand "strictly_increasing_real?")
      (("" (flatten)
        (("" (assert)
          (("" (split +)
            (("1" (skeep)
              (("1" (inst - "i+1")
                (("1" (expand "nth" -1) (("1" (propax) nil nil)) nil)
                 ("2" (expand "length" 1)
                  (("2" (lift-if)
                    (("2" (ground) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (inst - "i+1" "j+1")
                (("1" (assert)
                  (("1" (expand "nth" -3) (("1" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (typepred "j")
                  (("2" (expand "length" 1)
                    (("2" (lift-if)
                      (("2" (ground) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred "i")
                  (("3" (expand "length" 1)
                    (("3" (lift-if)
                      (("3" (ground) (("3" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (j skolem-const-decl "below(length(cdr(RL)))" real_bands nil)
    (i skolem-const-decl "below(length(cdr(RL)))" real_bands nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (RL skolem-const-decl "list[RealBand]" real_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(length(cdr(RL)))" real_bands nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (remove_last_strictly_increasing_real 0
  (remove_last_strictly_increasing_real-1 nil 3634304411
   ("" (skeep)
    (("" (lemma "remove_last_def")
      (("" (inst?)
        (("" (assert)
          (("" (expand "strictly_increasing_real?")
            (("" (flatten)
              (("" (split)
                (("1" (skeep)
                  (("1" (inst - "i")
                    (("1" (assert)
                      (("1" (typepred "i")
                        (("1" (rewrite "length_remove_last" -1)
                          (("1" (assert)
                            (("1" (inst - "i") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst-cp - "i")
                    (("2" (inst - "j")
                      (("2" (assert)
                        (("2" (typepred "j")
                          (("2" (rewrite "length_remove_last" -1)
                            (("2" (assert)
                              (("2"
                                (inst - "i" "j")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_0_nnreal formula-decl nil min_max reals)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_remove_last formula-decl nil real_bands nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list type-decl nil list_adt nil)
    (RealBand type-eq-decl nil real_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (remove_last_def formula-decl nil real_bands nil))
   shostak))
 (intersect_TCC1 0
  (intersect_TCC1-1 nil 3634301343 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (intersect subtype "0" "below[length[RealBand](rl)]")))
 (intersect_TCC2 0
  (intersect_TCC2-1 nil 3634301343 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (intersect subtype
    "(number_fields.-)(list_props[RealBand].length(real_bands.rl), 1)"
    "below[length[RealBand](rl)]")))
 (intersect_TCC3 0
  (intersect_TCC3-1 nil 3634301343 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (r!1 skolem-const-decl "real" real_bands nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (RL!1 skolem-const-decl "{RL | strictly_increasing_real?(RL)}"
     real_bands nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int nonempty-type-eq-decl nil integers nil)
    (length_null formula-decl nil more_list_props structures)
    (in? const-decl "bool" real_bands nil))
   nil
   (intersect subtype "list_adt[RealBand].null"
    "{rl: list_adt[RealBand].list | booleans.AND((booleans.IMPLIES(reals.>(list_props[RealBand].length(rl), 0), (booleans.AND(reals.<=(real_bands.min, list_props[RealBand].nth(rl, 0)`lb), reals.<=(list_props[RealBand].nth(rl, (number_fields.-)(list_props[RealBand].length(rl), 1))`ub, real_bands.max))))), FORALL (r: reals.real): booleans.IMPLIES((booleans.AND(reals.<=(real_bands.min, r), reals.<=(r, real_bands.max))), (booleans.IFF(EXISTS (j: naturalnumbers.below(list_props[RealBand].length(real_bands.RL))): real_bands.in?(list_props[RealBand].nth(real_bands.RL, j), r), EXISTS (j: naturalnumbers.below(list_props[RealBand].length(rl))): real_bands.in?(list_props[RealBand].nth(rl, j), r)))))}")))
 (intersect_TCC4 0
  (intersect_TCC4-1 nil 3634301343 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (intersect subtype "0" "below[length[RealBand](RL)]")))
 (intersect_TCC5 0
  (intersect_TCC5-1 nil 3634301343
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (intersect subtype "real_bands.RL" "(list_adt[RealBand].cons?)")))
 (intersect_TCC6 0
  (intersect_TCC6-1 nil 3634301343
   ("" (skeep)
    (("" (typepred "RL")
      (("" (expand "strictly_increasing_real?")
        (("" (flatten)
          (("" (split)
            (("1" (skeep)
              (("1" (inst - "i+1")
                (("1" (expand "nth" -1) (("1" (propax) nil nil)) nil)
                 ("2" (typepred "i")
                  (("2" (expand "length" +)
                    (("2" (lift-if) (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (inst - "i+1" "j+1")
                (("1" (assert)
                  (("1" (expand "nth" -3) (("1" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (typepred "j")
                  (("2" (expand "length" 1)
                    (("2" (lift-if)
                      (("2" (ground) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred "i")
                  (("3" (expand "length" 1)
                    (("3" (lift-if)
                      (("3" (ground) (("3" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (j skolem-const-decl "below(length(cdr[RealBand](RL)))" real_bands
     nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL)))" real_bands
       nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (RL skolem-const-decl "{RL | strictly_increasing_real?(RL)}"
     real_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL)))" real_bands
       nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil))
   nil
   (intersect subtype "list_adt[RealBand].cdr(real_bands.RL)"
    "{RL | real_bands.strictly_increasing_real?(real_bands.RL)}")))
 (intersect_TCC7 0
  (intersect_TCC7-1 nil 3634301343
   ("" (skeep*)
    (("" (expand "length" 2 2)
      (("" (lift-if) (("" (ground) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (intersect termination
    "real_bands.intersect(list_adt[RealBand].cdr(real_bands.RL), real_bands.min, real_bands.max)"
    "nil")))
 (intersect_TCC8 0
  (intersect_TCC8-1 nil 3634301343
   ("" (skeep*)
    (("" (assert)
      (("" (name "G" "v(cdr[RealBand](RL), min, max)")
        (("1" (replaces -1)
          (("1" (typepred "G")
            (("1" (assert)
              (("1" (split +)
                (("1" (propax) nil nil)
                 ("2" (assert)
                  (("2" (skeep)
                    (("2" (assert)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (skosimp*)
                            (("1" (case "j!1 = 0")
                              (("1"
                                (assert)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (expand "in?" -1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst - "r")
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (hide -6)
                                      (("2"
                                        (split -5)
                                        (("1"
                                          (skeep -)
                                          (("1"
                                            (inst + "j")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "G")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst + "j!1-1")
                                          (("1"
                                            (expand "nth" -1)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (typepred "j!1")
                                            (("2"
                                              (expand "length" -1)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (split -)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (skeep)
                            (("2" (inst - "r")
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (hide -5)
                                    (("2"
                                      (split -5)
                                      (("1"
                                        (skeep -)
                                        (("1"
                                          (inst + "j!1+1")
                                          (("1"
                                            (expand "nth" 1)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (typepred "j!1")
                                            (("2"
                                              (expand "length" 1)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (ground)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (inst + "j") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "length" 1 2)
          (("2" (hide 3)
            (("2" (lift-if)
              (("2" (ground) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("3" (typepred "RL")
          (("3" (hide 3)
            (("3" (expand "strictly_increasing_real?")
              (("3" (flatten)
                (("3" (split)
                  (("1" (skeep)
                    (("1" (inst - "i+1")
                      (("1" (expand "nth" -1) (("1" (propax) nil nil))
                        nil)
                       ("2" (typepred "i")
                        (("2" (expand "length" 1)
                          (("2" (lift-if)
                            (("2" (ground) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (inst - "i+1" "j+1")
                      (("1" (assert)
                        (("1" (expand "nth" -3)
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (typepred "j")
                        (("2" (expand "length" 1)
                          (("2" (lift-if)
                            (("2" (ground) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (typepred "i")
                        (("3" (expand "length" 1)
                          (("3" (lift-if)
                            (("3" (ground) (("3" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (hide 3) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((j skolem-const-decl "below(length(cdr[RealBand](RL)))" real_bands
     nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL)))" real_bands
       nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL)))" real_bands
       nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (j!1 skolem-const-decl "below(length(cdr[RealBand](RL)))"
     real_bands nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (j!1 skolem-const-decl "below(length(RL))" real_bands nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (v skolem-const-decl "[d1:
   {z: [{RL | strictly_increasing_real?(RL)}, real, real] |
      length(z`1) < length(RL)} ->
   {rl: list[RealBand] |
      (length(rl) > 0 IMPLIES
        (d1`2 <= nth(rl, 0)`lb AND nth(rl, length(rl) - 1)`ub <= d1`3))
       AND
       FORALL (r: real):
         (d1`2 <= r AND r <= d1`3) IMPLIES
          ((EXISTS (j: below(length(d1`1))): in?(nth(d1`1, j), r)) IFF
            (EXISTS (j: below(length(rl))): in?(nth(rl, j), r)))}]"
     real_bands nil)
    (j skolem-const-decl "below(length(G))" real_bands nil)
    (G skolem-const-decl "{rl: list[RealBand] |
   (length(rl) > 0 IMPLIES
     (min <= nth(rl, 0)`lb AND nth(rl, length(rl) - 1)`ub <= max))
    AND
    FORALL (r: real):
      (min <= r AND r <= max) IMPLIES
       ((EXISTS (j: below(length(cdr[RealBand](RL)))):
           in?(nth(cdr[RealBand](RL), j), r))
         IFF (EXISTS (j: below(length(rl))): in?(nth(rl, j), r)))}"
     real_bands nil)
    (RL skolem-const-decl "{RL | strictly_increasing_real?(RL)}"
     real_bands nil)
    (max skolem-const-decl "real" real_bands nil)
    (min skolem-const-decl "real" real_bands nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (in? const-decl "bool" real_bands nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (intersect subtype
    "real_bands.intersect(list_adt[RealBand].cdr(real_bands.RL), real_bands.min, real_bands.max)"
    "{rl: list_adt[RealBand].list | booleans.AND((booleans.IMPLIES(reals.>(list_props[RealBand].length(rl), 0), (booleans.AND(reals.<=(real_bands.min, list_props[RealBand].nth(rl, 0)`lb), reals.<=(list_props[RealBand].nth(rl, (number_fields.-)(list_props[RealBand].length(rl), 1))`ub, real_bands.max))))), FORALL (r: reals.real): booleans.IMPLIES((booleans.AND(reals.<=(real_bands.min, r), reals.<=(r, real_bands.max))), (booleans.IFF(EXISTS (j: naturalnumbers.below(list_props[RealBand].length(real_bands.RL))): real_bands.in?(list_props[RealBand].nth(real_bands.RL, j), r), EXISTS (j: naturalnumbers.below(list_props[RealBand].length(rl))): real_bands.in?(list_props[RealBand].nth(rl, j), r)))))}")))
 (intersect_TCC9 0
  (intersect_TCC9-1 nil 3634301343
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (intersect subtype
    "(number_fields.-)(list_props[RealBand].length(real_bands.RL), 1)"
    "below[length[RealBand](RL)]")))
 (intersect_TCC10 0
  (intersect_TCC10-1 nil 3634301343
   ("" (skeep)
    (("" (lemma "length_remove_last")
      (("" (inst?)
        (("" (assert)
          (("" (case "NOT length(remove_last(RL)) = length(RL)-1")
            (("1" (expand "max")
              (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)
             ("2" (hide -2)
              (("2" (typepred "RL")
                (("2" (lemma "remove_last_def")
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (expand "strictly_increasing_real?")
                        (("2" (flatten)
                          (("2" (split +)
                            (("1" (skeep)
                              (("1"
                                (inst - "i")
                                (("1"
                                  (inst - "i")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (inst-cp - "i")
                                (("2"
                                  (inst - "j")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst - "i" "j")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (remove_last_def formula-decl nil real_bands nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (RealBand type-eq-decl nil real_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (length_remove_last formula-decl nil real_bands nil))
   nil
   (intersect subtype "real_bands.remove_last(real_bands.RL)"
    "{RL | real_bands.strictly_increasing_real?(real_bands.RL)}")))
 (intersect_TCC11 0
  (intersect_TCC11-2 "" 3794669376
   ("" (skeep*)
    (("" (assert)
      (("" (lemma "length_remove_last")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_0_nnreal formula-decl nil min_max reals)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (length_remove_last formula-decl nil real_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (intersect termination
    "real_bands.intersect(real_bands.remove_last(real_bands.RL), real_bands.min, real_bands.max)"
    "nil"))
  (intersect_TCC11-1 nil 3634301343
   ("" (skeep*)
    (("" (assert)
      (("" (lemma "length_remove_last")
        (("" (inst?)
          (("" (assert)
            (("" (case "length(remove_last(RL))>0")
              (("1" (hide-all-but (-1 5))
                (("1" (grind :exclude "remove_last") nil nil)) nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_0_nnreal formula-decl nil min_max reals)) nil
   (intersect termination
    "real_bands.intersect(real_bands.remove_last(real_bands.RL), real_bands.min, real_bands.max)"
    "nil")))
 (intersect_TCC12 0
  (intersect_TCC12-1 nil 3634301343
   ("" (skeep*)
    (("" (assert)
      (("" (name "G" "v(remove_last(RL), min, max)")
        (("1" (replaces -1)
          (("1" (typepred "G")
            (("1" (assert)
              (("1" (split +)
                (("1" (propax) nil nil)
                 ("2" (assert)
                  (("2" (skeep)
                    (("2" (inst - "r")
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (split +)
                            (("1" (flatten)
                              (("1"
                                (skeep -)
                                (("1"
                                  (hide -6)
                                  (("1"
                                    (split -5)
                                    (("1"
                                      (skeep -)
                                      (("1"
                                        (inst + "j!1")
                                        (("1"
                                          (lemma "G")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst + "j")
                                      (("1"
                                        (lemma "remove_last_def")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "in?")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "in?" -1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma
                                               "length_remove_last")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (hide -5)
                                (("2"
                                  (split -5)
                                  (("1"
                                    (skeep -)
                                    (("1"
                                      (inst + "j")
                                      (("1"
                                        (lemma "remove_last_def")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst - "j")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "length_remove_last")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "j")
                                        (("2"
                                          (lemma "length_remove_last")
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep -)
                                    (("2" (inst + "j") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 4)
          (("2" (lemma "length_remove_last")
            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
          nil)
         ("3" (hide 4)
          (("3" (hide -1)
            (("3" (hide 2)
              (("3" (typepred "RL")
                (("3" (lemma "length_remove_last")
                  (("3" (inst?)
                    (("3" (assert)
                      (("3" (lemma "remove_last_def")
                        (("3" (inst?)
                          (("3" (assert)
                            (("3" (expand "strictly_increasing_real?")
                              (("3"
                                (flatten)
                                (("3"
                                  (split)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst - "i")
                                      (("1"
                                        (inst - "i")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (inst-cp - "i")
                                      (("2"
                                        (inst - "j")
                                        (("2"
                                          (inst - "i" "j")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((j skolem-const-decl "below(length(remove_last(RL)))" real_bands
     nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_0_nnreal formula-decl nil min_max reals)
    (length_remove_last formula-decl nil real_bands nil)
    (remove_last_def formula-decl nil real_bands nil)
    (j skolem-const-decl "below(length(RL))" real_bands nil)
    (v skolem-const-decl "[d1:
   {z: [{RL | strictly_increasing_real?(RL)}, real, real] |
      length(z`1) < length(RL)} ->
   {rl: list[RealBand] |
      (length(rl) > 0 IMPLIES
        (d1`2 <= nth(rl, 0)`lb AND nth(rl, length(rl) - 1)`ub <= d1`3))
       AND
       FORALL (r: real):
         (d1`2 <= r AND r <= d1`3) IMPLIES
          ((EXISTS (j: below(length(d1`1))): in?(nth(d1`1, j), r)) IFF
            (EXISTS (j: below(length(rl))): in?(nth(rl, j), r)))}]"
     real_bands nil)
    (j!1 skolem-const-decl "below(length(G))" real_bands nil)
    (G skolem-const-decl "{rl: list[RealBand] |
   (length(rl) > 0 IMPLIES
     (min <= nth(rl, 0)`lb AND nth(rl, length(rl) - 1)`ub <= max))
    AND
    FORALL (r: real):
      (min <= r AND r <= max) IMPLIES
       ((EXISTS (j: below(length(remove_last(RL)))):
           in?(nth(remove_last(RL), j), r))
         IFF (EXISTS (j: below(length(rl))): in?(nth(rl, j), r)))}"
     real_bands nil)
    (RL skolem-const-decl "{RL | strictly_increasing_real?(RL)}"
     real_bands nil)
    (max skolem-const-decl "real" real_bands nil)
    (min skolem-const-decl "real" real_bands nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (in? const-decl "bool" real_bands nil)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (intersect subtype
    "real_bands.intersect(real_bands.remove_last(real_bands.RL), real_bands.min, real_bands.max)"
    "{rl: list_adt[RealBand].list | booleans.AND((booleans.IMPLIES(reals.>(list_props[RealBand].length(rl), 0), (booleans.AND(reals.<=(real_bands.min, list_props[RealBand].nth(rl, 0)`lb), reals.<=(list_props[RealBand].nth(rl, (number_fields.-)(list_props[RealBand].length(rl), 1))`ub, real_bands.max))))), FORALL (r: reals.real): booleans.IMPLIES((booleans.AND(reals.<=(real_bands.min, r), reals.<=(r, real_bands.max))), (booleans.IFF(EXISTS (j: naturalnumbers.below(list_props[RealBand].length(real_bands.RL))): real_bands.in?(list_props[RealBand].nth(real_bands.RL, j), r), EXISTS (j: naturalnumbers.below(list_props[RealBand].length(rl))): real_bands.in?(list_props[RealBand].nth(rl, j), r)))))}")))
 (intersect_TCC13 0
  (intersect_TCC13-1 nil 3634301343
   ("" (skeep*)
    (("" (split 4)
      (("1" (flatten) (("1" (grind) nil nil)) nil)
       ("2" (skeep)
        (("2" (split)
          (("1" (flatten)
            (("1" (skeep)
              (("1" (case "NOT j = 0")
                (("1" (assert) nil nil)
                 ("2" (inst + "0")
                  (("2" (replaces -1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (skeep)
              (("2" (case "NOT j = 0")
                (("1" (typepred "j") (("1" (grind) nil nil)) nil)
                 ("2" (replace -1)
                  (("2" (inst + "0") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (in? const-decl "bool" real_bands nil)
    (length_singleton formula-decl nil more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (intersect subtype
    "(: (# lb := real_bands.min, ub := real_bands.max #) :)"
    "{rl: list_adt[RealBand].list | booleans.AND((booleans.IMPLIES(reals.>(list_props[RealBand].length(rl), 0), (booleans.AND(reals.<=(real_bands.min, list_props[RealBand].nth(rl, 0)`lb), reals.<=(list_props[RealBand].nth(rl, (number_fields.-)(list_props[RealBand].length(rl), 1))`ub, real_bands.max))))), FORALL (r: reals.real): booleans.IMPLIES((booleans.AND(reals.<=(real_bands.min, r), reals.<=(r, real_bands.max))), (booleans.IFF(EXISTS (j: naturalnumbers.below(list_props[RealBand].length(real_bands.RL))): real_bands.in?(list_props[RealBand].nth(real_bands.RL, j), r), EXISTS (j: naturalnumbers.below(list_props[RealBand].length(rl))): real_bands.in?(list_props[RealBand].nth(rl, j), r)))))}")))
 (intersect_TCC14 0
  (intersect_TCC14-1 nil 3634301343
   ("" (skeep*)
    (("" (assert)
      (("" (case "length(remove_last(RL))>0")
        (("1" (grind) nil nil)
         ("2" (lemma "length_remove_last")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_0_nnreal formula-decl nil min_max reals)
    (length_remove_last formula-decl nil real_bands nil)
    (nth def-decl "T" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (intersect subtype "real_bands.remove_last(real_bands.RL)"
    "(list_adt[RealBand].cons?)")))
 (intersect_TCC15 0
  (intersect_TCC15-1 nil 3634301343
   ("" (skeep*)
    (("" (split)
      (("1" (propax) nil nil) ("2" (propax) nil nil)
       ("3" (split 5)
        (("1" (flatten)
          (("1" (assert)
            (("1" (rewrite "nth_append")
              (("1" (rewrite "nth_append")
                (("1" (rewrite "length_append")
                  (("1" (expand "length" 1)
                    (("1" (assert)
                      (("1" (lemma "length_remove_last")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (expand "nth" 1)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (rewrite "length_append" 1)
                    (("2" (expand "length" 1) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (assert)
            (("2" (split)
              (("1" (flatten)
                (("1" (skeep)
                  (("1" (inst + "j")
                    (("1" (rewrite "nth_append")
                      (("1" (expand "length" 1)
                        (("1" (expand "nth" 1 1)
                          (("1" (assert)
                            (("1" (lemma "length_remove_last")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "length" -1 1)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (split -)
                                        (("1"
                                          (flatten)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (both-sides "-" "1" -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (replace -9 1)
                                                        (("1"
                                                          (expand
                                                           "in?")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "nth" -3)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "remove_last_def")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "j")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (replace -8 2)
                                                      (("3"
                                                        (expand
                                                         "nth"
                                                         2)
                                                        (("3"
                                                          (expand
                                                           "in?")
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (expand
                                                               "nth"
                                                               -2)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "length" 1)
                        (("2" (lemma "length_remove_last")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (lemma "length_remove_last")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "length" -1)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (ground)
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (lift-if)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (both-sides
                                                       "-"
                                                       "1"
                                                       -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (typepred
                                                               "j")
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 -1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "length_append")
                      (("2" (expand "length" 1)
                        (("2" (lemma "length_remove_last")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (expand "length" -1 1)
                                (("2"
                                  (lift-if)
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (skeep)
                  (("2" (inst + "j")
                    (("1" (assert)
                      (("1" (rewrite "nth_append" -)
                        (("1" (expand "length" -1)
                          (("1"
                            (case "NOT length[RealBand](cdr[RealBand](remove_last(RL))) = length(RL)-2")
                            (("1" (lemma "length_remove_last")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "length" -1 1)
                                    (("1"
                                      (lift-if -1)
                                      (("1"
                                        (split -)
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "nth" -2)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (ground)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (replace -8 -1)
                                          (("1"
                                            (expand "in?")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "remove_last_def")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst - "j")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "nth" -1 1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (replace -9 -2)
                                        (("3"
                                          (expand "in?" -2)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (expand "in?")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (typepred "j")
                                        (("4"
                                          (rewrite "length_append" -1)
                                          (("4"
                                            (expand "length" -1)
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (case "length(remove_last(RL))>0")
                              (("1" (grind) nil nil)
                               ("2"
                                (lemma "length_remove_last")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "length" 1)
                          (("2" (lemma "length_remove_last")
                            (("2" (inst?)
                              (("2"
                                (expand "length" -1 1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (typepred "j")
                                            (("2"
                                              (rewrite "length_append")
                                              (("2"
                                                (expand "length" -1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "j")
                      (("2" (rewrite "length_append")
                        (("2" (expand "length" -1)
                          (("2" (lemma "length_remove_last")
                            (("2" (inst?)
                              (("2"
                                (expand "length" -1 1)
                                (("2"
                                  (lift-if)
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((j skolem-const-decl
     "below(length(append(cons(newfrst, cdr(remove_last(RL))), (: newlast :))))"
     real_bands nil)
    (reverse def-decl "list[T]" list_props nil)
    (remove_last_def formula-decl nil real_bands nil)
    (in? const-decl "bool" real_bands nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (odd? const-decl "bool" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (< const-decl "bool" reals nil)
    (RL skolem-const-decl "{RL | strictly_increasing_real?(RL)}"
     real_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (j skolem-const-decl "below(length(RL))" real_bands nil)
    (newfrst skolem-const-decl "[# lb: real, ub: real #]" real_bands
     nil)
    (newlast skolem-const-decl "[# lb: real, ub: real #]" real_bands
     nil)
    (nth def-decl "T" list_props nil)
    (max_0_nnreal formula-decl nil min_max reals)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (length_remove_last formula-decl nil real_bands nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (RealBand type-eq-decl nil real_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (nth_append formula-decl nil more_list_props structures)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (intersect subtype
    "list_props[[# lb: real, ub: real #]].append(list_adt[[# lb: real, ub: real #]].cons(real_bands.newfrst, list_adt[RealBand].cdr(real_bands.remove_last(real_bands.RL))), (: real_bands.newlast :))"
    "{rl: list_adt[RealBand].list | booleans.AND((booleans.IMPLIES(reals.>(list_props[RealBand].length(rl), 0), (booleans.AND(reals.<=(real_bands.min, list_props[RealBand].nth(rl, 0)`lb), reals.<=(list_props[RealBand].nth(rl, (number_fields.-)(list_props[RealBand].length(rl), 1))`ub, real_bands.max))))), FORALL (r: reals.real): booleans.IMPLIES((booleans.AND(reals.<=(real_bands.min, r), reals.<=(r, real_bands.max))), (booleans.IFF(EXISTS (j: naturalnumbers.below(list_props[RealBand].length(real_bands.RL))): real_bands.in?(list_props[RealBand].nth(real_bands.RL, j), r), EXISTS (j: naturalnumbers.below(list_props[RealBand].length(rl))): real_bands.in?(list_props[RealBand].nth(rl, j), r)))))}")))
 (intersect_TCC16 0
  (intersect_TCC16-1 nil 3638207403
   ("" (skeep*) (("" (grind) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (intersect subtype "real_bands.RL" "(list_adt[RealBand].cons?)")))
 (intersect_TCC17 0
  (intersect_TCC17-2 "" 3794669379
   ("" (skeep*)
    (("" (assert)
      (("" (expand "length" 6)
        (("" (assert)
          (("" (case "length(cdr(RL)) = length(RL)-1")
            (("1" (replace -1)
              (("1" (assert)
                (("1" (split +)
                  (("1" (expand "nth" 1)
                    (("1" (replace -3) (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (expand "nth" 1)
                    (("2" (lift-if)
                      (("2" (ground)
                        (("2" (expand "nth" 4)
                          (("2" (assert) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep)
                    (("3" (ground)
                      (("1" (skeep)
                        (("1" (inst + "j")
                          (("1" (expand "nth" 1)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (replace -6)
                                    (("1"
                                      (expand "in?")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "nth" -1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "length" 1)
                            (("2" (typepred "j")
                              (("2"
                                (expand "length" -1)
                                (("2"
                                  (lift-if)
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst + "j")
                          (("1" (expand "nth" -1)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (replace -7)
                                  (("1"
                                    (expand "in?")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "nth" 2)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "j")
                            (("2" (expand "length" -1)
                              (("2"
                                (expand "length" 1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (ground)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "length" 1 2)
              (("2" (lift-if)
                (("2" (split 1)
                  (("1" (flatten)
                    (("1" (hide 7) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (j skolem-const-decl "below(length(cons(newfrst, cdr(RL))))"
     real_bands nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (in? const-decl "bool" real_bands nil)
    (newfrst skolem-const-decl "[# lb: real, ub: real #]" real_bands
     nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (j skolem-const-decl "below(length(RL))" real_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (RL skolem-const-decl "{RL | strictly_increasing_real?(RL)}"
     real_bands nil)
    (< const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (intersect subtype
    "list_adt[[# lb: real, ub: real #]].cons(real_bands.newfrst, list_adt[RealBand].cdr(real_bands.RL))"
    "{rl: list_adt[RealBand].list | booleans.AND((booleans.IMPLIES(reals.>(list_props[RealBand].length(rl), 0), (booleans.AND(reals.<=(real_bands.min, list_props[RealBand].nth(rl, 0)`lb), reals.<=(list_props[RealBand].nth(rl, (number_fields.-)(list_props[RealBand].length(rl), 1))`ub, real_bands.max))))), FORALL (r: reals.real): booleans.IMPLIES((booleans.AND(reals.<=(real_bands.min, r), reals.<=(r, real_bands.max))), (booleans.IFF(EXISTS (j: naturalnumbers.below(list_props[RealBand].length(real_bands.RL))): real_bands.in?(list_props[RealBand].nth(real_bands.RL, j), r), EXISTS (j: naturalnumbers.below(list_props[RealBand].length(rl))): real_bands.in?(list_props[RealBand].nth(rl, j), r)))))}"))
  (intersect_TCC17-1 nil 3638207403
   ("" (skeep*)
    (("" (assert)
      (("" (expand "length" 6)
        (("" (assert)
          (("" (case "length(cdr(RL)) = length(RL)-1")
            (("1" (replace -1)
              (("1" (assert)
                (("1" (split +)
                  (("1" (expand "nth" 1)
                    (("1" (replace -3) (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (expand "nth" 1)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (ground)
                          (("2" (expand "nth" 3)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep)
                    (("3" (ground)
                      (("1" (skeep)
                        (("1" (inst + "j")
                          (("1" (expand "nth" 1)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (replace -6)
                                    (("1"
                                      (expand "in?")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "nth" -1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "length" 1)
                            (("2" (typepred "j")
                              (("2"
                                (expand "length" -1)
                                (("2"
                                  (lift-if)
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst + "j")
                          (("1" (expand "nth" -1)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (replace -7)
                                  (("1"
                                    (expand "in?")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "nth" 2)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "j")
                            (("2" (expand "length" -1)
                              (("2"
                                (expand "length" 1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (ground)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "length" 1 2)
              (("2" (lift-if)
                (("2" (split 1)
                  (("1" (flatten)
                    (("1" (hide 7)
                      (("1" (hide-all-but (-1 6))
                        (("1" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("3" (hide-all-but (1 6)) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (intersect subtype
    "list_adt[[# lb: real, ub: real #]].cons(real_bands.newfrst, list_adt[RealBand].cdr(real_bands.RL))"
    "{rl: list_adt[RealBand].list | booleans.AND((booleans.IMPLIES(reals.>(list_props[RealBand].length(rl), 0), (booleans.AND(reals.<=(real_bands.min, list_props[RealBand].nth(rl, 0)`lb), reals.<=(list_props[RealBand].nth(rl, (number_fields.-)(list_props[RealBand].length(rl), 1))`ub, real_bands.max))))), FORALL (r: reals.real): booleans.IMPLIES((booleans.AND(reals.<=(real_bands.min, r), reals.<=(r, real_bands.max))), (booleans.IFF(EXISTS (j: naturalnumbers.below(list_props[RealBand].length(real_bands.RL))): real_bands.in?(list_props[RealBand].nth(real_bands.RL, j), r), EXISTS (j: naturalnumbers.below(list_props[RealBand].length(rl))): real_bands.in?(list_props[RealBand].nth(rl, j), r)))))}")))
 (intersect_TCC18 0
  (intersect_TCC18-2 "" 3794669381
   ("" (skeep*)
    (("" (assert)
      (("" (split 7)
        (("1" (flatten)
          (("1" (rewrite "nth_append" +)
            (("1" (rewrite "nth_append" +)
              (("1" (rewrite "length_append")
                (("1" (assert)
                  (("1" (lemma "length_remove_last")
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (lift-if)
                              (("1"
                                (split +)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lemma "remove_last_def")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst - "0")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -6 +)
                                              (("1"
                                                (expand "nth" 1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -4)
                                      (("2"
                                        (split +)
                                        (("1"
                                          (expand "nth" 1 1)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (expand "nth" 1 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (rewrite "length_append")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (hide (5 6))
            (("2" (lemma "length_remove_last")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (ground)
                    (("1" (skeep)
                      (("1" (inst + "j")
                        (("1" (rewrite "nth_append")
                          (("1" (replace -2)
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (ground)
                                  (("1"
                                    (lemma "remove_last_def")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "j")
                                    (("2"
                                      (expand "nth" 2)
                                      (("2"
                                        (replace -7)
                                        (("2"
                                          (expand "in?")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "length_append" 1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (inst + "j")
                        (("1" (rewrite "nth_append" -)
                          (("1" (replace -2)
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (ground)
                                  (("1"
                                    (lemma "remove_last_def")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "j")
                                    (("2"
                                      (rewrite "length_append" -1)
                                      (("2"
                                        (replace -3)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "nth" -2)
                                            (("2"
                                              (replace -7)
                                              (("2"
                                                (expand "in?")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "j")
                            (("2" (rewrite "length_append" -1) nil
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "j")
                          (("2" (rewrite "length_append" -1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((j skolem-const-decl
     "below(length(append(remove_last(RL), (: newlast :))))" real_bands
     nil)
    (in? const-decl "bool" real_bands nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (RL skolem-const-decl "{RL | strictly_increasing_real?(RL)}"
     real_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (j skolem-const-decl "below(length(RL))" real_bands nil)
    (newlast skolem-const-decl "[# lb: real, ub: real #]" real_bands
     nil)
    (nth def-decl "T" list_props nil)
    (remove_last_def formula-decl nil real_bands nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (max_0_nnreal formula-decl nil min_max reals)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (length_remove_last formula-decl nil real_bands nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (RealBand type-eq-decl nil real_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (list type-decl nil list_adt nil)
    (nth_append formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (intersect subtype
    "list_props[RealBand].append(real_bands.remove_last(real_bands.RL), (: real_bands.newlast :))"
    "{rl: list_adt[RealBand].list | booleans.AND((booleans.IMPLIES(reals.>(list_props[RealBand].length(rl), 0), (booleans.AND(reals.<=(real_bands.min, list_props[RealBand].nth(rl, 0)`lb), reals.<=(list_props[RealBand].nth(rl, (number_fields.-)(list_props[RealBand].length(rl), 1))`ub, real_bands.max))))), FORALL (r: reals.real): booleans.IMPLIES((booleans.AND(reals.<=(real_bands.min, r), reals.<=(r, real_bands.max))), (booleans.IFF(EXISTS (j: naturalnumbers.below(list_props[RealBand].length(real_bands.RL))): real_bands.in?(list_props[RealBand].nth(real_bands.RL, j), r), EXISTS (j: naturalnumbers.below(list_props[RealBand].length(rl))): real_bands.in?(list_props[RealBand].nth(rl, j), r)))))}"))
  (intersect_TCC18-1 nil 3638207403
   ("" (skeep*)
    (("" (assert)
      (("" (split 7)
        (("1" (flatten)
          (("1" (rewrite "nth_append" +)
            (("1" (rewrite "nth_append" +)
              (("1" (rewrite "length_append")
                (("1" (assert)
                  (("1" (lemma "length_remove_last")
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (lift-if)
                              (("1"
                                (split +)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lemma "remove_last_def")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst - "0")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -6 +)
                                              (("1"
                                                (expand "nth" 1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -4)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split +)
                                          (("1"
                                            (expand "nth" 1 1)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (expand "nth" 1 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (rewrite "length_append")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (hide (3 4))
            (("2" (lemma "length_remove_last")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (ground)
                    (("1" (skeep)
                      (("1" (inst + "j")
                        (("1" (rewrite "nth_append")
                          (("1" (replace -2)
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (ground)
                                  (("1"
                                    (lemma "remove_last_def")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "j")
                                    (("2"
                                      (expand "nth" 2)
                                      (("2"
                                        (replace -7)
                                        (("2"
                                          (expand "in?")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "length_append" 1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (inst + "j")
                        (("1" (rewrite "nth_append" -)
                          (("1" (replace -2)
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (ground)
                                  (("1"
                                    (lemma "remove_last_def")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "j")
                                    (("2"
                                      (rewrite "length_append" -1)
                                      (("2"
                                        (replace -3)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "nth" -2)
                                            (("2"
                                              (replace -7)
                                              (("2"
                                                (expand "in?")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "j")
                            (("2" (rewrite "length_append" -1) nil
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "j")
                          (("2" (rewrite "length_append" -1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_0_nnreal formula-decl nil min_max reals)
    (length_singleton formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures))
   nil
   (intersect subtype
    "list_props[RealBand].append(real_bands.remove_last(real_bands.RL), (: real_bands.newlast :))"
    "{rl: list_adt[RealBand].list | booleans.AND((booleans.IMPLIES(reals.>(list_props[RealBand].length(rl), 0), (booleans.AND(reals.<=(real_bands.min, list_props[RealBand].nth(rl, 0)`lb), reals.<=(list_props[RealBand].nth(rl, (number_fields.-)(list_props[RealBand].length(rl), 1))`ub, real_bands.max))))), FORALL (r: reals.real): booleans.IMPLIES((booleans.AND(reals.<=(real_bands.min, r), reals.<=(r, real_bands.max))), (booleans.IFF(EXISTS (j: naturalnumbers.below(list_props[RealBand].length(real_bands.RL))): real_bands.in?(list_props[RealBand].nth(real_bands.RL, j), r), EXISTS (j: naturalnumbers.below(list_props[RealBand].length(rl))): real_bands.in?(list_props[RealBand].nth(rl, j), r)))))}")))
 (intersect_TCC19 0
  (intersect_TCC19-1 nil 3638207403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (in? const-decl "bool" real_bands nil))
   nil
   (intersect subtype "real_bands.RL"
    "{rl: list_adt[RealBand].list | booleans.AND((booleans.IMPLIES(reals.>(list_props[RealBand].length(rl), 0), (booleans.AND(reals.<=(real_bands.min, list_props[RealBand].nth(rl, 0)`lb), reals.<=(list_props[RealBand].nth(rl, (number_fields.-)(list_props[RealBand].length(rl), 1))`ub, real_bands.max))))), FORALL (r: reals.real): booleans.IMPLIES((booleans.AND(reals.<=(real_bands.min, r), reals.<=(r, real_bands.max))), (booleans.IFF(EXISTS (j: naturalnumbers.below(list_props[RealBand].length(real_bands.RL))): real_bands.in?(list_props[RealBand].nth(real_bands.RL, j), r), EXISTS (j: naturalnumbers.below(list_props[RealBand].length(rl))): real_bands.in?(list_props[RealBand].nth(rl, j), r)))))}")))
 (append_realband_spec_TCC1 0
  (append_realband_spec_TCC1-1 nil 3638274833
   ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (append_realband_spec subtype "0" "below[length[RealBand](RL2)]")))
 (append_realband_spec_TCC2 0
  (append_realband_spec_TCC2-1 nil 3638274833
   ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (append_realband_spec subtype
    "(number_fields.-)(list_props[RealBand].length(real_bands.RL1), 1)"
    "below[length[RealBand](RL1)]")))
 (append_realband_spec_TCC3 0
  (append_realband_spec_TCC3-1 nil 3638274833
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (append_realband_spec subtype "real_bands.RL2"
    "(list_adt[RealBand].cons?)")))
 (append_realband_spec_length 0
  (append_realband_spec_length-1 nil 3638274933
   ("" (skeep)
    (("" (expand "append_realband_spec")
      (("" (lift-if)
        (("" (split +)
          (("1" (flatten)
            (("1" (rewrite "length_append")
              (("1" (rewrite "length_append")
                (("1" (rewrite "length_remove_last")
                  (("1" (expand "length" + 4)
                    (("1" (assert)
                      (("1" (lift-if +)
                        (("1" (split +)
                          (("1" (grind) nil nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten) (("2" (rewrite "length_append") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (max_0_nnreal formula-decl nil min_max reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_remove_last formula-decl nil real_bands nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (RealBand type-eq-decl nil real_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (append def-decl "list[T]" list_props nil)
    (list type-decl nil list_adt nil)
    (length_append formula-decl nil list_props nil)
    (append_realband_spec const-decl "list[RealBand]" real_bands nil))
   nil))
 (append_realband_spec_def 0
  (append_realband_spec_def-2 "" 3794669387
   ("" (skeep)
    (("" (skoletin 1)
      (("" (lemma "append_realband_spec_length")
        (("" (insteep -)
          (("" (replace -2 :dir rl)
            (("" (assert)
              (("" (case "NOT strictly_increasing_real?(AIS)")
                (("1" (hide 2)
                  (("1" (expand "append_realband_spec")
                    (("1" (lift-if)
                      (("1" (split -)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "strictly_increasing_real?")
                              (("1"
                                (flatten)
                                (("1"
                                  (split +)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (typepred "i")
                                      (("1"
                                        (replaces -6 +)
                                        (("1"
                                          (rewrite "nth_append" +)
                                          (("1"
                                            (rewrite "length_append" +)
                                            (("1"
                                              (rewrite
                                               "length_remove_last")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (rewrite
                                                       "nth_append"
                                                       +)
                                                      (("1"
                                                        (rewrite
                                                         "length_remove_last")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (lemma
                                                                 "remove_last_def")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "i")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "i")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "NOT i = length(RL1)-1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       2
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "nth"
                                                                         2
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "length(RL1)-1")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "0")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "length_remove_last"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -7)
                                                      (("2"
                                                        (hide -6)
                                                        (("2"
                                                          (inst
                                                           -
                                                           "i-length(RL1)+1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "nth"
                                                               -6)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (rewrite
                                               "length_append"
                                               1)
                                              (("2"
                                                (rewrite
                                                 "length_remove_last"
                                                 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -5
                                                     3)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split -)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (replaces -6 +)
                                      (("2"
                                        (rewrite "nth_append" +)
                                        (("1"
                                          (rewrite "length_append")
                                          (("1"
                                            (rewrite
                                             "length_remove_last"
                                             1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split +)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (rewrite
                                                       "nth_append"
                                                       +)
                                                      (("1"
                                                        (rewrite
                                                         "length_remove_last"
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (rewrite
                                                                   "nth_append"
                                                                   +)
                                                                  (("1"
                                                                    (lift-if
                                                                     +)
                                                                    (("1"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_remove_last"
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             +)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "nth_append"
                                                                                 +)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "length_remove_last"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "remove_last_def")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "RL1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (inst-cp
                                                                                                   -
                                                                                                   "i")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "i"
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (case
                                                                                             "NOT j = length(RL1)-1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   2
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "remove_last_def")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "i"
                                                                                                                 "length(RL1)-1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (rewrite
                                                                                   "length_remove_last"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "remove_last_def")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "i"
                                                                                               "length(RL1)-1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "length(RL1)-1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "0"
                                                                                                       "j-length(RL1)+1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "nth"
                                                                                                           -11
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "0")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "length_append"
                                                                     1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_remove_last"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "remove_last_def")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "i")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "j")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -8)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "length"
                                                                                           -1
                                                                                           2)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   +
                                                                   1)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite
                                                                         "nth_append"
                                                                         +)
                                                                        (("1"
                                                                          (rewrite
                                                                           "length_append"
                                                                           +)
                                                                          (("1"
                                                                            (rewrite
                                                                             "length_remove_last")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -10
                                                                                 "0"
                                                                                 "j-length(RL1)+1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth"
                                                                                     -10
                                                                                     2)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           3)
                                                                          (("2"
                                                                            (rewrite
                                                                             "length_append"
                                                                             +)
                                                                            (("2"
                                                                              (rewrite
                                                                               "length_remove_last")
                                                                              (("2"
                                                                                (typepred
                                                                                 "j")
                                                                                (("2"
                                                                                  (replace
                                                                                   -7)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "length"
                                                                                     -1
                                                                                     2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (rewrite
                                                           "length_remove_last")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (rewrite
                                                       "nth_append"
                                                       +)
                                                      (("1"
                                                        (rewrite
                                                         "length_append"
                                                         +)
                                                        (("1"
                                                          (rewrite
                                                           "length_remove_last")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -9
                                                               "i-length(RL1)+1"
                                                               "j-length(RL1)+1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -9)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "length_append"
                                                         1)
                                                        (("2"
                                                          (rewrite
                                                           "length_remove_last")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (typepred
                                                               "j")
                                                              (("2"
                                                                (replace
                                                                 -6)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -1
                                                                   2)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "length_append" 1)
                                          (("2"
                                            (rewrite
                                             "length_remove_last")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (typepred "i")
                                                (("2"
                                                  (replace -6)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1
                                                     2)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replace 1)
                            (("2"
                              (case "length(RL1)=0 OR length(RL2)=0")
                              (("1"
                                (split)
                                (("1"
                                  (case "RL1=null")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (case "AIS = RL2")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (replace -3 1)
                                        (("2"
                                          (lemma
                                           "append_null[RealBand]")
                                          (("2"
                                            (expand "append" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (case "RL2 = null")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (replace -4 +)
                                      (("1"
                                        (rewrite "append_null" +)
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split -)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand
                                       "strictly_increasing_real?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (replace -3 +)
                                              (("1"
                                                (rewrite "nth_append")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (inst - "i")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       -6
                                                       "i-length(RL1)")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (replace -4 1)
                                                (("2"
                                                  (rewrite
                                                   "nth_append"
                                                   1)
                                                  (("2"
                                                    (rewrite
                                                     "nth_append"
                                                     1)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "i"
                                                                 "j")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "i"
                                                                 "length(RL1)-1")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "length(RL1)-1")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "0")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "0"
                                                                       "j-length(RL1)")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (inst
                                                                 -8
                                                                 "i-length(RL1)"
                                                                 "j-length(RL1)")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (lift-if)
                    (("2" (split -)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "append_realband_spec")
                            (("1" (skeep)
                              (("1"
                                (ground)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (replace -8 -2)
                                    (("1"
                                      (rewrite "nth_append")
                                      (("1"
                                        (rewrite "length_append")
                                        (("1"
                                          (rewrite
                                           "length_remove_last")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (rewrite
                                                   "nth_append")
                                                  (("1"
                                                    (rewrite
                                                     "length_remove_last")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "remove_last_def")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (inst?
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (case
                                                               "r<=nth(RL1,length(RL1)-1)`ub")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "length(RL1)-1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "in?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -2
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 4
                                                                 "0")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "in?")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "length_remove_last")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst
                                                   3
                                                   "j-length(RL1)+1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "nth"
                                                       3
                                                       1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "length_append" 1)
                                        (("2"
                                          (rewrite
                                           "length_remove_last")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "length" -6 3)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst + "j")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -8 +)
                                        (("2"
                                          (rewrite "nth_append")
                                          (("1"
                                            (rewrite "length_append" 1)
                                            (("1"
                                              (rewrite
                                               "length_remove_last")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "nth_append")
                                                  (("1"
                                                    (rewrite
                                                     "length_remove_last")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split +)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "remove_last_def")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "j")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "nth"
                                                               +
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   -7)
                                                                  (("2"
                                                                    (expand
                                                                     "strictly_increasing_real?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst
                                                                         -10
                                                                         "0")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "length(RL1)-1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "in?")
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "length_remove_last")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "length_append")
                                            (("2"
                                              (rewrite
                                               "length_remove_last")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skeep)
                                  (("3"
                                    (inst + "length(RL1)-1+j")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (replace -8 +)
                                        (("3"
                                          (rewrite "nth_append" +)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (rewrite "length_append")
                                              (("1"
                                                (rewrite
                                                 "length_remove_last")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split +)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "nth_append"
                                                           +)
                                                          (("1"
                                                            (rewrite
                                                             "length_remove_last")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "NOT j = 0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     +
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -8)
                                                                        (("2"
                                                                          (expand
                                                                           "strictly_increasing_real?")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "length(RL1)-1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "in?")
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "length_remove_last")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "nth"
                                                           -2)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "length_append" 1)
                                            (("2"
                                              (rewrite
                                               "length_remove_last")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "length"
                                                   -6
                                                   3)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "append_realband_spec")
                          (("2" (replace 1)
                            (("2"
                              (case "length(RL1)=0 OR length(RL2)=0")
                              (("1"
                                (case "RL1=null OR RL2=null")
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (split -)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (case "NOT AIS = RL2")
                                        (("1"
                                          (replace -4)
                                          (("1"
                                            (expand "append" 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1)
                                      (("2"
                                        (rewrite "append_null")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -4)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-1 1))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide -6)
                                    (("2"
                                      (replace -3 +)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (ground)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (rewrite
                                                 "length_append"
                                                 -1)
                                                (("1"
                                                  (rewrite
                                                   "nth_append"
                                                   -)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst? 3)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (inst + "j")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite
                                                     "nth_append"
                                                     +)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep)
                                              (("3"
                                                (inst
                                                 +
                                                 "length(RL1)+j")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (rewrite
                                                     "nth_append")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (append_null formula-decl nil list_props nil)
    (length_null formula-decl nil more_list_props structures)
    (IntBand type-eq-decl nil int_bands nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (remove_last_def formula-decl nil real_bands nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (max_0_nnreal formula-decl nil min_max reals)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_remove_last formula-decl nil real_bands nil)
    (length_singleton formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_append formula-decl nil more_list_props structures)
    (append def-decl "list[T]" list_props nil)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (append_realband_spec_length formula-decl nil real_bands nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (append_realband_spec const-decl "list[RealBand]" real_bands nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (RealBand type-eq-decl nil real_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)
  (append_realband_spec_def-1 nil 3638274974
   ("" (skeep)
    (("" (skoletin 1)
      (("" (lemma "append_realband_spec_length")
        (("" (insteep -)
          (("" (replace -2 :dir rl)
            (("" (assert)
              (("" (case "NOT strictly_increasing_real?(AIS)")
                (("1" (hide 2)
                  (("1" (expand "append_realband_spec")
                    (("1" (lift-if)
                      (("1" (split -)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "strictly_increasing_real?")
                              (("1"
                                (flatten)
                                (("1"
                                  (split +)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (typepred "i")
                                      (("1"
                                        (replaces -6 +)
                                        (("1"
                                          (rewrite "nth_append" +)
                                          (("1"
                                            (rewrite "length_append" +)
                                            (("1"
                                              (rewrite
                                               "length_remove_last")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (rewrite
                                                       "nth_append"
                                                       +)
                                                      (("1"
                                                        (rewrite
                                                         "length_remove_last")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (lemma
                                                                 "remove_last_def")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "i")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "i")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "NOT i = length(RL1)-1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       2
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "nth"
                                                                         2
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "length(RL1)-1")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "0")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "length_remove_last"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -7)
                                                      (("2"
                                                        (hide -6)
                                                        (("2"
                                                          (inst
                                                           -
                                                           "i-length(RL1)+1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "nth"
                                                               -6)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (rewrite
                                               "length_append"
                                               1)
                                              (("2"
                                                (rewrite
                                                 "length_remove_last"
                                                 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -5
                                                     3)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (split -)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (replaces -6 +)
                                      (("2"
                                        (rewrite "nth_append" +)
                                        (("1"
                                          (rewrite "length_append")
                                          (("1"
                                            (rewrite
                                             "length_remove_last"
                                             1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split +)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (rewrite
                                                       "nth_append"
                                                       +)
                                                      (("1"
                                                        (rewrite
                                                         "length_remove_last"
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (rewrite
                                                                   "nth_append"
                                                                   +)
                                                                  (("1"
                                                                    (lift-if
                                                                     +)
                                                                    (("1"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_remove_last"
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             +)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "nth_append"
                                                                                 +)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "length_remove_last"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "remove_last_def")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "RL1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (inst-cp
                                                                                                   -
                                                                                                   "i")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "i"
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (case
                                                                                             "NOT j = length(RL1)-1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   2
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "remove_last_def")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "i"
                                                                                                                 "length(RL1)-1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (rewrite
                                                                                   "length_remove_last"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "remove_last_def")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "i"
                                                                                               "length(RL1)-1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "length(RL1)-1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "0"
                                                                                                       "j-length(RL1)+1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "nth"
                                                                                                           -11
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "0")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "length_append"
                                                                     1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_remove_last"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "remove_last_def")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "i")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "j")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -8)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "length"
                                                                                           -1
                                                                                           2)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   +
                                                                   1)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite
                                                                         "nth_append"
                                                                         +)
                                                                        (("1"
                                                                          (rewrite
                                                                           "length_append"
                                                                           +)
                                                                          (("1"
                                                                            (rewrite
                                                                             "length_remove_last")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -10
                                                                                 "0"
                                                                                 "j-length(RL1)+1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth"
                                                                                     -10
                                                                                     2)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           3)
                                                                          (("2"
                                                                            (rewrite
                                                                             "length_append"
                                                                             +)
                                                                            (("2"
                                                                              (rewrite
                                                                               "length_remove_last")
                                                                              (("2"
                                                                                (typepred
                                                                                 "j")
                                                                                (("2"
                                                                                  (replace
                                                                                   -7)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "length"
                                                                                     -1
                                                                                     2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (rewrite
                                                           "length_remove_last")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (rewrite
                                                       "nth_append"
                                                       +)
                                                      (("1"
                                                        (rewrite
                                                         "length_append"
                                                         +)
                                                        (("1"
                                                          (rewrite
                                                           "length_remove_last")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -9
                                                               "i-length(RL1)+1"
                                                               "j-length(RL1)+1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -9)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "length_append"
                                                         1)
                                                        (("2"
                                                          (rewrite
                                                           "length_remove_last")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (typepred
                                                               "j")
                                                              (("2"
                                                                (replace
                                                                 -6)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -1
                                                                   2)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "length_append" 1)
                                          (("2"
                                            (rewrite
                                             "length_remove_last")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (typepred "i")
                                                (("2"
                                                  (replace -6)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1
                                                     2)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replace 1)
                            (("2"
                              (case "length(RL1)=0 OR length(RL2)=0")
                              (("1"
                                (split)
                                (("1"
                                  (case "RL1=null")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (case "AIS = RL2")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (replace -3 1)
                                        (("2"
                                          (lemma
                                           "append_null[RealBand]")
                                          (("2"
                                            (expand "append" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (case "RL2 = null")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (replace -4 +)
                                      (("1"
                                        (rewrite "append_null" +)
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split -)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand
                                       "strictly_increasing_real?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (replace -3 +)
                                              (("1"
                                                (rewrite "nth_append")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (inst - "i")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       -6
                                                       "i-length(RL1)")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (replace -4 1)
                                                (("2"
                                                  (rewrite
                                                   "nth_append"
                                                   1)
                                                  (("2"
                                                    (rewrite
                                                     "nth_append"
                                                     1)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "i"
                                                                 "j")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "i"
                                                                 "length(RL1)-1")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "length(RL1)-1")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "0")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "0"
                                                                       "j-length(RL1)")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (inst
                                                                 -8
                                                                 "i-length(RL1)"
                                                                 "j-length(RL1)")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (lift-if)
                    (("2" (split -)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "append_realband_spec")
                            (("1" (skeep)
                              (("1"
                                (ground)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (replace -8 -2)
                                    (("1"
                                      (rewrite "nth_append")
                                      (("1"
                                        (rewrite "length_append")
                                        (("1"
                                          (rewrite
                                           "length_remove_last")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (rewrite
                                                   "nth_append")
                                                  (("1"
                                                    (rewrite
                                                     "length_remove_last")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "remove_last_def")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (inst?
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (case
                                                               "r<=nth(RL1,length(RL1)-1)`ub")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "length(RL1)-1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "in?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -2
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 4
                                                                 "0")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "in?")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "length_remove_last")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst
                                                   3
                                                   "j-length(RL1)+1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "nth"
                                                       3
                                                       1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "length_append" 1)
                                        (("2"
                                          (rewrite
                                           "length_remove_last")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "length" -6 3)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst + "j")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -8 +)
                                        (("2"
                                          (rewrite "nth_append")
                                          (("1"
                                            (rewrite "length_append" 1)
                                            (("1"
                                              (rewrite
                                               "length_remove_last")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "nth_append")
                                                  (("1"
                                                    (rewrite
                                                     "length_remove_last")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split +)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "remove_last_def")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "j")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "nth"
                                                               +
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   -7)
                                                                  (("2"
                                                                    (expand
                                                                     "strictly_increasing_real?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst
                                                                         -10
                                                                         "0")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "length(RL1)-1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "in?")
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "length_remove_last")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "length_append")
                                            (("2"
                                              (rewrite
                                               "length_remove_last")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skeep)
                                  (("3"
                                    (inst + "length(RL1)-1+j")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (replace -8 +)
                                        (("3"
                                          (rewrite "nth_append" +)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (rewrite "length_append")
                                              (("1"
                                                (rewrite
                                                 "length_remove_last")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split +)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "nth_append"
                                                           +)
                                                          (("1"
                                                            (rewrite
                                                             "length_remove_last")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "NOT j = 0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     +
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -8)
                                                                        (("2"
                                                                          (expand
                                                                           "strictly_increasing_real?")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "length(RL1)-1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "in?")
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "length_remove_last")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "nth"
                                                           -2)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "length_append" 1)
                                            (("2"
                                              (rewrite
                                               "length_remove_last")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "length"
                                                   -6
                                                   3)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "append_realband_spec")
                          (("2" (replace 1)
                            (("2"
                              (case "length(RL1)=0 OR length(RL2)=0")
                              (("1"
                                (case "RL1=null OR RL2=null")
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (split -)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (case "NOT AIS = RL2")
                                        (("1"
                                          (replace -4)
                                          (("1"
                                            (expand "append" 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1)
                                      (("2"
                                        (rewrite "append_null")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -4)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-1 1))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide -6)
                                    (("2"
                                      (replace -3 +)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (ground)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (rewrite
                                                 "length_append"
                                                 -1)
                                                (("1"
                                                  (rewrite
                                                   "nth_append"
                                                   -)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst? 3)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (inst + "j")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite
                                                     "nth_append"
                                                     +)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep)
                                              (("3"
                                                (inst
                                                 +
                                                 "length(RL1)+j")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (rewrite
                                                     "nth_append")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_null formula-decl nil more_list_props structures)
    (IntBand type-eq-decl nil int_bands nil)
    (nth_append formula-decl nil more_list_props structures)
    (max_0_nnreal formula-decl nil min_max reals)
    (length_singleton formula-decl nil more_list_props structures))
   nil))
 (append_realband_spec_connected_TCC1 0
  (append_realband_spec_connected_TCC1-1 nil 3638274833
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (append_realband_spec_connected subtype "real_bands.j"
    "below[length[RealBand](RL1)]")))
 (append_realband_spec_connected_TCC2 0
  (append_realband_spec_connected_TCC2-1 nil 3638274833
   ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (append_realband_spec_connected subtype "real_bands.j"
    "below[length[RealBand](RL2)]")))
 (append_realband_spec_connected_TCC3 0
  (append_realband_spec_connected_TCC3-1 nil 3638274833
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil))
   nil
   (append_realband_spec_connected subtype "real_bands.j"
    "below[length[RealBand](AIS)]")))
 (append_realband_spec_connected 0
  (append_realband_spec_connected-2 "" 3794669390
   ("" (skeep)
    (("" (label "i1" -4)
      (("" (label "i2" -5)
        (("" (case "length(RL1) = 0 OR length(RL2) = 0")
          (("1" (case "RL1=null OR RL2=null")
            (("1" (skoletin 1)
              (("1" (case "AIS = RL1 OR AIS = RL2")
                (("1" (hide (-3 -4))
                  (("1" (ground)
                    (("1" (replace -2) (("1" (propax) nil nil)) nil)
                     ("2" (replace -1) (("2" (propax) nil nil)) nil)
                     ("3" (replace -2) (("3" (propax) nil nil)) nil)
                     ("4" (replace -1) (("4" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (split -)
                  (("1" (expand "append_realband_spec")
                    (("1" (replace -1)
                      (("1" (assert)
                        (("1" (expand "append" -2)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (expand "append_realband_spec")
                      (("2" (assert)
                        (("2" (rewrite "append_null")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (skoletin 3)
              (("2" (assert)
                (("2" (skeep)
                  (("2" (lemma "append_realband_spec_length")
                    (("2" (insteep -)
                      (("2" (assert)
                        (("2" (replace -4 :dir rl)
                          (("2" (expand "append_realband_spec")
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("1"
                                  (replace -2 +)
                                  (("1"
                                    (rewrite "nth_append")
                                    (("1"
                                      (rewrite "length_append")
                                      (("1"
                                        (rewrite "length_remove_last")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (rewrite "nth_append")
                                                (("1"
                                                  (rewrite
                                                   "length_remove_last")
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (lemma
                                                         "remove_last_def")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "k")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_append"
                                                                     +)
                                                                    (("1"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_remove_last")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (rewrite
                                                                             "nth_append"
                                                                             +)
                                                                            (("1"
                                                                              (rewrite
                                                                               "length_remove_last")
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "remove_last_def")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "j")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j"
                                                                                               "k")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "length_remove_last")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_remove_last")
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           -6
                                                                           3)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "nth"
                                                         2
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "nth_append"
                                                             +)
                                                            (("1"
                                                              (rewrite
                                                               "length_append")
                                                              (("1"
                                                                (rewrite
                                                                 "length_remove_last")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_append")
                                                                    (("1"
                                                                      (rewrite
                                                                       "length_remove_last")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "remove_last_def")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "j")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "j"
                                                                                       "length(RL1)-1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "length_remove_last")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "length_append"
                                                               1)
                                                              (("2"
                                                                (rewrite
                                                                 "length_remove_last")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "length_remove_last")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "NOT nth(cdr(RL2),k-length(RL1)) = nth(RL2,k-length(RL1)+1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "nth" + 2)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       "nth_append"
                                                       +)
                                                      (("1"
                                                        (rewrite
                                                         "length_append")
                                                        (("1"
                                                          (rewrite
                                                           "length_remove_last")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (split
                                                                 +)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (rewrite
                                                                       "nth_append"
                                                                       +)
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_remove_last")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (split
                                                                               +)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "remove_last_def")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "j")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j"
                                                                                               "length(RL1)-1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (copy
                                                                                                   "i1")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "strictly_increasing_real?"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "length(RL1)-1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "0"
                                                                                                               "1-length(RL1)+k")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (copy
                                                                                                                   "i2")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "strictly_increasing_real?"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "0")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "nth"
                                                                                     2
                                                                                     2)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -9)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "0"
                                                                                         "1-length(RL1)+k")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (rewrite
                                                                           "length_remove_last")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -9
                                                                     "1-length(RL1)+j"
                                                                     "1-length(RL1)+k")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -9
                                                                         2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "length_append"
                                                         1)
                                                        (("2"
                                                          (rewrite
                                                           "length_remove_last")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               -5
                                                               3)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "length_append")
                                      (("2"
                                        (rewrite "length_remove_last")
                                        (("2"
                                          (expand "length" -4 3)
                                          (("2"
                                            (lift-if)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1 +)
                                  (("2"
                                    (rewrite "nth_append" +)
                                    (("2"
                                      (rewrite "nth_append" +)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (ground)
                                                (("1"
                                                  (inst - "j" "k")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (copy "i1")
                                                  (("2"
                                                    (expand
                                                     "strictly_increasing_real?"
                                                     -1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst
                                                         -
                                                         "j"
                                                         "length(RL1)-1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "length(RL1)-1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (copy
                                                                 "i2")
                                                                (("2"
                                                                  (expand
                                                                   "strictly_increasing_real?"
                                                                   -1)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "0"
                                                                       "k-length(RL1)")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "0")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide -5)
                                                  (("3"
                                                    (inst
                                                     -
                                                     "j-length(RL1)"
                                                     "k-length(RL1)")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((j skolem-const-decl "nat" real_bands nil)
    (RL1 skolem-const-decl "list[RealBand]" real_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (remove_last_def formula-decl nil real_bands nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (max_0_nnreal formula-decl nil min_max reals)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_remove_last formula-decl nil real_bands nil)
    (length_singleton formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (nth_append formula-decl nil more_list_props structures)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append_realband_spec_length formula-decl nil real_bands nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (append_null formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (length_null formula-decl nil more_list_props structures)
    (IntBand type-eq-decl nil int_bands nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (append_realband_spec const-decl "list[RealBand]" real_bands nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil))
   shostak)
  (append_realband_spec_connected-1 nil 3638275562
   ("" (skeep)
    (("" (label "i1" -4)
      (("" (label "i2" -5)
        (("" (case "length(RL1) = 0 OR length(RL2) = 0")
          (("1" (case "RL1=null OR RL2=null")
            (("1" (skoletin 1)
              (("1" (case "AIS = RL1 OR AIS = RL2")
                (("1" (hide (-3 -4))
                  (("1" (ground)
                    (("1" (replace -2) (("1" (propax) nil nil)) nil)
                     ("2" (replace -1) (("2" (propax) nil nil)) nil)
                     ("3" (replace -2) (("3" (propax) nil nil)) nil)
                     ("4" (replace -1) (("4" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (split -)
                  (("1" (expand "append_realband_spec")
                    (("1" (replace -1)
                      (("1" (assert)
                        (("1" (expand "append" -2)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (expand "append_realband_spec")
                      (("2" (assert)
                        (("2" (rewrite "append_null")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (skoletin 3)
              (("2" (assert)
                (("2" (skeep)
                  (("2" (lemma "append_realband_spec_length")
                    (("2" (insteep -)
                      (("2" (assert)
                        (("2" (replace -4 :dir rl)
                          (("2" (expand "append_realband_spec")
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("1"
                                  (replace -2 +)
                                  (("1"
                                    (rewrite "nth_append")
                                    (("1"
                                      (rewrite "length_append")
                                      (("1"
                                        (rewrite "length_remove_last")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (rewrite "nth_append")
                                                (("1"
                                                  (rewrite
                                                   "length_remove_last")
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (lemma
                                                         "remove_last_def")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "k")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_append"
                                                                     +)
                                                                    (("1"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_remove_last")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (rewrite
                                                                             "nth_append"
                                                                             +)
                                                                            (("1"
                                                                              (rewrite
                                                                               "length_remove_last")
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "remove_last_def")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "j")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j"
                                                                                               "k")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "length_remove_last")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "length_append")
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_remove_last")
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           -6
                                                                           3)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "nth"
                                                         2
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "nth_append"
                                                             +)
                                                            (("1"
                                                              (rewrite
                                                               "length_append")
                                                              (("1"
                                                                (rewrite
                                                                 "length_remove_last")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_append")
                                                                    (("1"
                                                                      (rewrite
                                                                       "length_remove_last")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "remove_last_def")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "j")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "j"
                                                                                         "length(RL1)-1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "length_remove_last")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "length_append"
                                                               1)
                                                              (("2"
                                                                (rewrite
                                                                 "length_remove_last")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "length_remove_last")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "NOT nth(cdr(RL2),k-length(RL1)) = nth(RL2,k-length(RL1)+1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "nth" + 2)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       "nth_append"
                                                       +)
                                                      (("1"
                                                        (rewrite
                                                         "length_append")
                                                        (("1"
                                                          (rewrite
                                                           "length_remove_last")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (split
                                                                 +)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (rewrite
                                                                       "nth_append"
                                                                       +)
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_remove_last")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (split
                                                                               +)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "remove_last_def")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "j")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j"
                                                                                               "length(RL1)-1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (copy
                                                                                                   "i1")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "strictly_increasing_real?"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "length(RL1)-1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "0"
                                                                                                               "1-length(RL1)+k")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (copy
                                                                                                                   "i2")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "strictly_increasing_real?"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "0")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "nth"
                                                                                     2
                                                                                     2)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -9)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "0"
                                                                                         "1-length(RL1)+k")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (rewrite
                                                                           "length_remove_last")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -9
                                                                     "1-length(RL1)+j"
                                                                     "1-length(RL1)+k")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -9
                                                                         2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "length_append"
                                                           1)
                                                          (("2"
                                                            (rewrite
                                                             "length_remove_last")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 -5
                                                                 3)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "length_append")
                                      (("2"
                                        (rewrite "length_remove_last")
                                        (("2"
                                          (expand "length" -4 3)
                                          (("2"
                                            (lift-if)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1 +)
                                  (("2"
                                    (rewrite "nth_append" +)
                                    (("2"
                                      (rewrite "nth_append" +)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (ground)
                                                (("1"
                                                  (inst - "j" "k")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (copy "i1")
                                                  (("2"
                                                    (expand
                                                     "strictly_increasing_real?"
                                                     -1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst
                                                         -
                                                         "j"
                                                         "length(RL1)-1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "length(RL1)-1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (copy
                                                                 "i2")
                                                                (("2"
                                                                  (expand
                                                                   "strictly_increasing_real?"
                                                                   -1)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "0"
                                                                       "k-length(RL1)")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "0")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide -5)
                                                  (("3"
                                                    (inst
                                                     -
                                                     "j-length(RL1)"
                                                     "k-length(RL1)")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_null formula-decl nil more_list_props structures)
    (IntBand type-eq-decl nil int_bands nil)
    (length_singleton formula-decl nil more_list_props structures)
    (max_0_nnreal formula-decl nil min_max reals)
    (nth_append formula-decl nil more_list_props structures))
   nil))
 (append_realband_spec_nth_TCC1 0
  (append_realband_spec_nth_TCC1-1 nil 3638274833
   ("" (skeep*)
    (("" (assert)
      (("" (lemma "append_realband_spec_length")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (append_realband_spec_length formula-decl nil real_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (append_realband_spec_nth subtype
    "(number_fields.+)((number_fields.-)(real_bands.j, list_props[RealBand].length(real_bands.RL1)), 1)"
    "below[length[RealBand](RL2)]")))
 (append_realband_spec_nth_TCC2 0
  (append_realband_spec_nth_TCC2-1 nil 3638274833
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil))
   nil
   (append_realband_spec_nth subtype "real_bands.j"
    "below[length[RealBand](RL1)]")))
 (append_realband_spec_nth_TCC3 0
  (append_realband_spec_nth_TCC3-1 nil 3638274833
   ("" (skeep*)
    (("" (assert)
      (("" (lemma "append_realband_spec_length")
        (("" (inst?)
          (("" (replace -5 :dir rl)
            (("" (lift-if -1) (("" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (append_realband_spec_length formula-decl nil real_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (append_realband_spec_nth subtype
    "(number_fields.-)(real_bands.j, list_props[RealBand].length(real_bands.RL1))"
    "below[length[RealBand](RL2)]")))
 (append_realband_spec_nth 0
  (append_realband_spec_nth-1 nil 3638276045
   ("" (skeep*)
    (("" (skoletin 1)
      (("" (lemma "append_realband_spec_length")
        (("" (inst?)
          (("" (skeep)
            (("" (replace -3 +)
              (("" (replace -3 :dir rl)
                (("" (replaces -1)
                  (("" (replace -2)
                    (("" (expand "append_realband_spec")
                      (("" (lift-if)
                        (("" (lift-if)
                          (("" (assert)
                            (("" (lift-if)
                              ((""
                                (split +)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (ground)
                                      (("1"
                                        (rewrite "nth_append")
                                        (("1"
                                          (rewrite "length_append")
                                          (("1"
                                            (rewrite
                                             "length_remove_last")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite "nth_append")
                                                (("1"
                                                  (rewrite
                                                   "length_remove_last")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "remove_last_def")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "length_remove_last")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (rewrite "length_append")
                                            (("2"
                                              (rewrite
                                               "length_remove_last")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "nth_append" 1)
                                        (("1"
                                          (rewrite "length_append" 1)
                                          (("1"
                                            (rewrite
                                             "length_remove_last")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "nth_append"
                                                 1)
                                                (("1"
                                                  (rewrite
                                                   "length_remove_last")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "nth"
                                                       1
                                                       1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "length_remove_last")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "length_append" 1)
                                          (("2"
                                            (rewrite
                                             "length_remove_last")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (rewrite "nth_append" +)
                                        (("1"
                                          (rewrite "length_append" +)
                                          (("1"
                                            (rewrite
                                             "length_remove_last")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "nth" 2 2)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "length_append" +)
                                          (("2"
                                            (rewrite
                                             "length_remove_last")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "length" -4 2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (replace 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "nth_append[RealBand]")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (hide 1)
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove_last_def formula-decl nil real_bands nil)
    (max_0_nnreal formula-decl nil min_max reals)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_remove_last formula-decl nil real_bands nil)
    (length_singleton formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (nth_append formula-decl nil more_list_props structures)
    (append def-decl "list[T]" list_props nil)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (append_realband_spec_length formula-decl nil real_bands nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (append_realband_spec const-decl "list[RealBand]" real_bands nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (RealBand type-eq-decl nil real_bands nil)
    (real nonempty-type-from-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (merge_inc_TCC1 0
  (merge_inc_TCC1-1 nil 3640615777 ("" (subtype-tcc) nil nil)
   ((strictly_increasing_real? const-decl "bool" real_bands nil)
    (in? const-decl "bool" real_bands nil))
   nil
   (merge_inc subtype "real_bands.RL1"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.OR(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}")))
 (merge_inc_TCC2 0
  (merge_inc_TCC2-1 nil 3640615777 ("" (subtype-tcc) nil nil)
   ((strictly_increasing_real? const-decl "bool" real_bands nil)
    (in? const-decl "bool" real_bands nil))
   nil
   (merge_inc subtype "real_bands.RL2"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.OR(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}")))
 (merge_inc_TCC3 0
  (merge_inc_TCC3-1 nil 3640615777 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (merge_inc subtype "0" "below[length[RealBand](RL1)]")))
 (merge_inc_TCC4 0
  (merge_inc_TCC4-1 nil 3640615777 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (merge_inc subtype "0" "below[length[RealBand](RL2)]")))
 (merge_inc_TCC5 0
  (merge_inc_TCC5-1 nil 3640615777 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil))
   nil
   (merge_inc subtype "real_bands.RL1" "(list_adt[RealBand].cons?)")))
 (merge_inc_TCC6 0
  (merge_inc_TCC6-1 nil 3640615777
   ("" (skeep)
    (("" (expand "length" 3 3)
      (("" (lift-if)
        (("" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (merge_inc termination
    "real_bands.merge_inc(list_adt[RealBand].cdr(real_bands.RL1), real_bands.RL2)"
    "nil")))
 (merge_inc_TCC7 0
  (merge_inc_TCC7-1 nil 3640615777
   ("" (skeep*)
    (("" (name "G" "v(cdr[RealBand](RL1), RL2)")
      (("1" (replace -1)
        (("1" (assert)
          (("1" (case "NOT strictly_increasing_real?(cdr(RL1))")
            (("1" (hide 4)
              (("1" (copy -3)
                (("1" (hide-all-but (-1 1))
                  (("1" (expand "strictly_increasing_real?")
                    (("1" (flatten)
                      (("1" (split)
                        (("1" (skeep)
                          (("1" (inst - "i+1")
                            (("1" (expand "nth" -1)
                              (("1" (propax) nil nil)) nil)
                             ("2" (expand "length" 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (ground)
                                  (("2"
                                    (reveal +)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (inst - "i+1" "j+1")
                            (("1" (assert)
                              (("1"
                                (expand "nth" -3)
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (expand "length" 1)
                              (("2"
                                (assert)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (ground)
                                    (("2"
                                      (reveal +)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "length" 1)
                              (("3"
                                (assert)
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (ground)
                                    (("3"
                                      (reveal +)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2"
              (case "NOT (strictly_increasing_real?((: nth[RealBand](RL1, 0) :)) AND
       strictly_increasing_real?(G) AND
        (length(G) > 0 IMPLIES
          nth((: nth[RealBand](RL1, 0) :), 0)`ub <= nth(G, 0)`lb))")
              (("1" (hide 4)
                (("1" (split +)
                  (("1" (hide-all-but (-4 1))
                    (("1" (expand "strictly_increasing_real?")
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (skeep)
                            (("1" (inst - "0")
                              (("1"
                                (typepred "i")
                                (("1"
                                  (case "NOT i = 0")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (replaces -1)
                                    (("2"
                                      (expand "nth" + 1)
                                      (("2"
                                        (expand "nth" + 2)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (case "j<1")
                              (("1" (grind) nil nil)
                               ("2"
                                (typepred "j")
                                (("2"
                                  (hide-all-but (-1 1))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "G") (("2" (assert) nil nil)) nil)
                   ("3" (flatten)
                    (("3" (expand "nth" 1 1)
                      (("3" (typepred "G")
                        (("3" (assert)
                          (("3" (flatten)
                            (("3" (inst - "nth(G,0)`lb")
                              (("3"
                                (flatten)
                                (("3"
                                  (hide -2)
                                  (("3"
                                    (split -)
                                    (("1"
                                      (skeep -)
                                      (("1"
                                        (copy -8)
                                        (("1"
                                          (expand
                                           "strictly_increasing_real?"
                                           -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst - "0" "j+1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "nth" -2 2)
                                                  (("1"
                                                    (expand "in?")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep -)
                                      (("2"
                                        (copy -9)
                                        (("2"
                                          (expand
                                           "strictly_increasing_real?"
                                           -1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst - "0" "j")
                                              (("2"
                                                (expand "in?")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst - "0")
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (inst + "0")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "in?" 1)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (expand
                                               "strictly_increasing_real?"
                                               -1)
                                              (("3"
                                                (flatten)
                                                (("3" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (lemma "append_realband_spec_def")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (replace -4)
                          (("2" (flatten)
                            (("2"
                              (case "NOT nth(RL1, 0)`ub <= nth(RL2, 0)`lb")
                              (("1" (ground) nil nil)
                               ("2"
                                (hide -9)
                                (("2"
                                  (assert)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst - "r")
                                      (("2"
                                        (replaces -3)
                                        (("2"
                                          (split +)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -)
                                                (("1"
                                                  (skeep -)
                                                  (("1"
                                                    (case "j = 0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst + "0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             1
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "G")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst - "r")
                                                          (("2"
                                                            (replace 3)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "j-1")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -1)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "nth"
                                                                         -2)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "G")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst - "r")
                                                      (("2"
                                                        (replace 2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split -)
                                              (("1"
                                                (skeep -)
                                                (("1"
                                                  (case "NOT j = 0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide -2)
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         -1
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             +
                                                             "0")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep -)
                                                (("2"
                                                  (typepred "G")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst - "r")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (split -)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "j!1+1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       1)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "nth"
                                                                       1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (inst
                                                               +
                                                               "j")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (assert)
                (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "length" 1 3)
        (("2" (lift-if)
          (("2" (split 1)
            (("1" (flatten) (("1" (grind) nil nil)) nil)
             ("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil))
      nil))
    nil)
   ((append_realband_spec const-decl "list[RealBand]" real_bands nil)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (append def-decl "list[T]" list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (append_realband_spec_def formula-decl nil real_bands nil)
    (j skolem-const-decl "nat" real_bands nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (j skolem-const-decl "below(length(cdr(RL1)))" real_bands nil)
    (i skolem-const-decl "below(length(cdr(RL1)))" real_bands nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "below(length(cdr(RL1)))" real_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (RL1 skolem-const-decl "list[RealBand]" real_bands nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (merge_inc subtype
    "real_bands.append_realband_spec((: list_props[RealBand].nth(real_bands.RL1, 0) :), real_bands.merge_inc(list_adt[RealBand].cdr(real_bands.RL1), real_bands.RL2))"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.OR(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}")))
 (merge_inc_TCC8 0
  (merge_inc_TCC8-1 nil 3640615777 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil))
   nil
   (merge_inc subtype "real_bands.RL2" "(list_adt[RealBand].cons?)")))
 (merge_inc_TCC9 0
  (merge_inc_TCC9-1 nil 3640615777
   ("" (skeep)
    (("" (expand "length" 5 4)
      (("" (lift-if)
        (("" (hide -) (("" (ground) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (merge_inc termination
    "real_bands.merge_inc(real_bands.RL1, list_adt[RealBand].cdr(real_bands.RL2))"
    "nil")))
 (merge_inc_TCC10 0
  (merge_inc_TCC10-2 nil 3640624166
   ("" (skeep*)
    (("" (name "G" "v(RL1, cdr[RealBand](RL2))")
      (("1" (replace -1)
        (("1" (assert)
          (("1" (case "NOT strictly_increasing_real?(cdr(RL2))")
            (("1" (hide 6)
              (("1" (copy -4)
                (("1" (hide-all-but (-1 1))
                  (("1" (expand "strictly_increasing_real?")
                    (("1" (flatten)
                      (("1" (split)
                        (("1" (skeep)
                          (("1" (inst - "i+1")
                            (("1" (expand "nth" -1)
                              (("1" (propax) nil nil)) nil)
                             ("2" (expand "length" 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (ground)
                                  (("2"
                                    (reveal +)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (inst - "i+1" "j+1")
                            (("1" (assert)
                              (("1"
                                (expand "nth" -3)
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (expand "length" 1)
                              (("2"
                                (assert)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (ground)
                                    (("2"
                                      (reveal +)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "length" 1)
                              (("3"
                                (assert)
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (ground)
                                    (("3"
                                      (reveal +)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2"
                (case "NOT (strictly_increasing_real?((: nth[RealBand](RL2, 0) :)) AND
                             strictly_increasing_real?(G) AND
                              (length(G) > 0 IMPLIES
                                nth((: nth[RealBand](RL2, 0) :), 0)`ub <= nth(G, 0)`lb))")
                (("1" (hide 6)
                  (("1" (split +)
                    (("1" (hide-all-but (-5 1))
                      (("1" (expand "strictly_increasing_real?")
                        (("1" (flatten)
                          (("1" (split)
                            (("1" (skeep)
                              (("1"
                                (inst - "0")
                                (("1"
                                  (typepred "i")
                                  (("1"
                                    (case "NOT i = 0")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (expand "nth" + 1)
                                        (("2"
                                          (expand "nth" + 2)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (case "j<1")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (typepred "j")
                                  (("2"
                                    (hide-all-but (-1 1))
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "G") (("2" (assert) nil nil)) nil)
                     ("3" (flatten)
                      (("3" (expand "nth" 1 1)
                        (("3" (typepred "G")
                          (("3" (assert)
                            (("3" (flatten)
                              (("3"
                                (inst - "nth(G,0)`lb")
                                (("3"
                                  (flatten)
                                  (("3"
                                    (hide -2)
                                    (("3"
                                      (split -)
                                      (("1"
                                        (skeep -)
                                        (("1"
                                          (copy -8)
                                          (("1"
                                            (expand
                                             "strictly_increasing_real?"
                                             -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst - "0" "j")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "in?")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (case
                                                           "j = 0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "0")
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep -)
                                        (("2"
                                          (expand "in?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (copy -10)
                                                (("2"
                                                  (expand
                                                   "strictly_increasing_real?"
                                                   -1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst
                                                       -
                                                       "0"
                                                       "j+1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           -2
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "length"
                                                         1)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (inst + "0")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (expand "in?" 1)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (expand
                                                 "strictly_increasing_real?"
                                                 -1)
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lemma "append_realband_spec_def")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (replace -4)
                            (("2" (flatten)
                              (("2"
                                (case
                                 "NOT nth(RL2, 0)`ub <= nth(RL1, 0)`lb")
                                (("1" (ground) nil nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst - "r")
                                      (("2"
                                        (replaces -3)
                                        (("2"
                                          (split +)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -)
                                                (("1"
                                                  (skeep -)
                                                  (("1"
                                                    (typepred "G")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst - "r")
                                                        (("1"
                                                          (replace 2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "j")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep -)
                                                  (("2"
                                                    (case "j = 0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst + "0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             1
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "G")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst - "r")
                                                          (("2"
                                                            (replace 3)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   2
                                                                   "j-1")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -1)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "nth"
                                                                         -2)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split -)
                                              (("1"
                                                (skeep -)
                                                (("1"
                                                  (case "NOT j = 0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide -2)
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         -1
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             +
                                                             "0")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "0")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep -)
                                                (("2"
                                                  (typepred "G")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst - "r")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (split -)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (skeep -)
                                                              (("2"
                                                                (inst
                                                                 2
                                                                 "j!1 + 1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       1)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "nth"
                                                                       1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (inst
                                                               +
                                                               "j")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert)
                  (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "length" 1 4)
        (("2" (lift-if)
          (("2" (split 1)
            (("1" (flatten) (("1" (grind) nil nil)) nil)
             ("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil))
      nil))
    nil)
   ((append_realband_spec const-decl "list[RealBand]" real_bands nil)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (append def-decl "list[T]" list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (append_realband_spec_def formula-decl nil real_bands nil)
    (j skolem-const-decl "nat" real_bands nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (j skolem-const-decl "below(length(cdr(RL2)))" real_bands nil)
    (i skolem-const-decl "below(length(cdr(RL2)))" real_bands nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "below(length(cdr(RL2)))" real_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (RL2 skolem-const-decl "list[RealBand]" real_bands nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (merge_inc subtype
    "real_bands.append_realband_spec((: list_props[RealBand].nth(real_bands.RL2, 0) :), real_bands.merge_inc(real_bands.RL1, list_adt[RealBand].cdr(real_bands.RL2)))"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.OR(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}"))
  (merge_inc_TCC10-1 nil 3640615777 ("" (subtype-tcc) nil nil) nil nil
   (merge_inc subtype
    "real_bands.append_realband_spec((: list_props[RealBand].nth(real_bands.RL2, 0) :), real_bands.merge_inc(real_bands.RL1, list_adt[RealBand].cdr(real_bands.RL2)))"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.OR(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}")))
 (merge_inc_TCC11 0
  (merge_inc_TCC11-1 nil 3640615777 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil))
   nil
   (merge_inc subtype "real_bands.RL1" "(list_adt[RealBand].cons?)")))
 (merge_inc_TCC12 0
  (merge_inc_TCC12-1 nil 3640615777 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil))
   nil
   (merge_inc subtype "real_bands.RL2" "(list_adt[RealBand].cons?)")))
 (merge_inc_TCC13 0
  (merge_inc_TCC13-1 nil 3640615777
   ("" (skeep*)
    (("" (expand "length" 7 1)
      (("" (expand "length" 7 4)
        (("" (expand "length" 7 3)
          (("" (lift-if)
            (("" (lift-if)
              (("" (lift-if)
                (("" (assert)
                  (("" (ground)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (merge_inc termination
    "real_bands.merge_inc(list_adt[[# lb: real, ub: real #]].cons((# lb := real_defs.min(list_props[RealBand].nth(real_bands.RL1, 0)`lb, list_props[RealBand].nth(real_bands.RL2, 0)`lb), ub := list_props[RealBand].nth(real_bands.RL1, 0)`ub #), list_adt[RealBand].cdr(real_bands.RL1)), list_adt[RealBand].cdr(real_bands.RL2))"
    "nil")))
 (merge_inc_TCC14 0
  (merge_inc_TCC14-3 "" 3794669400
   ("" (skeep*)
    ((""
      (name "G" "v(cons[RealBand]
                           ((# lb
                                 := min
                                    (nth[RealBand](RL1, 0)`lb,
                                     nth[RealBand](RL2, 0)`lb),
                               ub := nth[RealBand](RL1, 0)`ub #),
                            cdr[RealBand](RL1)),
                       cdr[RealBand](RL2))")
      (("1" (replace -1)
        (("1" (assert)
          (("1" (case "NOT strictly_increasing_real?(cdr(RL1))")
            (("1" (hide-all-but (-3 1))
              (("1" (expand "strictly_increasing_real?")
                (("1" (flatten)
                  (("1" (split)
                    (("1" (skeep)
                      (("1" (inst - "i+1")
                        (("1" (expand "nth" -1)
                          (("1" (propax) nil nil)) nil)
                         ("2" (expand "length" 1)
                          (("2" (lift-if)
                            (("2" (ground)
                              (("2"
                                (reveal +)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (inst - "i+1" "j+1")
                        (("1" (assert)
                          (("1" (expand "nth" -3)
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (expand "length" 1)
                          (("2" (assert)
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("2"
                                  (reveal +)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "length" 1)
                          (("3" (assert)
                            (("3" (lift-if)
                              (("3"
                                (ground)
                                (("3"
                                  (reveal +)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "NOT strictly_increasing_real?(cdr(RL2))")
              (("1" (hide-all-but (-5 1))
                (("1" (expand "strictly_increasing_real?")
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (skeep)
                        (("1" (inst - "i+1")
                          (("1" (expand "nth" -1)
                            (("1" (propax) nil nil)) nil)
                           ("2" (expand "length" 1)
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("2"
                                  (reveal +)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst - "i+1" "j+1")
                          (("1" (assert)
                            (("1" (expand "nth" -3)
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (expand "length" 1)
                            (("2" (assert)
                              (("2"
                                (lift-if)
                                (("2"
                                  (ground)
                                  (("2"
                                    (reveal +)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "length" 1)
                            (("3" (assert)
                              (("3"
                                (lift-if)
                                (("3"
                                  (ground)
                                  (("3"
                                    (reveal +)
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -3)
                (("2" (typepred "G")
                  (("2" (assert)
                    (("2" (split -)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1"
                            (name "BZ" "cons[RealBand]
                         ((# lb
                               := min(nth[RealBand](RL1, 0)`lb,
                                      nth[RealBand](RL2, 0)`lb),
                             ub := nth[RealBand](RL1, 0)`ub #),
                          cdr[RealBand](RL1))")
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst - "r")
                                    (("1"
                                      (replaces -3 :dir rl)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case "j = 0")
                                            (("1"
                                              (inst + "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "BZ" 1)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     1
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "nth"
                                                           1
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "in?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst + "j")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "BZ" +)
                                                  (("2"
                                                    (expand "length" 2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (copy -1)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (expand
                                                                 "nth"
                                                                 1
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   -3)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep -)
                                          (("2"
                                            (case "j = 0")
                                            (("1"
                                              (inst + "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "BZ" 1)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     1
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "nth"
                                                           1
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "in?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst 3 "j-1")
                                              (("1"
                                                (expand "length" -1)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand "nth" -2)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skeep)
                                          (("3"
                                            (case "j = 0")
                                            (("1"
                                              (inst + "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "BZ" -3)
                                                  (("1"
                                                    (expand "nth" -3 1)
                                                    (("1"
                                                      (expand "in?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             +
                                                             "0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "min")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "BZ" -2)
                                              (("2"
                                                (expand "nth" -2 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst + "j")
                                                    (("2"
                                                      (split +)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         1)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split +)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "BZ"
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       -1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "nth"
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skeep)
                                          (("4"
                                            (inst 2 "j+1")
                                            (("4"
                                              (assert)
                                              (("4"
                                                (split +)
                                                (("1"
                                                  (expand "length" 1)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "nth" 1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 8)
                        (("2" (assert)
                          (("2" (copy -4)
                            (("2"
                              (name "BZ" "cons[RealBand]
                         ((# lb
                               := min(nth[RealBand](RL1, 0)`lb,
                                      nth[RealBand](RL2, 0)`lb),
                             ub := nth[RealBand](RL1, 0)`ub #),
                          cdr[RealBand](RL1))")
                              (("2"
                                (replace -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (copy -4)
                                    (("2"
                                      (name "DR" "cdr(RL1)")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (expand
                                           "strictly_increasing_real?"
                                           (-2 1))
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (split +)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (typepred "i")
                                                  (("1"
                                                    (expand "BZ" 1)
                                                    (("1"
                                                      (case "i = 0")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               1
                                                               3)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "nth"
                                                         2
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             2
                                                             2)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "i-1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "BZ"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (case "i = 0")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (expand "BZ" 1)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (copy
                                                               -10)
                                                              (("1"
                                                                (expand
                                                                 "strictly_increasing_real?"
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "0"
                                                                     "j")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -2
                                                                         2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "j")
                                                                        (("2"
                                                                          (expand
                                                                           "BZ"
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "length"
                                                                               1)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (ground)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "BZ" 2)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         2
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "nth"
                                                           2
                                                           2)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "i-1"
                                                             "j-1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "j")
                                                              (("2"
                                                                (expand
                                                                 "BZ"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              (("3"
                                                                (typepred
                                                                 "i")
                                                                (("3"
                                                                  (expand
                                                                   "BZ"
                                                                   -1)
                                                                  (("3"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 8)
        (("2" (expand "length" 1 2)
          (("2" (assert)
            (("2" (expand "length" 1 4)
              (("2" (expand "length" 1 3)
                (("2" (lift-if)
                  (("2" (lift-if)
                    (("2" (lift-if)
                      (("2" (ground)
                        (("1" (grind) nil nil) ("2" (grind) nil nil)
                         ("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 8) (("3" (grind) nil nil)) nil)
       ("4" (hide 8) (("4" (grind) nil nil)) nil))
      nil))
    nil)
   ((even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (i skolem-const-decl "below(length(BZ))" real_bands nil)
    (j skolem-const-decl "below(length(BZ))" real_bands nil)
    (DR skolem-const-decl "list[RealBand]" real_bands nil)
    (i skolem-const-decl "below(length(BZ))" real_bands nil)
    (BZ skolem-const-decl "(cons?[RealBand])" real_bands nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (j skolem-const-decl "nat" real_bands nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (BZ skolem-const-decl "(cons?[RealBand])" real_bands nil)
    (j skolem-const-decl "below(length(cdr(RL2)))" real_bands nil)
    (i skolem-const-decl "below(length(cdr(RL2)))" real_bands nil)
    (i skolem-const-decl "below(length(cdr(RL2)))" real_bands nil)
    (RL2 skolem-const-decl "list[RealBand]" real_bands nil)
    (j skolem-const-decl "below(length(cdr(RL1)))" real_bands nil)
    (i skolem-const-decl "below(length(cdr(RL1)))" real_bands nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "below(length(cdr(RL1)))" real_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (RL1 skolem-const-decl "list[RealBand]" real_bands nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (merge_inc subtype
    "real_bands.merge_inc(list_adt[[# lb: real, ub: real #]].cons((# lb := real_defs.min(list_props[RealBand].nth(real_bands.RL1, 0)`lb, list_props[RealBand].nth(real_bands.RL2, 0)`lb), ub := list_props[RealBand].nth(real_bands.RL1, 0)`ub #), list_adt[RealBand].cdr(real_bands.RL1)), list_adt[RealBand].cdr(real_bands.RL2))"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.OR(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}"))
  (merge_inc_TCC14-2 nil 3640625613
   ("" (skeep*)
    ((""
      (name "G" "v(cons[RealBand]
                           ((# lb
                                 := min
                                    (nth[RealBand](RL1, 0)`lb,
                                     nth[RealBand](RL2, 0)`lb),
                               ub := nth[RealBand](RL1, 0)`ub #),
                            cdr[RealBand](RL1)),
                       cdr[RealBand](RL2))")
      (("1" (replace -1)
        (("1" (assert)
          (("1" (case "NOT strictly_increasing_real?(cdr(RL1))")
            (("1" (hide-all-but (-3 1))
              (("1" (expand "strictly_increasing_real?")
                (("1" (flatten)
                  (("1" (split)
                    (("1" (skeep)
                      (("1" (inst - "i+1")
                        (("1" (expand "nth" -1)
                          (("1" (propax) nil nil)) nil)
                         ("2" (expand "length" 1)
                          (("2" (lift-if)
                            (("2" (ground)
                              (("2"
                                (reveal +)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (inst - "i+1" "j+1")
                        (("1" (assert)
                          (("1" (expand "nth" -3)
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (expand "length" 1)
                          (("2" (assert)
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("2"
                                  (reveal +)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "length" 1)
                          (("3" (assert)
                            (("3" (lift-if)
                              (("3"
                                (ground)
                                (("3"
                                  (reveal +)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "NOT strictly_increasing_real?(cdr(RL2))")
              (("1" (hide-all-but (-5 1))
                (("1" (expand "strictly_increasing_real?")
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (skeep)
                        (("1" (inst - "i+1")
                          (("1" (expand "nth" -1)
                            (("1" (propax) nil nil)) nil)
                           ("2" (expand "length" 1)
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("2"
                                  (reveal +)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst - "i+1" "j+1")
                          (("1" (assert)
                            (("1" (expand "nth" -3)
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (expand "length" 1)
                            (("2" (assert)
                              (("2"
                                (lift-if)
                                (("2"
                                  (ground)
                                  (("2"
                                    (reveal +)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "length" 1)
                            (("3" (assert)
                              (("3"
                                (lift-if)
                                (("3"
                                  (ground)
                                  (("3"
                                    (reveal +)
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -3)
                (("2" (typepred "G")
                  (("2" (assert)
                    (("2" (split -)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1"
                            (name "BZ" "cons[RealBand]
                         ((# lb
                               := min(nth[RealBand](RL1, 0)`lb,
                                      nth[RealBand](RL2, 0)`lb),
                             ub := nth[RealBand](RL1, 0)`ub #),
                          cdr[RealBand](RL1))")
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst - "r")
                                    (("1"
                                      (replaces -3 :dir rl)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case "j = 0")
                                            (("1"
                                              (inst + "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "BZ" 1)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     1
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "nth"
                                                           1
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "in?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst + "j")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "BZ" +)
                                                  (("2"
                                                    (expand "length" 2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (copy -1)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (expand
                                                                 "nth"
                                                                 1
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   -3)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep -)
                                          (("2"
                                            (case "j = 0")
                                            (("1"
                                              (inst + "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "BZ" 1)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     1
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "nth"
                                                           1
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "in?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst 3 "j-1")
                                              (("1"
                                                (expand "length" -1)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -2)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skeep)
                                          (("3"
                                            (case "j = 0")
                                            (("1"
                                              (inst + "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "BZ" -3)
                                                  (("1"
                                                    (expand "nth" -3 1)
                                                    (("1"
                                                      (expand "in?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             +
                                                             "0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "min")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "BZ" -2)
                                              (("2"
                                                (expand "nth" -2 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst + "j")
                                                    (("2"
                                                      (split +)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         1)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split +)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "BZ"
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       -1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "nth"
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skeep)
                                          (("4"
                                            (inst 2 "j+1")
                                            (("4"
                                              (assert)
                                              (("4"
                                                (split +)
                                                (("1"
                                                  (expand "length" 1)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "nth" 1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 8)
                        (("2" (assert)
                          (("2" (copy -4)
                            (("2"
                              (name "BZ" "cons[RealBand]
                         ((# lb
                               := min(nth[RealBand](RL1, 0)`lb,
                                      nth[RealBand](RL2, 0)`lb),
                             ub := nth[RealBand](RL1, 0)`ub #),
                          cdr[RealBand](RL1))")
                              (("2"
                                (replace -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (copy -4)
                                    (("2"
                                      (name "DR" "cdr(RL1)")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (expand
                                           "strictly_increasing_real?"
                                           (-2 1))
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (split +)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (typepred "i")
                                                  (("1"
                                                    (expand "BZ" 1)
                                                    (("1"
                                                      (case "i = 0")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               1
                                                               3)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "nth"
                                                         2
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             2
                                                             2)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "i-1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "BZ"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (case "i = 0")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (expand "BZ" 1)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (copy
                                                               -10)
                                                              (("1"
                                                                (expand
                                                                 "strictly_increasing_real?"
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "0"
                                                                     "j")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -2
                                                                         2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "j")
                                                                        (("2"
                                                                          (expand
                                                                           "BZ"
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "length"
                                                                               1)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (ground)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "BZ" 2)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         2
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "nth"
                                                           2
                                                           2)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "i-1"
                                                             "j-1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "j")
                                                              (("2"
                                                                (expand
                                                                 "BZ"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              (("3"
                                                                (typepred
                                                                 "i")
                                                                (("3"
                                                                  (expand
                                                                   "BZ"
                                                                   -1)
                                                                  (("3"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 8)
        (("2" (expand "length" 1 2)
          (("2" (assert)
            (("2" (expand "length" 1 4)
              (("2" (expand "length" 1 3)
                (("2" (lift-if)
                  (("2" (lift-if)
                    (("2" (lift-if)
                      (("2" (ground)
                        (("1" (grind) nil nil) ("2" (grind) nil nil)
                         ("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 8) (("3" (grind) nil nil)) nil)
       ("4" (hide 8) (("4" (grind) nil nil)) nil))
      nil))
    nil)
   nil nil
   (merge_inc subtype
    "real_bands.merge_inc(list_adt[[# lb: real, ub: real #]].cons((# lb := real_defs.min(list_props[RealBand].nth(real_bands.RL1, 0)`lb, list_props[RealBand].nth(real_bands.RL2, 0)`lb), ub := list_props[RealBand].nth(real_bands.RL1, 0)`ub #), list_adt[RealBand].cdr(real_bands.RL1)), list_adt[RealBand].cdr(real_bands.RL2))"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.OR(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}"))
  (merge_inc_TCC14-1 nil 3640615777 ("" (subtype-tcc) nil nil) nil nil
   (merge_inc subtype
    "real_bands.merge_inc(list_adt[[# lb: real, ub: real #]].cons((# lb := real_defs.min(list_props[RealBand].nth(real_bands.RL1, 0)`lb, list_props[RealBand].nth(real_bands.RL2, 0)`lb), ub := list_props[RealBand].nth(real_bands.RL1, 0)`ub #), list_adt[RealBand].cdr(real_bands.RL1)), list_adt[RealBand].cdr(real_bands.RL2))"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.OR(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}")))
 (merge_inc_TCC15 0
  (merge_inc_TCC15-1 nil 3640615777 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil))
   nil
   (merge_inc subtype "real_bands.RL2" "(list_adt[RealBand].cons?)")))
 (merge_inc_TCC16 0
  (merge_inc_TCC16-1 nil 3640615777 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil))
   nil
   (merge_inc subtype "real_bands.RL1" "(list_adt[RealBand].cons?)")))
 (merge_inc_TCC17 0
  (merge_inc_TCC17-1 nil 3640615777
   ("" (skeep*)
    (("" (expand "length" 8 1)
      (("" (expand "length" 8 4)
        (("" (expand "length" 8 3)
          (("" (lift-if)
            (("" (lift-if)
              (("" (lift-if)
                (("" (ground)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (merge_inc termination
    "real_bands.merge_inc(list_adt[[# lb: real, ub: real #]].cons((# lb := real_defs.min(list_props[RealBand].nth(real_bands.RL2, 0)`lb, list_props[RealBand].nth(real_bands.RL1, 0)`lb), ub := list_props[RealBand].nth(real_bands.RL2, 0)`ub #), list_adt[RealBand].cdr(real_bands.RL2)), list_adt[RealBand].cdr(real_bands.RL1))"
    "nil")))
 (merge_inc_TCC18 0
  (merge_inc_TCC18-3 "" 3794669403
   ("" (skeep*)
    ((""
      (name "G" "v(cons[RealBand]
                               ((# lb
                                     := min
                                        (nth[RealBand](RL2, 0)`lb,
                                         nth[RealBand](RL1, 0)`lb),
                                   ub := nth[RealBand](RL2, 0)`ub #),
                                cdr[RealBand](RL2)),
                           cdr[RealBand](RL1))")
      (("1" (replace -1)
        (("1" (assert)
          (("1" (case "NOT strictly_increasing_real?(cdr(RL1))")
            (("1" (hide-all-but (-2 1))
              (("1" (expand "strictly_increasing_real?")
                (("1" (flatten)
                  (("1" (split)
                    (("1" (skeep)
                      (("1" (inst - "i+1")
                        (("1" (expand "nth" -1)
                          (("1" (propax) nil nil)) nil)
                         ("2" (expand "length" 1)
                          (("2" (lift-if)
                            (("2" (ground)
                              (("2"
                                (reveal +)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (inst - "i+1" "j+1")
                        (("1" (assert)
                          (("1" (expand "nth" -3)
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (expand "length" 1)
                          (("2" (assert)
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("2"
                                  (reveal +)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "length" 1)
                          (("3" (assert)
                            (("3" (lift-if)
                              (("3"
                                (ground)
                                (("3"
                                  (reveal +)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "NOT strictly_increasing_real?(cdr(RL2))")
              (("1" (hide-all-but (-4 1))
                (("1" (expand "strictly_increasing_real?")
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (skeep)
                        (("1" (inst - "i+1")
                          (("1" (expand "nth" -1)
                            (("1" (propax) nil nil)) nil)
                           ("2" (expand "length" 1)
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("2"
                                  (reveal +)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst - "i+1" "j+1")
                          (("1" (assert)
                            (("1" (expand "nth" -3)
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (expand "length" 1)
                            (("2" (assert)
                              (("2"
                                (lift-if)
                                (("2"
                                  (ground)
                                  (("2"
                                    (reveal +)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "length" 1)
                            (("3" (assert)
                              (("3"
                                (lift-if)
                                (("3"
                                  (ground)
                                  (("3"
                                    (reveal +)
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -3)
                (("2" (typepred "G")
                  (("2" (assert)
                    (("2" (split -)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1"
                            (name "BZ" "cons[RealBand]
                          ((# lb
                                := min(nth[RealBand](RL2, 0)`lb,
                                       nth[RealBand](RL1, 0)`lb),
                              ub := nth[RealBand](RL2, 0)`ub #),
                           cdr[RealBand](RL2))")
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst - "r")
                                    (("1"
                                      (replaces -3 :dir rl)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case "j = 0")
                                            (("1"
                                              (inst + "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "BZ" 1)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     1
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "nth"
                                                           1
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "in?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst 3 "j-1")
                                              (("1"
                                                (expand "length" -1)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand "nth" -2)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (case "j = 0")
                                            (("1"
                                              (inst + "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "BZ" 1)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     1
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "nth"
                                                           1
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "in?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst + "j")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "BZ" +)
                                                  (("2"
                                                    (expand "length" 2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (copy -1)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (expand
                                                                 "nth"
                                                                 1
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   -3)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skeep -)
                                          (("3"
                                            (case "j = 0")
                                            (("1"
                                              (expand "BZ" -3)
                                              (("1"
                                                (inst 2 "0")
                                                (("1"
                                                  (expand "nth" -3 1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst + "0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "in?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "min")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "BZ" -2)
                                              (("2"
                                                (expand "nth" -2 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (inst + "j")
                                                      (("2"
                                                        (split +)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 +)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "BZ"
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         -1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skeep)
                                          (("4"
                                            (inst 1 "j+1")
                                            (("4"
                                              (assert)
                                              (("4"
                                                (split +)
                                                (("1"
                                                  (expand "length" 1)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "nth" 1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 9)
                        (("2" (assert)
                          (("2" (copy -4)
                            (("2"
                              (name "BZ" "cons[RealBand]
                          ((# lb
                                := min(nth[RealBand](RL2, 0)`lb,
                                       nth[RealBand](RL1, 0)`lb),
                              ub := nth[RealBand](RL2, 0)`ub #),
                           cdr[RealBand](RL2))")
                              (("2"
                                (replace -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (copy -3)
                                    (("2"
                                      (name "DR" "cdr(RL2)")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (expand
                                           "strictly_increasing_real?"
                                           (-2 1))
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (split +)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (typepred "i")
                                                  (("1"
                                                    (expand "BZ" 1)
                                                    (("1"
                                                      (case "i = 0")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               1
                                                               3)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "nth"
                                                         2
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             2
                                                             2)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "i-1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "BZ"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (case "i = 0")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (expand "BZ" 1)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (copy
                                                               -10)
                                                              (("1"
                                                                (expand
                                                                 "strictly_increasing_real?"
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "0"
                                                                     "j")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -2
                                                                         2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "j")
                                                                        (("2"
                                                                          (expand
                                                                           "BZ"
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "length"
                                                                               1)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (ground)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "BZ" 2)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         2
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "nth"
                                                           2
                                                           2)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "i-1"
                                                             "j-1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "j")
                                                              (("2"
                                                                (expand
                                                                 "BZ"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              (("3"
                                                                (typepred
                                                                 "i")
                                                                (("3"
                                                                  (expand
                                                                   "BZ"
                                                                   -1)
                                                                  (("3"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 9)
        (("2" (expand "length" 1 2)
          (("2" (assert)
            (("2" (expand "length" 1 4)
              (("2" (expand "length" 1 3)
                (("2" (lift-if)
                  (("2" (lift-if)
                    (("2" (lift-if)
                      (("2" (ground)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil)
       ("4" (hide 9) (("4" (grind) nil nil)) nil))
      nil))
    nil)
   ((even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (i skolem-const-decl "below(length(BZ))" real_bands nil)
    (j skolem-const-decl "below(length(BZ))" real_bands nil)
    (DR skolem-const-decl "list[RealBand]" real_bands nil)
    (i skolem-const-decl "below(length(BZ))" real_bands nil)
    (BZ skolem-const-decl "(cons?[RealBand])" real_bands nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (j skolem-const-decl "nat" real_bands nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (BZ skolem-const-decl "(cons?[RealBand])" real_bands nil)
    (j skolem-const-decl "below(length(cdr(RL2)))" real_bands nil)
    (i skolem-const-decl "below(length(cdr(RL2)))" real_bands nil)
    (i skolem-const-decl "below(length(cdr(RL2)))" real_bands nil)
    (RL2 skolem-const-decl "list[RealBand]" real_bands nil)
    (j skolem-const-decl "below(length(cdr(RL1)))" real_bands nil)
    (i skolem-const-decl "below(length(cdr(RL1)))" real_bands nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "below(length(cdr(RL1)))" real_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (RL1 skolem-const-decl "list[RealBand]" real_bands nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (merge_inc subtype
    "real_bands.merge_inc(list_adt[[# lb: real, ub: real #]].cons((# lb := real_defs.min(list_props[RealBand].nth(real_bands.RL2, 0)`lb, list_props[RealBand].nth(real_bands.RL1, 0)`lb), ub := list_props[RealBand].nth(real_bands.RL2, 0)`ub #), list_adt[RealBand].cdr(real_bands.RL2)), list_adt[RealBand].cdr(real_bands.RL1))"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.OR(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}"))
  (merge_inc_TCC18-2 nil 3640628029
   ("" (skeep*)
    ((""
      (name "G" "v(cons[RealBand]
                               ((# lb
                                     := min
                                        (nth[RealBand](RL2, 0)`lb,
                                         nth[RealBand](RL1, 0)`lb),
                                   ub := nth[RealBand](RL2, 0)`ub #),
                                cdr[RealBand](RL2)),
                           cdr[RealBand](RL1))")
      (("1" (replace -1)
        (("1" (assert)
          (("1" (case "NOT strictly_increasing_real?(cdr(RL1))")
            (("1" (hide-all-but (-2 1))
              (("1" (expand "strictly_increasing_real?")
                (("1" (flatten)
                  (("1" (split)
                    (("1" (skeep)
                      (("1" (inst - "i+1")
                        (("1" (expand "nth" -1)
                          (("1" (propax) nil nil)) nil)
                         ("2" (expand "length" 1)
                          (("2" (lift-if)
                            (("2" (ground)
                              (("2"
                                (reveal +)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (inst - "i+1" "j+1")
                        (("1" (assert)
                          (("1" (expand "nth" -3)
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (expand "length" 1)
                          (("2" (assert)
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("2"
                                  (reveal +)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "length" 1)
                          (("3" (assert)
                            (("3" (lift-if)
                              (("3"
                                (ground)
                                (("3"
                                  (reveal +)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "NOT strictly_increasing_real?(cdr(RL2))")
              (("1" (hide-all-but (-4 1))
                (("1" (expand "strictly_increasing_real?")
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (skeep)
                        (("1" (inst - "i+1")
                          (("1" (expand "nth" -1)
                            (("1" (propax) nil nil)) nil)
                           ("2" (expand "length" 1)
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("2"
                                  (reveal +)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst - "i+1" "j+1")
                          (("1" (assert)
                            (("1" (expand "nth" -3)
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (expand "length" 1)
                            (("2" (assert)
                              (("2"
                                (lift-if)
                                (("2"
                                  (ground)
                                  (("2"
                                    (reveal +)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "length" 1)
                            (("3" (assert)
                              (("3"
                                (lift-if)
                                (("3"
                                  (ground)
                                  (("3"
                                    (reveal +)
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -3)
                (("2" (typepred "G")
                  (("2" (assert)
                    (("2" (split -)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1"
                            (name "BZ" "cons[RealBand]
                          ((# lb
                                := min(nth[RealBand](RL2, 0)`lb,
                                       nth[RealBand](RL1, 0)`lb),
                              ub := nth[RealBand](RL2, 0)`ub #),
                           cdr[RealBand](RL2))")
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst - "r")
                                    (("1"
                                      (replaces -3 :dir rl)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case "j = 0")
                                            (("1"
                                              (inst + "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "BZ" 1)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     1
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "nth"
                                                           1
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "in?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst 3 "j-1")
                                              (("1"
                                                (expand "length" -1)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -2)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (case "j = 0")
                                            (("1"
                                              (inst + "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "BZ" 1)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     1
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "nth"
                                                           1
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "in?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst + "j")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "BZ" +)
                                                  (("2"
                                                    (expand "length" 2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (copy -1)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (expand
                                                                 "nth"
                                                                 1
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   -3)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skeep -)
                                          (("3"
                                            (case "j = 0")
                                            (("1"
                                              (expand "BZ" -3)
                                              (("1"
                                                (inst 2 "0")
                                                (("1"
                                                  (expand "nth" -3 1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst + "0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "in?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "min")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "BZ" -2)
                                              (("2"
                                                (expand "nth" -2 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (inst + "j")
                                                      (("2"
                                                        (split +)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 +)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "BZ"
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         -1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skeep)
                                          (("4"
                                            (inst 1 "j+1")
                                            (("4"
                                              (assert)
                                              (("4"
                                                (split +)
                                                (("1"
                                                  (expand "length" 1)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "nth" 1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 9)
                        (("2" (assert)
                          (("2" (copy -4)
                            (("2"
                              (name "BZ" "cons[RealBand]
                          ((# lb
                                := min(nth[RealBand](RL2, 0)`lb,
                                       nth[RealBand](RL1, 0)`lb),
                              ub := nth[RealBand](RL2, 0)`ub #),
                           cdr[RealBand](RL2))")
                              (("2"
                                (replace -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (copy -3)
                                    (("2"
                                      (name "DR" "cdr(RL2)")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (expand
                                           "strictly_increasing_real?"
                                           (-2 1))
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (split +)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (typepred "i")
                                                  (("1"
                                                    (expand "BZ" 1)
                                                    (("1"
                                                      (case "i = 0")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               1
                                                               3)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "nth"
                                                         2
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             2
                                                             2)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "i-1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "BZ"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (case "i = 0")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (expand "BZ" 1)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (copy
                                                               -10)
                                                              (("1"
                                                                (expand
                                                                 "strictly_increasing_real?"
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "0"
                                                                     "j")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -2
                                                                         2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "j")
                                                                        (("2"
                                                                          (expand
                                                                           "BZ"
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "length"
                                                                               1)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (ground)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "BZ" 2)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         2
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "nth"
                                                           2
                                                           2)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "i-1"
                                                             "j-1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "j")
                                                              (("2"
                                                                (expand
                                                                 "BZ"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              (("3"
                                                                (typepred
                                                                 "i")
                                                                (("3"
                                                                  (expand
                                                                   "BZ"
                                                                   -1)
                                                                  (("3"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 9)
        (("2" (expand "length" 1 2)
          (("2" (assert)
            (("2" (expand "length" 1 4)
              (("2" (expand "length" 1 3)
                (("2" (lift-if)
                  (("2" (lift-if)
                    (("2" (lift-if)
                      (("2" (ground)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil)
       ("4" (hide 9) (("4" (grind) nil nil)) nil))
      nil))
    nil)
   nil nil
   (merge_inc subtype
    "real_bands.merge_inc(list_adt[[# lb: real, ub: real #]].cons((# lb := real_defs.min(list_props[RealBand].nth(real_bands.RL2, 0)`lb, list_props[RealBand].nth(real_bands.RL1, 0)`lb), ub := list_props[RealBand].nth(real_bands.RL2, 0)`ub #), list_adt[RealBand].cdr(real_bands.RL2)), list_adt[RealBand].cdr(real_bands.RL1))"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.OR(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}"))
  (merge_inc_TCC18-1 nil 3640615777 ("" (subtype-tcc) nil nil) nil nil
   (merge_inc subtype
    "real_bands.merge_inc(list_adt[[# lb: real, ub: real #]].cons((# lb := real_defs.min(list_props[RealBand].nth(real_bands.RL2, 0)`lb, list_props[RealBand].nth(real_bands.RL1, 0)`lb), ub := list_props[RealBand].nth(real_bands.RL2, 0)`ub #), list_adt[RealBand].cdr(real_bands.RL2)), list_adt[RealBand].cdr(real_bands.RL1))"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.OR(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}")))
 (first_band_contains_TCC1 0
  (first_band_contains_TCC1-1 nil 3642266991 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (in? const-decl "bool" real_bands nil))
   nil
   (first_band_contains subtype "0"
    "{i: integers.int | booleans.AND(reals.<=(i, list_props[RealBand].length(real_bands.RL)), booleans.AND(reals.>=(i, 0), booleans.AND((booleans.IFF(reals.<(i, list_props[RealBand].length(real_bands.RL)), (EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL)), real_bands.in?(list_props[RealBand].nth(real_bands.RL, j), real_bands.r))))), (booleans.IMPLIES(reals.<(i, list_props[RealBand].length(real_bands.RL)), real_bands.in?(list_props[RealBand].nth(real_bands.RL, i), real_bands.r))))))}")))
 (first_band_contains_TCC2 0
  (first_band_contains_TCC2-1 nil 3642266991 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)) nil
   (first_band_contains subtype "real_bands.RL"
    "(list_adt[RealBand].cons?)")))
 (first_band_contains_TCC3 0
  (first_band_contains_TCC3-1 nil 3642266991
   ("" (skeep)
    (("" (assert)
      (("" (split)
        (("1" (inst + "0")
          (("1" (assert)
            (("1" (expand "nth") (("1" (propax) nil nil)) nil)) nil))
          nil)
         ("2" (expand "nth") (("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (first_band_contains subtype "0"
    "{i: integers.int | booleans.AND(reals.<=(i, list_props[RealBand].length(real_bands.RL)), booleans.AND(reals.>=(i, 0), booleans.AND((booleans.IFF(reals.<(i, list_props[RealBand].length(real_bands.RL)), (EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL)), real_bands.in?(list_props[RealBand].nth(real_bands.RL, j), real_bands.r))))), (booleans.IMPLIES(reals.<(i, list_props[RealBand].length(real_bands.RL)), real_bands.in?(list_props[RealBand].nth(real_bands.RL, i), real_bands.r))))))}")))
 (first_band_contains_TCC4 0
  (first_band_contains_TCC4-1 nil 3642266991
   ("" (skeep)
    (("" (assert)
      (("" (expand "length" 3 2)
        (("" (lift-if) (("" (ground) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (first_band_contains termination
    "real_bands.first_band_contains(real_bands.r, list_adt[RealBand].cdr(real_bands.RL))"
    "nil")))
 (first_band_contains_TCC5 0
  (first_band_contains_TCC5-1 nil 3642266991
   ("" (skeep)
    (("" (case "null?(RL)")
      (("1" (grind) nil nil)
       ("2" (name "G" "v(r, cdr[RealBand](RL))")
        (("1" (replaces -1)
          (("1" (assert)
            (("1" (typepred "G")
              (("1" (assert)
                (("1" (split +)
                  (("1" (expand "length" 1) (("1" (assert) nil nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -)
                      (("1" (skeep)
                        (("1" (inst + "j+1")
                          (("1" (assert)
                            (("1" (split +)
                              (("1"
                                (expand "length" +)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (expand "nth" 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "length" -1)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (flatten)
                    (("3" (hide -4)
                      (("3" (split -)
                        (("1" (expand "length" 1)
                          (("1" (assert) nil nil)) nil)
                         ("2" (skeep)
                          (("2" (case "j = 0")
                            (("1" (replaces -1)
                              (("1"
                                (expand "nth" -2)
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (inst + "j-1")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "nth" -2)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (flatten)
                    (("4" (assert)
                      (("4" (split -6)
                        (("1" (expand "nth" 1) (("1" (propax) nil nil))
                          nil)
                         ("2" (expand "length" -1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "length" 1 2) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((j skolem-const-decl "nat" real_bands nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   nil
   (first_band_contains subtype
    "(number_fields.+)(1, real_bands.first_band_contains(real_bands.r, list_adt[RealBand].cdr(real_bands.RL)))"
    "{i: integers.int | booleans.AND(reals.<=(i, list_props[RealBand].length(real_bands.RL)), booleans.AND(reals.>=(i, 0), booleans.AND((booleans.IFF(reals.<(i, list_props[RealBand].length(real_bands.RL)), (EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL)), real_bands.in?(list_props[RealBand].nth(real_bands.RL, j), real_bands.r))))), (booleans.IMPLIES(reals.<(i, list_props[RealBand].length(real_bands.RL)), real_bands.in?(list_props[RealBand].nth(real_bands.RL, i), real_bands.r))))))}")))
 (intersect_inc_TCC1 0
  (intersect_inc_TCC1-1 nil 3643987860 ("" (subtype-tcc) nil nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (RL2!1 skolem-const-decl "list[RealBand]" real_bands nil)
    (RL1!1 skolem-const-decl "list[RealBand]" real_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (in? const-decl "bool" real_bands nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int nonempty-type-eq-decl nil integers nil)
    (length_null formula-decl nil more_list_props structures))
   nil
   (intersect_inc subtype "list_adt[RealBand].null"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.AND(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}")))
 (intersect_inc_TCC2 0
  (intersect_inc_TCC2-1 nil 3643987860 ("" (subtype-tcc) nil nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (RealBand type-eq-decl nil real_bands nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (in? const-decl "bool" real_bands nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int nonempty-type-eq-decl nil integers nil)
    (length_null formula-decl nil more_list_props structures))
   nil
   (intersect_inc subtype "list_adt[RealBand].null"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.AND(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}")))
 (intersect_inc_TCC3 0
  (intersect_inc_TCC3-1 nil 3643987860
   ("" (skeep)
    (("" (expand "length" 3 3)
      (("" (lift-if) (("" (ground) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (intersect_inc termination
    "real_bands.intersect_inc(list_adt[RealBand].cdr(real_bands.RL1), real_bands.RL2)"
    "nil")))
 (intersect_inc_TCC4 0
  (intersect_inc_TCC4-1 nil 3643987860
   ("" (skeep*)
    (("" (name "G" "v(cdr[RealBand](RL1), RL2)")
      (("1" (assert)
        (("1" (replaces -1)
          (("1" (typepred "G")
            (("1" (assert)
              (("1" (split -)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (skeep)
                      (("1" (inst - "r")
                        (("1" (split +)
                          (("1" (flatten)
                            (("1" (skosimp*)
                              (("1"
                                (case "j!1 = 0")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (expand "in?" -2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (copy -11)
                                        (("1"
                                          (expand
                                           "strictly_increasing_real?"
                                           -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "in?" -7)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst - "0")
                                                  (("1"
                                                    (inst - "0" "j!2")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "nth" -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace 2)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (split)
                                          (("1"
                                            (inst + "j!1-1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "length" -1)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst + "j!2")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide -3)
                              (("2"
                                (replaces -1)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (replace -3)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst + "j+1")
                                        (("2"
                                          (split +)
                                          (("1"
                                            (expand "length" 1)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "nth" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 4)
                  (("2" (hide -3)
                    (("2" (expand "strictly_increasing_real?")
                      (("2" (flatten)
                        (("2" (split)
                          (("1" (skeep)
                            (("1" (inst - "i+1")
                              (("1"
                                (expand "nth" -2)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (typepred "i")
                                (("2"
                                  (expand "length" 1)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (ground)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -2)
                            (("2" (skeep)
                              (("2"
                                (inst - "i+1" "j+1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "nth" -3)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "length" 1)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (ground)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "length" 1)
                                  (("3"
                                    (lift-if)
                                    (("3"
                                      (ground)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "length" 1 3)
        (("2" (lift-if)
          (("2" (hide 4) (("2" (ground) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (hide 4) (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((j skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
     nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
       nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
       nil)
    (RL1 skolem-const-decl "list[RealBand]" real_bands nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (intersect_inc subtype
    "real_bands.intersect_inc(list_adt[RealBand].cdr(real_bands.RL1), real_bands.RL2)"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.AND(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}")))
 (intersect_inc_TCC5 0
  (intersect_inc_TCC5-1 nil 3643987860 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil))
   nil
   (intersect_inc subtype "real_bands.RL2"
    "(list_adt[RealBand].cons?)")))
 (intersect_inc_TCC6 0
  (intersect_inc_TCC6-1 nil 3643987860
   ("" (skeep)
    (("" (expand "length" 4 4)
      (("" (lift-if) (("" (ground) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (intersect_inc termination
    "real_bands.intersect_inc(real_bands.RL1, list_adt[RealBand].cdr(real_bands.RL2))"
    "nil")))
 (intersect_inc_TCC7 0
  (intersect_inc_TCC7-1 nil 3643987860
   ("" (skeep)
    (("" (name "G" "v(RL1, cdr[RealBand](RL2))")
      (("1" (replaces -1)
        (("1" (assert)
          (("1" (typepred "G")
            (("1" (assert)
              (("1" (split -)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (skeep)
                      (("1" (inst - "r")
                        (("1" (replaces -2 :dir rl)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (case "j!2 = 0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "in?" -)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (copy -9)
                                              (("1"
                                                (expand
                                                 "strictly_increasing_real?"
                                                 -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst - "0")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "0"
                                                       "j!1")
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "nth" -4)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split +)
                                          (("1"
                                            (inst + "j!1")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (inst + "j!2 -1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "length" -3)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (replace -1)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst + "j!1+1")
                                      (("2"
                                        (split)
                                        (("1"
                                          (expand "length" 1)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nth" 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 5)
                  (("2" (hide -2)
                    (("2" (expand "strictly_increasing_real?")
                      (("2" (flatten)
                        (("2" (split)
                          (("1" (skeep)
                            (("1" (inst - "i+1")
                              (("1"
                                (expand "nth" -2)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (expand "length" 1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (ground)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (inst - "i+1" "j+1")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "nth" -4)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "length" 1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (ground)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "length" 1)
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (ground)
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "length" 1 4)
        (("2" (hide 5)
          (("2" (lift-if) (("2" (ground) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (hide 5) (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((j skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
     nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
       nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
       nil)
    (RL2 skolem-const-decl "list[RealBand]" real_bands nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil))
   nil
   (intersect_inc subtype
    "real_bands.intersect_inc(real_bands.RL1, list_adt[RealBand].cdr(real_bands.RL2))"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.AND(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}")))
 (intersect_inc_TCC8 0
  (intersect_inc_TCC8-1 nil 3643987860
   ("" (skeep)
    (("" (expand "length" 5 3)
      (("" (lift-if) (("" (ground) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (intersect_inc termination
    "real_bands.intersect_inc(list_adt[RealBand].cdr(real_bands.RL1), real_bands.RL2)"
    "nil")))
 (intersect_inc_TCC9 0
  (intersect_inc_TCC9-2 nil 3643992002
   ("" (skeep*)
    ((""
      (name "G" "append_realband_spec((: (# lb
                                                                                := max
                                                                                   (nth[RealBand]
                                                                                    (RL1, 0)`lb,
                                                                                    nth[RealBand]
                                                                                    (RL2,
                                                                                     0)`lb),
                                                                                ub
                                                                                := nth[RealBand]
                                                                                   (RL1,
                                                                                    0)`ub #) :),
                                                                          v
                                                                          (cdr[RealBand](RL1),
                                                                           RL2))")
      (("1" (replace -1)
        (("1" (case "NOT strictly_increasing_real?(G)")
          (("1" (hide 6)
            (("1" (lemma "append_realband_spec_def")
              (("1" (inst?)
                (("1" (replace -2)
                  (("1" (assert)
                    (("1" (split)
                      (("1"
                        (name "A" "(: (# lb
                                                                             := max
                                                                                (nth[RealBand](RL1, 0)`lb,
                                                                                 nth[RealBand](RL2, 0)`lb),
                                                                             ub := nth[RealBand](RL1, 0)`ub #) :)")
                        (("1" (replace -1)
                          (("1" (case "NOT length[RealBand](A) = 1")
                            (("1" (expand "A" 1)
                              (("1"
                                (hide-all-but 1)
                                (("1" (grind :exclude "nth") nil nil))
                                nil))
                              nil)
                             ("2"
                              (expand "strictly_increasing_real?" 1)
                              (("2"
                                (split)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (case "NOT i!1 = 0")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (expand "nth" 1)
                                        (("2"
                                          (expand "A" 1)
                                          (("2"
                                            (expand "max" 1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (ground)
                                                (("2"
                                                  (copy -5)
                                                  (("2"
                                                    (expand
                                                     "strictly_increasing_real?"
                                                     -1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst - "0")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "v(cdr[RealBand](RL1), RL2)")
                        (("2" (assert)
                          (("2" (hide-all-but (-3 1 5 6))
                            (("2" (expand "strictly_increasing_real?")
                              (("2"
                                (flatten)
                                (("2"
                                  (split)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst - "i+1")
                                      (("1"
                                        (expand "nth" -1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (expand "length" 1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (inst - "i+1" "j+1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "nth" -3)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "length" 1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "length" 1)
                                        (("3"
                                          (lift-if)
                                          (("3"
                                            (ground)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (flatten)
                        (("3" (expand "nth" 1 1)
                          (("3" (typepred "v(cdr[RealBand](RL1), RL2)")
                            (("3" (assert)
                              (("3"
                                (split -)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (name
                                     "rr"
                                     "nth(v(cdr[RealBand](RL1), RL2), 0)`lb")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (inst - "rr")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (split -)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (copy -10)
                                                    (("1"
                                                      (expand
                                                       "strictly_increasing_real?"
                                                       -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "in?"
                                                           -4)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "0"
                                                                 "j!1+1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -2
                                                                     2)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "length"
                                                                   1)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split
                                                                       +)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst + "0")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "in?" 1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "strictly_increasing_real?"
                                                         (-1 -2 -3))
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "0")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "strictly_increasing_real?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (split)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst - "i+1")
                                          (("1"
                                            (expand "nth" -)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand "length" +)
                                            (("2"
                                              (lift-if)
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (inst - "i+1" "j+1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "nth" -)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "length" +)
                                            (("2"
                                              (lift-if)
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (expand "length" +)
                                            (("3"
                                              (lift-if)
                                              (("3" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (skeep)
              (("2" (lemma "append_realband_spec_def")
                (("2" (inst?)
                  (("2" (replace -3)
                    (("2" (assert)
                      (("2" (split -)
                        (("1" (inst - "r")
                          (("1" (replaces -1)
                            (("1" (split +)
                              (("1"
                                (flatten)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (case "j!1 = 0")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst + "0")
                                          (("1"
                                            (split +)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand "nth" 1 1)
                                              (("2"
                                                (expand "in?" 1)
                                                (("2"
                                                  (split 1)
                                                  (("1"
                                                    (expand "max" 1)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "in?"
                                                               -5)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (copy
                                                                   -11)
                                                                  (("1"
                                                                    (expand
                                                                     "strictly_increasing_real?"
                                                                     -1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "0")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "j!2")
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "in?")
                                                            (("2"
                                                              (flatten)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "in?")
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (typepred
                                         "v(cdr[RealBand](RL1), RL2)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst - "r")
                                                (("1"
                                                  (replace 2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 3)
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (inst
                                                           +
                                                           "j!1-1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -2)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "nth"
                                                                 -3)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           +
                                                           "j!2")
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-8 1 5 6))
                                              (("2"
                                                (expand
                                                 "strictly_increasing_real?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst - "i+1")
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           -)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst
                                                         -
                                                         "i+1"
                                                         "j+1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             -)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("3"
                                                            (lift-if)
                                                            (("3"
                                                              (ground)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split -)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (case "NOT j!1 = 0")
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (replaces -1)
                                        (("2"
                                          (expand "nth" -2 1)
                                          (("2"
                                            (expand "in?" -2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (split +)
                                                (("1"
                                                  (inst + "0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "in?")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst + "0")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "in?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred
                                     "v(cdr[RealBand](RL1), RL2)")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst - "r")
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst
                                                           +
                                                           "j!1+1")
                                                          (("1"
                                                            (split +)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "nth"
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-5 1 4 5))
                                          (("2"
                                            (expand
                                             "strictly_increasing_real?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst - "i+1")
                                                    (("1"
                                                      (expand "nth" -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst
                                                     -
                                                     "i+1"
                                                     "j+1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -3)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("3"
                                                        (lift-if)
                                                        (("3"
                                                          (ground)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (expand "strictly_increasing_real?")
                            (("2" (split)
                              (("1"
                                (skeep*)
                                (("1"
                                  (case "i = 0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "nth" 1 1)
                                      (("1"
                                        (expand "nth" 1 3)
                                        (("1"
                                          (reveal "+")
                                          (("1"
                                            (reveal "-")
                                            (("1"
                                              (hide (-1 -2 -3 -7 5))
                                              (("1"
                                                (expand
                                                 "strictly_increasing_real?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst - "0")
                                                    (("1"
                                                      (inst - "0")
                                                      (("1"
                                                        (expand "max")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "i")
                                    (("2"
                                      (expand "length")
                                      (("2"
                                        (expand "length")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (typepred "j")
                                  (("2"
                                    (expand "length")
                                    (("2"
                                      (expand "length")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (typepred "v(cdr[RealBand](RL1), RL2)")
                          (("3" (assert)
                            (("3" (hide-all-but (-4 1 4 5))
                              (("3"
                                (expand "strictly_increasing_real?")
                                (("3"
                                  (flatten)
                                  (("3"
                                    (split)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst - "i+1")
                                        (("1"
                                          (expand "nth" -1)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (expand "length" 1)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (ground)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (inst - "i+1" "j+1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "nth" -3)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "length" 1)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (ground)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "length" 1)
                                          (("3"
                                            (lift-if)
                                            (("3"
                                              (ground)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide 6)
                          (("4" (flatten)
                            (("4" (expand "nth" 1 1)
                              (("4"
                                (name "D" "v(cdr[RealBand](RL1), RL2)")
                                (("4"
                                  (replaces -1)
                                  (("4"
                                    (typepred "D")
                                    (("4"
                                      (assert)
                                      (("4"
                                        (split -)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (name "rr" "nth(D,0)`lb")
                                            (("1"
                                              (inst - "rr")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide -3)
                                                    (("1"
                                                      (split -)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (skeep -)
                                                          (("1"
                                                            (copy -10)
                                                            (("1"
                                                              (expand
                                                               "strictly_increasing_real?"
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "0"
                                                                   "j+1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "in?")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0")
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "length"
                                                                     1)
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (ground)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst + "0")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "strictly_increasing_real?"
                                                             -2)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "0")
                                                                (("2"
                                                                  (expand
                                                                   "in?"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-5 1 4 5))
                                          (("2"
                                            (expand
                                             "strictly_increasing_real?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst - "i+1")
                                                    (("1"
                                                      (expand "nth" -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst
                                                     -
                                                     "i+1"
                                                     "j+1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -3)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("3"
                                                        (lift-if)
                                                        (("3"
                                                          (ground)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 6)
        (("2" (expand "length" 1 3)
          (("2" (lift-if) (("2" (ground) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (hide 6) (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((j skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
     nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
       nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
       nil)
    (j skolem-const-decl "nat" real_bands nil)
    (j skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
     nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
       nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
       nil)
    (j skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
     nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
       nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
       nil)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (reverse def-decl "list[T]" list_props nil)
    (j skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
     nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
       nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
       nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (j skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
     nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
       nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
       nil)
    (append def-decl "list[T]" list_props nil)
    (j!1 skolem-const-decl "nat" real_bands nil)
    (j skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
     nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
       nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL1)))" real_bands
       nil)
    (RL1 skolem-const-decl "list[RealBand]" real_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (A skolem-const-decl "(cons?[[# lb:
            {p: real |
               p >= nth[RealBand](RL1, 0)`lb AND
                p >= nth[RealBand](RL2, 0)`lb},
          ub: real #]])" real_bands nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (append_realband_spec_def formula-decl nil real_bands nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append_realband_spec const-decl "list[RealBand]" real_bands nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (in? const-decl "bool" real_bands nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (intersect_inc subtype
    "real_bands.append_realband_spec((: (# lb := real_defs.max(list_props[RealBand].nth(real_bands.RL1, 0)`lb, list_props[RealBand].nth(real_bands.RL2, 0)`lb), ub := list_props[RealBand].nth(real_bands.RL1, 0)`ub #) :), real_bands.intersect_inc(list_adt[RealBand].cdr(real_bands.RL1), real_bands.RL2))"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.AND(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}"))
  (intersect_inc_TCC9-1 nil 3643987860 ("" (subtype-tcc) nil nil) nil
   nil
   (intersect_inc subtype
    "real_bands.append_realband_spec((: (# lb := real_defs.max(list_props[RealBand].nth(real_bands.RL1, 0)`lb, list_props[RealBand].nth(real_bands.RL2, 0)`lb), ub := list_props[RealBand].nth(real_bands.RL1, 0)`ub #) :), real_bands.intersect_inc(list_adt[RealBand].cdr(real_bands.RL1), real_bands.RL2))"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.AND(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}")))
 (intersect_inc_TCC10 0
  (intersect_inc_TCC10-1 nil 3643987860
   ("" (skeep*) (("" (grind) nil nil)) nil)
   ((length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (intersect_inc subtype "real_bands.RL2"
    "(list_adt[RealBand].cons?)")))
 (intersect_inc_TCC11 0
  (intersect_inc_TCC11-1 nil 3643991823
   ("" (skeep*)
    (("" (expand "length" 6 4)
      (("" (lift-if) (("" (ground) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (intersect_inc termination
    "real_bands.intersect_inc(real_bands.RL1, list_adt[RealBand].cdr(real_bands.RL2))"
    "nil")))
 (intersect_inc_TCC12 0
  (intersect_inc_TCC12-4 nil 3813421653
   ("" (skeep*)
    ((""
      (name "G" "append_realband_spec((: (# lb
                                                           := max
                                                              (nth[RealBand]
                                                               (RL1, 0)`lb,
                                                               nth[RealBand]
                                                               (RL2, 0)`lb),
                                                           ub
                                                           := nth[RealBand]
                                                              (RL2, 0)`ub #) :),
                                                     v(RL1, cdr[RealBand](RL2)))")
      (("1" (replace -1)
        (("1" (case "NOT strictly_increasing_real?(G)")
          (("1" (hide 7)
            (("1" (lemma "append_realband_spec_def")
              (("1" (inst?)
                (("1" (replace -2)
                  (("1" (assert)
                    (("1" (split)
                      (("1"
                        (name "A" "(: (# lb
                                                := max
                                                   (nth[RealBand](RL1, 0)`lb,
                                                    nth[RealBand](RL2, 0)`lb),
                                              ub := nth[RealBand](RL2, 0)`ub #) :)")
                        (("1" (replace -1)
                          (("1" (case "NOT length[RealBand](A) = 1")
                            (("1" (expand "A" 1)
                              (("1"
                                (hide-all-but 1)
                                (("1" (grind :exclude "nth") nil nil))
                                nil))
                              nil)
                             ("2"
                              (expand "strictly_increasing_real?" 1)
                              (("2"
                                (split)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (case "NOT i!1 = 0")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (expand "nth" 1)
                                        (("2"
                                          (expand "A" 1)
                                          (("2"
                                            (expand "max" 1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (ground)
                                                (("2"
                                                  (copy -6)
                                                  (("2"
                                                    (expand
                                                     "strictly_increasing_real?"
                                                     -1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst - "0")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "v(RL1, cdr[RealBand](RL2))")
                        (("2" (assert)
                          (("2" (hide-all-but (-3 1 4 6))
                            (("2" (expand "strictly_increasing_real?")
                              (("2"
                                (flatten)
                                (("2"
                                  (split)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst - "i+1")
                                      (("1"
                                        (expand "nth" -1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (expand "length" 1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (inst - "i+1" "j+1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "nth" -3)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "length" 1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "length" 1)
                                        (("3"
                                          (lift-if)
                                          (("3"
                                            (ground)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (flatten)
                        (("3" (expand "nth" 1 1)
                          (("3" (typepred "v(RL1, cdr[RealBand](RL2))")
                            (("3" (assert)
                              (("3"
                                (split -)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (name
                                     "rr"
                                     "nth(v(RL1, cdr[RealBand](RL2)), 0)`lb")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (inst - "rr")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (split -)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (copy -10)
                                                    (("1"
                                                      (expand
                                                       "strictly_increasing_real?"
                                                       -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "in?"
                                                           -6)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "0"
                                                                 "j!2+1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -2
                                                                     2)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "length"
                                                                   1)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split
                                                                       +)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst + "0")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "in?" 1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "strictly_increasing_real?"
                                                         (-1 -2 -3))
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "0")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-4 1 4 6))
                                  (("2"
                                    (expand
                                     "strictly_increasing_real?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (split)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst - "i+1")
                                            (("1"
                                              (expand "nth" -1)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (inst - "i+1" "j+1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "nth" -3)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "length" 1)
                                              (("3"
                                                (lift-if)
                                                (("3"
                                                  (ground)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (skeep)
              (("2" (lemma "append_realband_spec_def")
                (("2" (inst?)
                  (("2" (replace -3)
                    (("2" (assert)
                      (("2" (split -)
                        (("1" (inst - "r")
                          (("1" (replaces -1)
                            (("1" (split +)
                              (("1"
                                (flatten)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (case "j!2 = 0")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst + "0")
                                          (("1"
                                            (split +)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand "nth" 1 1)
                                              (("2"
                                                (expand "in?" 1)
                                                (("2"
                                                  (split 1)
                                                  (("1"
                                                    (expand "max" 1)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "in?"
                                                               (-3 -5))
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (copy -7)
                                                            (("2"
                                                              (expand
                                                               "strictly_increasing_real?"
                                                               -1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "0")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "0"
                                                                     "j!1")
                                                                    (("2"
                                                                      (expand
                                                                       "in?")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "in?")
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (typepred
                                         "v(RL1, cdr[RealBand](RL2))")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst - "r")
                                                (("1"
                                                  (replace 2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 3)
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (case
                                                           "NOT j!1 = 0")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               +
                                                               "0")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           +
                                                           "j!2-1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -4)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "nth"
                                                                 -5)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-8 1 4 6))
                                              (("2"
                                                (expand
                                                 "strictly_increasing_real?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst - "i+1")
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst
                                                         -
                                                         "i+1"
                                                         "j+1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             -3)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("3"
                                                            (lift-if)
                                                            (("3"
                                                              (ground)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split -)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (case "NOT j!1 = 0")
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (replaces -1)
                                        (("2"
                                          (expand "nth" -2 1)
                                          (("2"
                                            (expand "in?" -2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (split +)
                                                (("1"
                                                  (inst + "0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "in?")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst + "0")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "in?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred
                                     "v(RL1, cdr[RealBand](RL2))")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst - "r")
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst
                                                           +
                                                           "j!2+1")
                                                          (("1"
                                                            (split +)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "nth"
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-5 1 3 5))
                                          (("2"
                                            (expand
                                             "strictly_increasing_real?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst - "i+1")
                                                    (("1"
                                                      (expand "nth" -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst
                                                     -
                                                     "i+1"
                                                     "j+1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -3)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("3"
                                                        (lift-if)
                                                        (("3"
                                                          (ground)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (expand "strictly_increasing_real?")
                            (("2" (split)
                              (("1"
                                (skeep*)
                                (("1"
                                  (case "i = 0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "nth" 1 1)
                                      (("1"
                                        (expand "nth" 1 3)
                                        (("1"
                                          (reveal "+")
                                          (("1"
                                            (reveal "-")
                                            (("1"
                                              (hide (-1 -2 -3 -6 6))
                                              (("1"
                                                (expand
                                                 "strictly_increasing_real?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst - "0")
                                                    (("1"
                                                      (inst - "0")
                                                      (("1"
                                                        (expand "max")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "i")
                                    (("2"
                                      (expand "length")
                                      (("2"
                                        (expand "length")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (typepred "j")
                                  (("2"
                                    (expand "length")
                                    (("2"
                                      (expand "length")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 7)
                          (("3" (typepred "v(RL1, cdr[RealBand](RL2))")
                            (("3" (assert)
                              (("3"
                                (hide-all-but (-4 1 3 5))
                                (("3"
                                  (expand "strictly_increasing_real?")
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (split)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst - "i+1")
                                          (("1"
                                            (expand "nth" -1)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (ground)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (inst - "i+1" "j+1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "nth" -3)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (ground)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (expand "length" 1)
                                            (("3"
                                              (lift-if)
                                              (("3"
                                                (ground)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide 7)
                          (("4" (flatten)
                            (("4" (expand "nth" 1 1)
                              (("4"
                                (name "D" "v(RL1, cdr[RealBand](RL2))")
                                (("4"
                                  (replaces -1)
                                  (("4"
                                    (typepred "D")
                                    (("4"
                                      (assert)
                                      (("4"
                                        (split -)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (name "rr" "nth(D,0)`lb")
                                            (("1"
                                              (inst - "rr")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide -3)
                                                    (("1"
                                                      (split -)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (skeep -2)
                                                          (("1"
                                                            (copy -10)
                                                            (("1"
                                                              (expand
                                                               "strictly_increasing_real?"
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "0"
                                                                   "j+1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "in?")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0")
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "length"
                                                                     1)
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (ground)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst + "0")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "strictly_increasing_real?"
                                                             -2)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "0")
                                                                (("2"
                                                                  (expand
                                                                   "in?"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-5 1 3 5))
                                          (("2"
                                            (expand
                                             "strictly_increasing_real?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst - "i+1")
                                                    (("1"
                                                      (expand "nth" -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst
                                                     -
                                                     "i+1"
                                                     "j+1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -3)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("3"
                                                        (lift-if)
                                                        (("3"
                                                          (ground)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 7)
        (("2" (expand "length" 1 3)
          (("2" (lift-if)
            (("2" (ground)
              (("1" (grind) nil nil)
               ("2" (expand "length" 2 2)
                (("2" (expand "length" 2 4)
                  (("2" (lift-if)
                    (("2" (ground) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 7) (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((j skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
     nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
       nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
       nil)
    (j skolem-const-decl "nat" real_bands nil)
    (j skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
     nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
       nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
       nil)
    (j skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
     nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
       nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
       nil)
    (j skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
     nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
       nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
       nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (remove_last const-decl "list[RealBand]" real_bands nil)
    (reverse def-decl "list[T]" list_props nil)
    (j skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
     nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
       nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
       nil)
    (append def-decl "list[T]" list_props nil)
    (j!2 skolem-const-decl "nat" real_bands nil)
    (j skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
     nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
       nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "below(length(cdr[RealBand](RL2)))" real_bands
       nil)
    (RL2 skolem-const-decl "list[RealBand]" real_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (A skolem-const-decl "(cons?[[# lb:
            {p: real |
               p >= nth[RealBand](RL1, 0)`lb AND
                p >= nth[RealBand](RL2, 0)`lb},
          ub: real #]])" real_bands nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (append_realband_spec_def formula-decl nil real_bands nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealBand type-eq-decl nil real_bands nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append_realband_spec const-decl "list[RealBand]" real_bands nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (strictly_increasing_real? const-decl "bool" real_bands nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (in? const-decl "bool" real_bands nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (intersect_inc subtype
    "real_bands.append_realband_spec((: (# lb := real_defs.max(list_props[RealBand].nth(real_bands.RL1, 0)`lb, list_props[RealBand].nth(real_bands.RL2, 0)`lb), ub := list_props[RealBand].nth(real_bands.RL2, 0)`ub #) :), real_bands.intersect_inc(real_bands.RL1, list_adt[RealBand].cdr(real_bands.RL2)))"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.AND(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}"))
  (intersect_inc_TCC12-3 nil 3813421023
   ("" (skeep*)
    ((""
      (name "G" "append_realband_spec((: (# lb
                                                           := max
                                                              (nth[RealBand]
                                                               (RL1, 0)`lb,
                                                               nth[RealBand]
                                                               (RL2, 0)`lb),
                                                           ub
                                                           := nth[RealBand]
                                                              (RL2, 0)`ub #) :),
                                                     v(RL1, cdr[RealBand](RL2)))")
      (("1" (replace -1)
        (("1" (case "NOT strictly_increasing_real?(G)")
          (("1" (hide 7)
            (("1" (lemma "append_realband_spec_def")
              (("1" (inst?)
                (("1" (replace -2)
                  (("1" (assert)
                    (("1" (split)
                      (("1"
                        (name "A" "(: (# lb
                                                := max
                                                   (nth[RealBand](RL1, 0)`lb,
                                                    nth[RealBand](RL2, 0)`lb),
                                              ub := nth[RealBand](RL2, 0)`ub #) :)")
                        (("1" (replace -1)
                          (("1" (case "NOT length[RealBand](A) = 1")
                            (("1" (expand "A" 1)
                              (("1"
                                (hide-all-but 1)
                                (("1" (grind :exclude "nth") nil)))))
                             ("2"
                              (expand "strictly_increasing_real?" 1)
                              (("2"
                                (split)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (case "NOT i!1 = 0")
                                    (("1" (assert) nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (expand "nth" 1)
                                        (("2"
                                          (expand "A" 1)
                                          (("2"
                                            (expand "max" 1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (ground)
                                                (("2"
                                                  (copy -6)
                                                  (("2"
                                                    (expand
                                                     "strictly_increasing_real?"
                                                     -1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst - "0")
                                                        nil)))))))))))))))))))))))
                                 ("2"
                                  (skeep)
                                  (("2" (assert) nil)))))))))))))
                       ("2" (typepred "v(RL1, cdr[RealBand](RL2))")
                        (("2" (assert)
                          (("2" (hide-all-but (-3 1 6 8))
                            (("2" (expand "strictly_increasing_real?")
                              (("2"
                                (flatten)
                                (("2"
                                  (split)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst - "i+1")
                                      (("1"
                                        (expand "nth" -1)
                                        (("1" (propax) nil)))
                                       ("2"
                                        (expand "length" 1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (grind)
                                              nil)))))))))))
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (inst - "i+1" "j+1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "nth" -3)
                                          (("1" (propax) nil)))))
                                       ("2"
                                        (expand "length" 1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("2" (grind) nil)))))))
                                       ("3"
                                        (expand "length" 1)
                                        (("3"
                                          (lift-if)
                                          (("3"
                                            (ground)
                                            (("3"
                                              (grind)
                                              nil)))))))))))))))))))))))
                       ("3" (flatten)
                        (("3" (expand "nth" 1 1)
                          (("3" (typepred "v(RL1, cdr[RealBand](RL2))")
                            (("3" (assert)
                              (("3"
                                (split -)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (name
                                     "rr"
                                     "nth(v(RL1, cdr[RealBand](RL2)), 0)`lb")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (inst - "rr")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (split -)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (copy -10)
                                                    (("1"
                                                      (expand
                                                       "strictly_increasing_real?"
                                                       -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "in?"
                                                           -6)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "0"
                                                                 "j!2+1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -2
                                                                     2)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))
                                                                 ("2"
                                                                  (expand
                                                                   "length"
                                                                   1)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split
                                                                       +)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (grind)
                                                                            nil)))))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          nil)))))))))))))))))))))))))))
                                               ("2"
                                                (inst + "0")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "in?" 1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "strictly_increasing_real?"
                                                         (-1 -2 -3))
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "0")
                                                            (("2"
                                                              (assert)
                                                              nil)))))))))))))))))))))))))))))
                                 ("2"
                                  (hide-all-but (-4 1 6 8))
                                  (("2"
                                    (expand
                                     "strictly_increasing_real?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (split)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst - "i+1")
                                            (("1"
                                              (expand "nth" -1)
                                              (("1" (propax) nil)))
                                             ("2"
                                              (expand "length" 1)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (grind)
                                                    nil)))))))))))
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (inst - "i+1" "j+1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "nth" -3)
                                                (("1" (propax) nil)))))
                                             ("2"
                                              (expand "length" 1)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (grind)
                                                    nil)))))))
                                             ("3"
                                              (expand "length" 1)
                                              (("3"
                                                (lift-if)
                                                (("3"
                                                  (ground)
                                                  (("3"
                                                    (grind)
                                                    nil)))))))))))))))))))))))))))))))))))))))))
           ("2" (assert)
            (("2" (skeep)
              (("2" (lemma "append_realband_spec_def")
                (("2" (inst?)
                  (("2" (replace -3)
                    (("2" (assert)
                      (("2" (split -)
                        (("1" (inst - "r")
                          (("1" (replaces -1)
                            (("1" (split +)
                              (("1"
                                (flatten)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (case "j!2 = 0")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst + "0")
                                          (("1"
                                            (split +)
                                            (("1" (assert) nil)
                                             ("2"
                                              (expand "nth" 1 1)
                                              (("2"
                                                (expand "in?" 1)
                                                (("2"
                                                  (split 1)
                                                  (("1"
                                                    (expand "max" 1)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "in?"
                                                               (-3 -5))
                                                              (("1"
                                                                (propax)
                                                                nil)))))))
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (copy -7)
                                                            (("2"
                                                              (expand
                                                               "strictly_increasing_real?"
                                                               -1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "0")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "0"
                                                                     "j!1")
                                                                    (("2"
                                                                      (expand
                                                                       "in?")
                                                                      (("2"
                                                                        (ground)
                                                                        nil)))))))))))))))))))))
                                                   ("2"
                                                    (expand "in?")
                                                    (("2"
                                                      (ground)
                                                      nil)))))))))))))))))
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (typepred
                                         "v(RL1, cdr[RealBand](RL2))")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst - "r")
                                                (("1"
                                                  (replace 2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 3)
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (case
                                                           "NOT j!1 = 0")
                                                          (("1"
                                                            (grind)
                                                            nil)
                                                           ("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               +
                                                               "0")
                                                              (("2"
                                                                (assert)
                                                                nil)))))))
                                                         ("2"
                                                          (inst
                                                           +
                                                           "j!2-1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -4)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    nil)))))
                                                               ("2"
                                                                (expand
                                                                 "nth"
                                                                 -5)
                                                                (("2"
                                                                  (propax)
                                                                  nil)))))))))))))))))))))
                                             ("2"
                                              (hide-all-but (-8 1 6 8))
                                              (("2"
                                                (expand
                                                 "strictly_increasing_real?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst - "i+1")
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           -1)
                                                          (("1"
                                                            (propax)
                                                            nil)))
                                                         ("2"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (grind)
                                                                nil)))))))))))
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst
                                                         -
                                                         "i+1"
                                                         "j+1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             -3)
                                                            (("1"
                                                              (propax)
                                                              nil)))))
                                                         ("2"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (grind)
                                                                nil)))))))
                                                         ("3"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("3"
                                                            (lift-if)
                                                            (("3"
                                                              (ground)
                                                              (("3"
                                                                (grind)
                                                                nil)))))))))))))))))))))))))))))))))
                               ("2"
                                (flatten)
                                (("2"
                                  (split -)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (case "NOT j!1 = 0")
                                      (("1" (grind) nil)
                                       ("2"
                                        (replaces -1)
                                        (("2"
                                          (expand "nth" -2 1)
                                          (("2"
                                            (expand "in?" -2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (split +)
                                                (("1"
                                                  (inst + "0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "in?")
                                                      (("1"
                                                        (propax)
                                                        nil)))))))
                                                 ("2"
                                                  (inst + "0")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "in?")
                                                      (("2"
                                                        (propax)
                                                        nil)))))))))))))))))))))
                                   ("2"
                                    (typepred
                                     "v(RL1, cdr[RealBand](RL2))")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst - "r")
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst
                                                           +
                                                           "j!2+1")
                                                          (("1"
                                                            (split +)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (grind)
                                                                    nil)))))))
                                                             ("2"
                                                              (expand
                                                               "nth"
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil)))))))))))))))))))))))
                                         ("2"
                                          (hide-all-but (-5 1 6 7))
                                          (("2"
                                            (expand
                                             "strictly_increasing_real?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst - "i+1")
                                                    (("1"
                                                      (expand "nth" -1)
                                                      (("1"
                                                        (propax)
                                                        nil)))
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (grind)
                                                            nil)))))))))))
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst
                                                     -
                                                     "i+1"
                                                     "j+1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -3)
                                                        (("1"
                                                          (propax)
                                                          nil)))))
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (grind)
                                                            nil)))))))
                                                     ("3"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("3"
                                                        (lift-if)
                                                        (("3"
                                                          (ground)
                                                          (("3"
                                                            (grind)
                                                            nil)))))))))))))))))))))))))))))))))))
                         ("2" (hide-all-but 1)
                          (("2" (expand "strictly_increasing_real?")
                            (("2" (split)
                              (("1"
                                (skeep*)
                                (("1"
                                  (case "i = 0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "nth" 1 1)
                                      (("1"
                                        (expand "nth" 1 3)
                                        (("1"
                                          (reveal "+")
                                          (("1"
                                            (reveal "-")
                                            (("1"
                                              (hide (-1 -2 -3 -6 6))
                                              (("1"
                                                (expand
                                                 "strictly_increasing_real?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst - "0")
                                                    (("1"
                                                      (inst - "0")
                                                      (("1"
                                                        (expand "max")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (ground)
                                                            nil)))))))))))))))))))))))))
                                   ("2"
                                    (typepred "i")
                                    (("2"
                                      (expand "length")
                                      (("2"
                                        (expand "length")
                                        (("2" (assert) nil)))))))))))
                               ("2"
                                (skeep)
                                (("2"
                                  (typepred "j")
                                  (("2"
                                    (expand "length")
                                    (("2"
                                      (expand "length")
                                      (("2" (assert) nil)))))))))))))))
                         ("3" (hide 7)
                          (("3" (typepred "v(RL1, cdr[RealBand](RL2))")
                            (("3" (assert)
                              (("3"
                                (hide-all-but (-4 1 6 7))
                                (("3"
                                  (expand "strictly_increasing_real?")
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (split)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst - "i+1")
                                          (("1"
                                            (expand "nth" -1)
                                            (("1" (propax) nil)))
                                           ("2"
                                            (expand "length" 1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (ground)
                                                (("2"
                                                  (grind)
                                                  nil)))))))))))
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (inst - "i+1" "j+1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "nth" -3)
                                              (("1" (propax) nil)))))
                                           ("2"
                                            (expand "length" 1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (ground)
                                                (("2"
                                                  (grind)
                                                  nil)))))))
                                           ("3"
                                            (expand "length" 1)
                                            (("3"
                                              (lift-if)
                                              (("3"
                                                (ground)
                                                (("3"
                                                  (grind)
                                                  nil)))))))))))))))))))))))))
                         ("4" (hide 7)
                          (("4" (flatten)
                            (("4" (expand "nth" 1 1)
                              (("4"
                                (name "D" "v(RL1, cdr[RealBand](RL2))")
                                (("4"
                                  (replaces -1)
                                  (("4"
                                    (typepred "D")
                                    (("4"
                                      (assert)
                                      (("4"
                                        (split -)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (name "rr" "nth(D,0)`lb")
                                            (("1"
                                              (inst - "rr")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide -3)
                                                    (("1"
                                                      (split -)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (skeep -2)
                                                          (("1"
                                                            (copy -10)
                                                            (("1"
                                                              (expand
                                                               "strictly_increasing_real?"
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "0"
                                                                   "j+1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "in?")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0")
                                                                          (("1"
                                                                            (ground)
                                                                            nil)))))))))
                                                                   ("2"
                                                                    (expand
                                                                     "length"
                                                                     1)
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (ground)
                                                                        (("2"
                                                                          (grind)
                                                                          nil)))))))))))))))))))
                                                       ("2"
                                                        (inst + "0")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "strictly_increasing_real?"
                                                             -2)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "0")
                                                                (("2"
                                                                  (expand
                                                                   "in?"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil)))))))))))))))))))))))))))
                                         ("2"
                                          (hide-all-but (-5 1 6 7))
                                          (("2"
                                            (expand
                                             "strictly_increasing_real?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst - "i+1")
                                                    (("1"
                                                      (expand "nth" -1)
                                                      (("1"
                                                        (propax)
                                                        nil)))
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (grind)
                                                            nil)))))))))))
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst
                                                     -
                                                     "i+1"
                                                     "j+1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -3)
                                                        (("1"
                                                          (propax)
                                                          nil)))))
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (grind)
                                                            nil)))))))
                                                     ("3"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("3"
                                                        (lift-if)
                                                        (("3"
                                                          (ground)
                                                          (("3"
                                                            (grind)
                                                            nil)))))))))))))))))))))))))))))))))))))))))))))))))))))
       ("2" (hide 7)
        (("2" (expand "length" 1 3)
          (("2" (lift-if)
            (("2" (ground)
              (("1" (grind) nil)
               ("2" (expand "length" 2 2)
                (("2" (expand "length" 2 4)
                  (("2" (lift-if)
                    (("2" (ground) (("2" (grind) nil)))))))))))))))))
       ("3" (hide 7) (("3" (grind) nil))))))
    nil)
   nil nil
   (intersect_inc subtype
    "real_bands.append_realband_spec((: (# lb := real_defs.max(list_props[RealBand].nth(real_bands.RL1, 0)`lb, list_props[RealBand].nth(real_bands.RL2, 0)`lb), ub := list_props[RealBand].nth(real_bands.RL2, 0)`ub #) :), real_bands.intersect_inc(real_bands.RL1, list_adt[RealBand].cdr(real_bands.RL2)))"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.AND(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}"))
  (intersect_inc_TCC12-2 nil 3644064163
   ("" (skeep*)
    ((""
      (name "G" "append_realband_spec((: (# lb
                                                    := max
                                                       (nth[RealBand]
                                                        (RL1, 0)`lb,
                                                        nth[RealBand]
                                                        (RL2, 0)`lb),
                                                    ub
                                                    := nth[RealBand]
                                                       (RL2, 0)`ub #) :),
                                              v(RL1, cdr[RealBand](RL2)))")
      (("1" (replace -1)
        (("1" (case "NOT strictly_increasing_real?(G)")
          (("1" (hide 7)
            (("1" (lemma "append_realband_spec_def")
              (("1" (inst?)
                (("1" (replace -2)
                  (("1" (assert)
                    (("1" (split)
                      (("1"
                        (name "A" "(: (# lb
                                   := max
                                      (nth[RealBand](RL1, 0)`lb,
                                       nth[RealBand](RL2, 0)`lb),
                                 ub := nth[RealBand](RL2, 0)`ub #) :)")
                        (("1" (replace -1)
                          (("1" (case "NOT length[RealBand](A) = 1")
                            (("1" (expand "A" 1)
                              (("1"
                                (hide-all-but 1)
                                (("1" (grind :exclude "nth") nil nil))
                                nil))
                              nil)
                             ("2"
                              (expand "strictly_increasing_real?" 1)
                              (("2"
                                (split)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (case "NOT i!1 = 0")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (expand "nth" 1)
                                        (("2"
                                          (expand "A" 1)
                                          (("2"
                                            (expand "max" 1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (ground)
                                                (("2"
                                                  (copy -6)
                                                  (("2"
                                                    (expand
                                                     "strictly_increasing_real?"
                                                     -1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst - "0")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "v(RL1, cdr[RealBand](RL2))")
                        (("2" (assert)
                          (("2" (hide-all-but (-3 1 7 8))
                            (("2" (expand "strictly_increasing_real?")
                              (("2"
                                (flatten)
                                (("2"
                                  (split)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst - "i+1")
                                      (("1"
                                        (expand "nth" -1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (expand "length" 1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (inst - "i+1" "j+1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "nth" -3)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "length" 1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "length" 1)
                                        (("3"
                                          (lift-if)
                                          (("3"
                                            (ground)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (flatten)
                        (("3" (expand "nth" 1 1)
                          (("3" (typepred "v(RL1, cdr[RealBand](RL2))")
                            (("3" (assert)
                              (("3"
                                (split -)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (name
                                     "rr"
                                     "nth(v(RL1, cdr[RealBand](RL2)), 0)`lb")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (inst - "rr")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (split -)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (copy -10)
                                                    (("1"
                                                      (expand
                                                       "strictly_increasing_real?"
                                                       -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "in?"
                                                           -6)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "0"
                                                                 "j!2+1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -2
                                                                     2)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "length"
                                                                   1)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split
                                                                       +)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst + "0")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "in?" 1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "strictly_increasing_real?"
                                                         (-1 -2 -3))
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "0")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-4 1 7 8))
                                  (("2"
                                    (expand
                                     "strictly_increasing_real?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (split)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst - "i+1")
                                            (("1"
                                              (expand "nth" -1)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (inst - "i+1" "j+1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "nth" -3)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "length" 1)
                                              (("3"
                                                (lift-if)
                                                (("3"
                                                  (ground)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (skeep)
              (("2" (lemma "append_realband_spec_def")
                (("2" (inst?)
                  (("2" (replace -3)
                    (("2" (assert)
                      (("2" (split -)
                        (("1" (inst - "r")
                          (("1" (replaces -1)
                            (("1" (split +)
                              (("1"
                                (flatten)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (case "j!2 = 0")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst + "0")
                                          (("1"
                                            (split +)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand "nth" 1 1)
                                              (("2"
                                                (expand "in?" 1)
                                                (("2"
                                                  (split 1)
                                                  (("1"
                                                    (expand "max" 1)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "in?"
                                                               (-3 -5))
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (copy -7)
                                                            (("2"
                                                              (expand
                                                               "strictly_increasing_real?"
                                                               -1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "0")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "0"
                                                                     "j!1")
                                                                    (("2"
                                                                      (expand
                                                                       "in?")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "in?")
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (typepred
                                         "v(RL1, cdr[RealBand](RL2))")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst - "r")
                                                (("1"
                                                  (replace 2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 3)
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (case
                                                           "NOT j!1 = 0")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               +
                                                               "0")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           +
                                                           "j!2-1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -4)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "nth"
                                                                 -5)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-8 1 7 8))
                                              (("2"
                                                (expand
                                                 "strictly_increasing_real?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst - "i+1")
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst
                                                         -
                                                         "i+1"
                                                         "j+1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             -3)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("3"
                                                            (lift-if)
                                                            (("3"
                                                              (ground)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split -)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (case "NOT j!1 = 0")
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (replaces -1)
                                        (("2"
                                          (expand "nth" -2 1)
                                          (("2"
                                            (expand "in?" -2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (split +)
                                                (("1"
                                                  (inst + "0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "in?")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst + "0")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "in?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred
                                     "v(RL1, cdr[RealBand](RL2))")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst - "r")
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst
                                                           +
                                                           "j!2+1")
                                                          (("1"
                                                            (split +)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "nth"
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-5 1 6 7))
                                          (("2"
                                            (expand
                                             "strictly_increasing_real?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst - "i+1")
                                                    (("1"
                                                      (expand "nth" -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst
                                                     -
                                                     "i+1"
                                                     "j+1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -3)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("3"
                                                        (lift-if)
                                                        (("3"
                                                          (ground)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (expand "strictly_increasing_real?")
                            (("2" (split)
                              (("1"
                                (skeep*)
                                (("1"
                                  (case "i = 0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "nth" 1 1)
                                      (("1"
                                        (expand "nth" 1 3)
                                        (("1"
                                          (reveal "+")
                                          (("1"
                                            (reveal "-")
                                            (("1"
                                              (hide (-1 -2 -3 -6 6))
                                              (("1"
                                                (expand
                                                 "strictly_increasing_real?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst - "0")
                                                    (("1"
                                                      (inst - "0")
                                                      (("1"
                                                        (expand "max")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "i")
                                    (("2"
                                      (expand "length")
                                      (("2"
                                        (expand "length")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (typepred "j")
                                  (("2"
                                    (expand "length")
                                    (("2"
                                      (expand "length")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 7)
                          (("3" (typepred "v(RL1, cdr[RealBand](RL2))")
                            (("3" (assert)
                              (("3"
                                (hide-all-but (-4 1 6 7))
                                (("3"
                                  (expand "strictly_increasing_real?")
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (split)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst - "i+1")
                                          (("1"
                                            (expand "nth" -1)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (ground)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (inst - "i+1" "j+1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "nth" -3)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (ground)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (expand "length" 1)
                                            (("3"
                                              (lift-if)
                                              (("3"
                                                (ground)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide 7)
                          (("4" (flatten)
                            (("4" (expand "nth" 1 1)
                              (("4"
                                (name "D" "v(RL1, cdr[RealBand](RL2))")
                                (("4"
                                  (replaces -1)
                                  (("4"
                                    (typepred "D")
                                    (("4"
                                      (assert)
                                      (("4"
                                        (split -)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (name "rr" "nth(D,0)`lb")
                                            (("1"
                                              (inst - "rr")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide -3)
                                                    (("1"
                                                      (split -)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (skeep -2)
                                                          (("1"
                                                            (copy -10)
                                                            (("1"
                                                              (expand
                                                               "strictly_increasing_real?"
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "0"
                                                                   "j+1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "in?")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0")
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "length"
                                                                     1)
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (ground)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst + "0")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "strictly_increasing_real?"
                                                             -2)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "0")
                                                                (("2"
                                                                  (expand
                                                                   "in?"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-5 1 6 7))
                                          (("2"
                                            (expand
                                             "strictly_increasing_real?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst - "i+1")
                                                    (("1"
                                                      (expand "nth" -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst
                                                     -
                                                     "i+1"
                                                     "j+1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -3)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("3"
                                                        (lift-if)
                                                        (("3"
                                                          (ground)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 7)
        (("2" (expand "length" 1 3)
          (("2" (lift-if)
            (("2" (ground)
              (("1" (grind) nil nil)
               ("2" (expand "length" 2 2)
                (("2" (expand "length" 2 4)
                  (("2" (lift-if)
                    (("2" (ground) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 7) (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((length_singleton formula-decl nil more_list_props structures)) nil
   (intersect_inc subtype
    "real_bands.append_realband_spec((: (# lb := real_defs.max(list_props[RealBand].nth(real_bands.RL1, 0)`lb, list_props[RealBand].nth(real_bands.RL2, 0)`lb), ub := list_props[RealBand].nth(real_bands.RL2, 0)`ub #) :), real_bands.intersect_inc(real_bands.RL1, list_adt[RealBand].cdr(real_bands.RL2)))"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.AND(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}"))
  (intersect_inc_TCC12-1 nil 3643991823 ("" (subtype-tcc) nil nil) nil
   nil
   (intersect_inc subtype
    "real_bands.append_realband_spec((: (# lb := real_defs.max(list_props[RealBand].nth(real_bands.RL1, 0)`lb, list_props[RealBand].nth(real_bands.RL2, 0)`lb), ub := list_props[RealBand].nth(real_bands.RL2, 0)`ub #) :), real_bands.intersect_inc(real_bands.RL1, list_adt[RealBand].cdr(real_bands.RL2)))"
    "{rl: list_adt[RealBand].list | booleans.IMPLIES(booleans.AND(real_bands.strictly_increasing_real?(real_bands.RL1), real_bands.strictly_increasing_real?(real_bands.RL2)), booleans.AND(real_bands.strictly_increasing_real?(rl), FORALL (r: reals.real): (booleans.IFF((booleans.AND(EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL1)), real_bands.in?(list_props[RealBand].nth(real_bands.RL1, j), r)), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(real_bands.RL2)), real_bands.in?(list_props[RealBand].nth(real_bands.RL2, j), r)))), EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<(j, list_props[RealBand].length(rl)), real_bands.in?(list_props[RealBand].nth(rl, j), r))))))}"))))

