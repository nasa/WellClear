(kinematic_bands_exist
 (first_conf_step?_TCC1 0
  (first_conf_step?_TCC1-1 nil 3638004553
   ("" (skeep*)
    (("" (lemma "nnreal_times_nnreal_is_nnreal")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (i skolem-const-decl "int" kinematic_bands_exist nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (first_conf_step? subtype
    "number_fields.*(kinematic_bands_exist.i, kinematic_bands_exist.ts)"
    "nnreal")))
 (first_conflict_step_TCC1 0
  (first_conflict_step_TCC1-2 "" 3813484684
   ("" (skeep)
    (("" (lemma "nnreal_times_nnreal_is_nnreal")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak
   (first_conflict_step subtype
    "real_defs.max((number_fields.+)((number_fields.-)(kinematic_bands_exist.MaxN, kinematic_bands_exist.k), 1), 0)"
    "naturalnumber"))
  (first_conflict_step_TCC1-1 nil 3631533677
   ("" (skeep)
    (("" (skeep*)
      (("" (lemma "nnreal_times_nnreal_is_nnreal")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (first_conflict_step subtype
    "real_defs.max((number_fields.+)((number_fields.-)(kinematic_bands_exist.MaxN, kinematic_bands_exist.k), 1), 0)"
    "naturalnumber")))
 (first_conflict_step_TCC2 0
  (first_conflict_step_TCC2-1 nil 3631533677
   ("" (skeep)
    (("" (expand "first_conf_step?")
      (("" (skeep) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (first_conf_step? const-decl "bool" kinematic_bands_exist nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil
   (first_conflict_step subtype "(number_fields.-)(1)"
    "(kinematic_bands_exist.first_conf_step?(kinematic_bands_exist.CD, kinematic_bands_exist.B, kinematic_bands_exist.T, kinematic_bands_exist.traj, kinematic_bands_exist.k, kinematic_bands_exist.ts, kinematic_bands_exist.MaxN, kinematic_bands_exist.AL))")))
 (first_conflict_step_TCC3 0
  (first_conflict_step_TCC3-1 nil 3631533677
   ("" (skeep*)
    (("" (expand "first_conf_step?")
      (("" (assert)
        (("" (invoke (name "az" "%1") (! -1 1))
          (("" (replaces -1)
            (("" (assert)
              (("" (typepred "az")
                (("" (assert)
                  (("" (hide (-2 -3))
                    (("" (flatten)
                      (("" (assert)
                        (("" (ground)
                          (("1" (skeep)
                            (("1" (inst + "q") (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (skosimp*) (("2" (assert) nil nil))
                            nil)
                           ("3" (inst - "az" "k")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((q skolem-const-decl "int" kinematic_bands_exist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (first_conflict_aircraft def-decl "{j: int |
   (j >= 0 IFF
     (i <= j AND
       j < length(AL) AND
        CD_future_traj(CD, B, T, traj, k * tsn, AL, j) AND
         (FORALL (q: int):
            q >= i AND q < j IMPLIES
             NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q))))
    AND
    (j < 0 IFF
      (FORALL (q: int):
         q >= i AND q < length(AL) IMPLIES
          NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q)))}"
     int_bands nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (CD_future_traj const-decl "bool" int_bands nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (string type-eq-decl nil strings nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Traj type-eq-decl nil int_bands nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (first_conf_step? const-decl "bool" kinematic_bands_exist nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (first_conflict_step subtype "kinematic_bands_exist.k"
    "(kinematic_bands_exist.first_conf_step?(kinematic_bands_exist.CD, kinematic_bands_exist.B, kinematic_bands_exist.T, kinematic_bands_exist.traj, kinematic_bands_exist.k, kinematic_bands_exist.ts, kinematic_bands_exist.MaxN, kinematic_bands_exist.AL))")))
 (first_conflict_step_TCC4 0
  (first_conflict_step_TCC4-3 "" 3813484684
   ("" (skeep) (("" (ground) nil nil)) nil) nil shostak
   (first_conflict_step termination
    "kinematic_bands_exist.first_conflict_step(kinematic_bands_exist.CD, kinematic_bands_exist.B, kinematic_bands_exist.T, kinematic_bands_exist.traj, (number_fields.+)(kinematic_bands_exist.k, 1), kinematic_bands_exist.ts, kinematic_bands_exist.MaxN, kinematic_bands_exist.AL)"
    "nil"))
  (first_conflict_step_TCC4-2 nil 3631966500
   ("" (skeep)
    (("" (ground)
      (("1"
        (typepred
         "first_conflict_aircraft(CD, B, T, traj, k, ts, 0, AL)")
        (("1" (assert)
          (("1"
            (inst 2
             "first_conflict_aircraft(CD, B, T, traj, k, ts, 0, AL)")
            (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (skeep) (("2" (assert) nil nil)) nil)
       ("3"
        (typepred
         "first_conflict_aircraft(CD, B, T, traj, k, ts, 0, AL)")
        (("3" (hide (-2 -3))
          (("3" (assert)
            (("3" (flatten)
              (("3" (assert)
                (("3"
                  (inst -4
                   "first_conflict_aircraft(CD, B, T, traj, k, ts, 0, AL)"
                   "k")
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_nnreal_0 formula-decl nil min_max reals)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (first_conflict_step termination
    "kinematic_bands_exist.first_conflict_step(kinematic_bands_exist.CD, kinematic_bands_exist.B, kinematic_bands_exist.T, kinematic_bands_exist.traj, (number_fields.+)(kinematic_bands_exist.k, 1), kinematic_bands_exist.ts, kinematic_bands_exist.MaxN, kinematic_bands_exist.AL)"
    "nil"))
  (first_conflict_step_TCC4-1 nil 3631533677
   ("" (skeep*)
    (("" (assert)
      (("" (name "G" "v(CD, B, T, traj, 1 + k, ts, MaxN, AL)")
        (("" (replaces -1)
          (("" (typepred "G")
            (("" (assert)
              (("" (split +)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (skeep -)
                          (("1" (split 1)
                            (("1" (inst? 1) (("1" (assert) nil nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (inst - "j")
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (ground)
                                          (("2"
                                            (typepred
                                             "first_conflict_aircraft(CD, B, T, traj, k, ts, 0, AL)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst - "p!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil)
                 ("3" (flatten)
                  (("3" (assert)
                    (("3" (skeep)
                      (("3" (inst?)
                        (("3" (assert)
                          (("3"
                            (typepred
                             "first_conflict_aircraft(CD, B, T, traj, k, ts, 0, AL)")
                            (("3" (assert)
                              (("3"
                                (inst - "p")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (flatten)
                  (("4" (assert)
                    (("4" (flatten)
                      (("4" (assert)
                        (("4" (skosimp*)
                          (("4" (assert)
                            (("4" (hide (-7 -8))
                              (("4"
                                (inst - "p!2" "j!1")
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vect3 type-eq-decl nil vectors_3D_def vectors)) nil
   (first_conflict_step termination
    "kinematic_bands_exist.first_conflict_step(kinematic_bands_exist.CD, kinematic_bands_exist.B, kinematic_bands_exist.T, kinematic_bands_exist.traj, (number_fields.+)(kinematic_bands_exist.k, 1), kinematic_bands_exist.ts, kinematic_bands_exist.MaxN, kinematic_bands_exist.AL)"
    "nil")))
 (first_conflict_step_TCC5 0
  (first_conflict_step_TCC5-1 nil 3631966127
   ("" (skeep*)
    (("" (invoke (name "az" "%1") (! 2 1))
      (("" (replaces -1)
        (("" (typepred "az")
          (("" (assert)
            (("" (eval-expr "FALSE")
              (("" (replace -1 :hide? t)
                (("" (expand "first_conf_step?")
                  ((""
                    (name "G" "v(CD, B, T, traj, 1 + k, ts, MaxN, AL)")
                    (("" (replaces -1)
                      (("" (assert)
                        (("" (typepred "G")
                          (("" (expand "first_conf_step?")
                            (("" (flatten)
                              ((""
                                (split +)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (eval-expr "FALSE")
                                      (("1"
                                        (replace -1 :hide? t)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split +)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (case "NOT j = k")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst -7 "j")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst
                                                           -11
                                                           "p")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (flatten)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (eval-expr "FALSE")
                                      (("3"
                                        (replace -1 :hide? t)
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (case "NOT j = k")
                                            (("1"
                                              (inst - "p" "j")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (inst -8 "p")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (flatten)
                                  (("4"
                                    (assert)
                                    (("4"
                                      (eval-expr "FALSE")
                                      (("4"
                                        (replace -1 :hide? t)
                                        (("4"
                                          (flatten)
                                          (("4"
                                            (assert)
                                            (("4"
                                              (skeep)
                                              (("4"
                                                (case "NOT j = k")
                                                (("1"
                                                  (insteep -)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (first_conf_step? const-decl "bool" kinematic_bands_exist nil)
    (FALSE const-decl "bool" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (first_conflict_aircraft def-decl "{j: int |
   (j >= 0 IFF
     (i <= j AND
       j < length(AL) AND
        CD_future_traj(CD, B, T, traj, k * tsn, AL, j) AND
         (FORALL (q: int):
            q >= i AND q < j IMPLIES
             NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q))))
    AND
    (j < 0 IFF
      (FORALL (q: int):
         q >= i AND q < length(AL) IMPLIES
          NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q)))}"
     int_bands nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (CD_future_traj const-decl "bool" int_bands nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (string type-eq-decl nil strings nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Traj type-eq-decl nil int_bands nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (first_conflict_step subtype
    "kinematic_bands_exist.first_conflict_step(kinematic_bands_exist.CD, kinematic_bands_exist.B, kinematic_bands_exist.T, kinematic_bands_exist.traj, (number_fields.+)(kinematic_bands_exist.k, 1), kinematic_bands_exist.ts, kinematic_bands_exist.MaxN, kinematic_bands_exist.AL)"
    "(kinematic_bands_exist.first_conf_step?(kinematic_bands_exist.CD, kinematic_bands_exist.B, kinematic_bands_exist.T, kinematic_bands_exist.traj, kinematic_bands_exist.k, kinematic_bands_exist.ts, kinematic_bands_exist.MaxN, kinematic_bands_exist.AL))")))
 (red_band_exist_TCC1 0
  (red_band_exist_TCC1-1 nil 3633369317 ("" (subtype-tcc) nil nil) nil
   nil
   (red_band_exist subtype
    "kinematic_bands_exist.most_urgent(kinematic_bands_exist.so, kinematic_bands_exist.vo, kinematic_bands_exist.AL)"
    "below[length[Aircraft](AL)]")))
 (red_band_exist_def_TCC1 0
  (red_band_exist_def_TCC1-1 nil 3633369317 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (detector? const-decl "bool" int_bands nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (red_band_exist_def subtype "kinematic_bands_exist.AL"
    "{AL | reals.>(list_props[Aircraft].length(kinematic_bands_exist.AL), 0)}")))
 (red_band_exist_def_TCC2 0
  (red_band_exist_def_TCC2-1 nil 3633369317 ("" (subtype-tcc) nil nil)
   ((* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (detector? const-decl "bool" int_bands nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (red_band_exist_def subtype "kinematic_bands_exist.most_urgent"
    "{most_urgent | booleans.AND(reals.>=(kinematic_bands_exist.most_urgent(kinematic_bands_exist.so, kinematic_bands_exist.vo, kinematic_bands_exist.AL), 0), reals.<(kinematic_bands_exist.most_urgent(kinematic_bands_exist.so, kinematic_bands_exist.vo, kinematic_bands_exist.AL), list_props[Aircraft].length(kinematic_bands_exist.AL)))}")))
 (red_band_exist_def 0
  (red_band_exist_def-1 nil 3631538827
   ("" (skeep)
    (("" (skoletin 1)
      (("" (skoletin 1)
        (("" (lemma "kinematic_bands_def")
          (("" (insteep -)
            (("" (replace -4)
              (("" (assert)
                (("" (replace -2 :dir rl)
                  (("" (assert)
                    (("" (label "bands" -1)
                      (("" (expand "bands_sound?" -1)
                        (("" (split +)
                          (("1" (flatten)
                            (("1" (expand "rbe" -1)
                              (("1"
                                (expand "red_band_exist" -1)
                                (("1"
                                  (split -)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (invoke
                                       (name "az" "%1")
                                       (! -2 1))
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (inst - "az")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide -4)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (typepred "az")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide
                                                           (-3 -4))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "conflict_step")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (inst
                                                                   5
                                                                   "az")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (inst 2 "az")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst + "j")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "in?")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "az")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "az")
                                            (("2"
                                              (assert)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (invoke
                                       (name "az" "%1")
                                       (! -2 1))
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (inst - "az")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide -4)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (typepred "az")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide
                                                           (-3 -4))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "conflict_step")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (inst
                                                                   6
                                                                   "az")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (inst 2 "az")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst + "j")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "in?")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "az")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "az")
                                            (("2"
                                              (assert)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (invoke (name "az" "%1") (! -1 1))
                                    (("3"
                                      (replaces -1)
                                      (("3"
                                        (inst - "az")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (split)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (typepred "az")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "conflict_step")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide
                                                           (2 3 4 6))
                                                          (("1"
                                                            (expand
                                                             "first_conf_step?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (skeep
                                                                 -)
                                                                (("1"
                                                                  (lemma
                                                                   "CD_future_traj_def")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "LOS")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           3
                                                                           "p"
                                                                           _)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite
                                                                         "nnreal_times_nnreal_is_nnreal")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (typepred "az")
                                                  (("2"
                                                    (inst 2 "az")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst + "j")
                                                        (("1"
                                                          (expand
                                                           "in?")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "az")
                                                      (("2"
                                                        (expand
                                                         "first_conf_step?")
                                                        (("2"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "az")
                                          (("2"
                                            (expand "first_conf_step?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (flatten)
                                    (("4"
                                      (invoke
                                       (name "az" "%1")
                                       (! -2 1))
                                      (("4"
                                        (replaces -1)
                                        (("4"
                                          (inst - "az")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide -4)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (typepred "az")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "conflict_step")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (hide
                                                             (1
                                                              2
                                                              3
                                                              4
                                                              5))
                                                            (("1"
                                                              (expand
                                                               "first_conf_step?")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (skeep
                                                                   -)
                                                                  (("1"
                                                                    (lemma
                                                                     "CD_future_traj_def")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "LOS2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             2
                                                                             "p"
                                                                             _)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (rewrite
                                                                           "nnreal_times_nnreal_is_nnreal")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "az")
                                                    (("2"
                                                      (inst 2 "az")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst + "j")
                                                          (("1"
                                                            (expand
                                                             "in?")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred "az")
                                                        (("2"
                                                          (expand
                                                           "first_conf_step?")
                                                          (("2"
                                                            (flatten)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "az")
                                            (("2"
                                              (expand
                                               "first_conf_step?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (skeep -)
                              (("2"
                                (expand "rbe" +)
                                (("2"
                                  (expand "red_band_exist" +)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst -2 "i")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (split -)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst - "i!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "in?")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "conflict_step")
                                                (("2"
                                                  (split -)
                                                  (("1"
                                                    (name
                                                     "fns"
                                                     "first_conflict_step(CD, B, T, traj, 0, ts, MaxN, AL)")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (typepred
                                                         "fns")
                                                        (("1"
                                                          (expand
                                                           "first_conf_step?")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skeep -)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "p"
                                                                 "j")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "CD_future_traj_def")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "LOS")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "j*ts")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "position")
                                                                                (("1"
                                                                                  (expand
                                                                                   "traj_position"
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "traj_velocity"
                                                                                     1)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (skeep -)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (name
                                                           "fns"
                                                           "first_conflict_step(CD2, B2, T2, traj, 0, ts, MaxN, AL)")
                                                          (("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (typepred
                                                               "fns")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "first_conf_step?")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "p"
                                                                     "j")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "CD_future_traj_def")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "LOS2")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 +
                                                                                 "j*ts")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "position")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "traj_position"
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "traj_velocity"
                                                                                         1)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (flatten)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (skeep)
                                                        (("3"
                                                          (name
                                                           "fns"
                                                           "first_nonrepulsive_step(traj, 0, ts, MaxN,
                                                                       nth(AL, most_urgent(so, vo, AL))`s,
                                                                       nth(AL, most_urgent(so, vo, AL))`v, epsH)")
                                                          (("3"
                                                            (replaces
                                                             -1)
                                                            (("3"
                                                              (typepred
                                                               "fns")
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (inst
                                                                   -
                                                                   "j")
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (flatten)
                                                    (("4"
                                                      (skeep -)
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (name
                                                           "fns"
                                                           "first_nonvert_repul_step(traj, 0, ts, MaxN,
                                                                        nth(AL, most_urgent(so, vo, AL))`s,
                                                                        nth(AL, most_urgent(so, vo, AL))`v, epsV)")
                                                          (("4"
                                                            (replaces
                                                             -1)
                                                            (("4"
                                                              (typepred
                                                               "fns")
                                                              (("4"
                                                                (assert)
                                                                (("4"
                                                                  (inst
                                                                   -
                                                                   "j")
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("5"
                                                    (skeep -)
                                                    (("5"
                                                      (typepred
                                                       "first_conflict_step(CD, B, T, traj, 0, ts, MaxN, AL)")
                                                      (("5"
                                                        (assert)
                                                        (("5"
                                                          (expand
                                                           "first_conf_step?")
                                                          (("5"
                                                            (assert)
                                                            (("5"
                                                              (inst
                                                               -
                                                               "p"
                                                               "i")
                                                              (("5"
                                                                (assert)
                                                                (("5"
                                                                  (lemma
                                                                   "CD_future_traj_def")
                                                                  (("5"
                                                                    (inst?)
                                                                    (("5"
                                                                      (inst
                                                                       -
                                                                       "LOS")
                                                                      (("5"
                                                                        (assert)
                                                                        (("5"
                                                                          (inst
                                                                           +
                                                                           "t")
                                                                          (("5"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("6"
                                                    (flatten)
                                                    (("6"
                                                      (assert)
                                                      (("6"
                                                        (skeep -)
                                                        (("6"
                                                          (typepred
                                                           "first_conflict_step(CD2, B2, T2, traj, 0, ts, MaxN, AL)")
                                                          (("6"
                                                            (assert)
                                                            (("6"
                                                              (expand
                                                               "first_conf_step?")
                                                              (("6"
                                                                (inst
                                                                 -
                                                                 "p"
                                                                 "i")
                                                                (("6"
                                                                  (assert)
                                                                  (("6"
                                                                    (lemma
                                                                     "CD_future_traj_def")
                                                                    (("6"
                                                                      (inst?)
                                                                      (("6"
                                                                        (inst
                                                                         -
                                                                         "LOS2")
                                                                        (("6"
                                                                          (assert)
                                                                          (("6"
                                                                            (inst
                                                                             +
                                                                             "t")
                                                                            (("6"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((traj_velocity const-decl "Vect3" int_bands nil)
    (traj_position const-decl "Vect3" int_bands nil)
    (position const-decl "Vect3" int_bands nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (az skolem-const-decl
     "(first_conf_step?(CD2, B2, T2, traj, 0, ts, MaxN, AL))"
     kinematic_bands_exist nil)
    (T2 skolem-const-decl "nnreal" kinematic_bands_exist nil)
    (B2 skolem-const-decl "nnreal" kinematic_bands_exist nil)
    (CD2 skolem-const-decl
     "[[nnreal, nnreal, Vect3, Vect3, Vect3, Vect3] -> bool]"
     kinematic_bands_exist nil)
    (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (CD_future_traj_def formula-decl nil int_bands nil)
    (az skolem-const-decl
     "(first_conf_step?(CD, B, T, traj, 0, ts, MaxN, AL))"
     kinematic_bands_exist nil)
    (T skolem-const-decl "nnreal" kinematic_bands_exist nil)
    (B skolem-const-decl "nnreal" kinematic_bands_exist nil)
    (CD skolem-const-decl
     "[[nnreal, nnreal, Vect3, Vect3, Vect3, Vect3] -> bool]"
     kinematic_bands_exist nil)
    (first_conf_step? const-decl "bool" kinematic_bands_exist nil)
    (first_conflict_step def-decl
     "(first_conf_step?(CD, B, T, traj, k, ts, MaxN, AL))"
     kinematic_bands_exist nil)
    (az skolem-const-decl "{i: int |
   (i >= 0 IFF
     ((0 <= i AND
        i <= MaxN AND
         NOT vert_repul_at(traj, i, ts, nth(AL, most_urgent(so, vo, AL))`s,
                           nth(AL, most_urgent(so, vo, AL))`v, epsV))
       AND
       FORALL (j: nat):
         j < i IMPLIES
          vert_repul_at(traj, j, ts, nth(AL, most_urgent(so, vo, AL))`s,
                        nth(AL, most_urgent(so, vo, AL))`v, epsV)))
    AND
    (i < 0 IFF
      FORALL (j: nat):
        j <= MaxN IMPLIES
         vert_repul_at(traj, j, ts, nth(AL, most_urgent(so, vo, AL))`s,
                       nth(AL, most_urgent(so, vo, AL))`v, epsV))}"
     kinematic_bands_exist nil)
    (epsV skolem-const-decl "Sign" kinematic_bands_exist nil)
    (vert_repul_at const-decl "bool" int_bands nil)
    (first_nonvert_repul_step def-decl "{i: int |
   (i >= 0 IFF
     ((k <= i AND
        i <= MaxN AND NOT vert_repul_at(traj, i, ts, si, vi, eps))
       AND
       (FORALL (j: nat):
          k <= j AND j < i IMPLIES
           vert_repul_at(traj, j, ts, si, vi, eps))))
    AND
    (i < 0 IFF
      (FORALL (j: nat):
         k <= j AND j <= MaxN IMPLIES
          vert_repul_at(traj, j, ts, si, vi, eps)))}" int_bands nil)
    (in? const-decl "bool" int_bands nil)
    (conflict_step const-decl "bool" int_bands nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (az skolem-const-decl "{i: int |
   (i >= 0 IFF
     ((0 <= i AND
        i <= MaxN AND
         NOT repulsive_at(traj, i, ts, nth(AL, most_urgent(so, vo, AL))`s,
                          nth(AL, most_urgent(so, vo, AL))`v, epsH))
       AND
       FORALL (j: nat):
         j < i IMPLIES
          repulsive_at(traj, j, ts, nth(AL, most_urgent(so, vo, AL))`s,
                       nth(AL, most_urgent(so, vo, AL))`v, epsH)))
    AND
    (i < 0 IFF
      FORALL (j: nat):
        j <= MaxN IMPLIES
         repulsive_at(traj, j, ts, nth(AL, most_urgent(so, vo, AL))`s,
                      nth(AL, most_urgent(so, vo, AL))`v, epsH))}"
     kinematic_bands_exist nil)
    (epsH skolem-const-decl "Sign" kinematic_bands_exist nil)
    (vo skolem-const-decl "Vect3" kinematic_bands_exist nil)
    (so skolem-const-decl "Vect3" kinematic_bands_exist nil)
    (most_urgent skolem-const-decl
     "[[Vect3, Vect3, AircraftList] -> int]" kinematic_bands_exist nil)
    (AL skolem-const-decl "AircraftList" kinematic_bands_exist nil)
    (ts skolem-const-decl "posreal" kinematic_bands_exist nil)
    (traj skolem-const-decl "Traj" kinematic_bands_exist nil)
    (MaxN skolem-const-decl "nat" kinematic_bands_exist nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (repulsive_at const-decl "bool" int_bands nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (first_nonrepulsive_step def-decl "{i: int |
   (i >= 0 IFF
     ((k <= i AND i <= MaxN AND NOT repulsive_at(traj, i, ts, si, vi, eps))
       AND
       (FORALL (j: nat):
          k <= j AND j < i IMPLIES
           repulsive_at(traj, j, ts, si, vi, eps))))
    AND
    (i < 0 IFF
      (FORALL (j: nat):
         k <= j AND j <= MaxN IMPLIES
          repulsive_at(traj, j, ts, si, vi, eps)))}" int_bands nil)
    (rbe skolem-const-decl "bool" kinematic_bands_exist nil)
    (bands_sound? const-decl "bool" int_bands nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (kinematic_bands_def formula-decl nil kinematic_bands nil)
    (IntBand type-eq-decl nil int_bands nil)
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (RealBand type-eq-decl nil real_bands nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (proper? const-decl "bool" int_bands nil)
    (kinematic_bands const-decl "(proper?(MaxN))" kinematic_bands nil)
    (red_band_exist const-decl "bool" kinematic_bands_exist nil)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Traj type-eq-decl nil int_bands nil)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (string type-eq-decl nil strings nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (> const-decl "bool" reals nil))
   shostak))
 (first_green?_TCC1 0
  (first_green?_TCC1-1 nil 3633345572 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals) (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (first_green? subtype "kinematic_bands_exist.j" "nat")))
 (first_green_rec_TCC1 0
  (first_green_rec_TCC1-2 "" 3813484689
   ("" (skeep*) (("" (assert) nil nil)) nil) nil shostak
   (first_green_rec subtype "(number_fields.-)(1)"
    "integers.subrange((number_fields.-)(1), kinematic_bands_exist.MaxN)"))
  (first_green_rec_TCC1-1 nil 3631879146
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "k")
        (("" (expand "all_conflict_steps_before")
          (("" (expand "first_green?")
            (("" (skeep -)
              (("" (expand "conflict_step")
                (("" (flatten)
                  (("" (assert)
                    (("" (inst - "i")
                      (("" (assert) (("" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (first_green_rec subtype "(number_fields.-)(1)"
    "integers.subrange((number_fields.-)(1), kinematic_bands_exist.MaxN)")))
 (first_green_rec_TCC2 0
  (first_green_rec_TCC2-2 "" 3813484689
   ("" (skeep*) (("" (assert) nil nil)) nil) nil shostak
   (first_green_rec subtype "(number_fields.-)(1)"
    "integers.subrange((number_fields.-)(1), kinematic_bands_exist.MaxN)"))
  (first_green_rec_TCC2-1 nil 3631881565
   ("" (skeep*)
    (("" (assert)
      (("" (expand "first_green?")
        (("" (typepred "k")
          (("" (expand "all_conflict_steps_before")
            (("" (skeep -)
              (("" (inst-cp - "i")
                (("" (case "i < k")
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (expand "conflict_step")
                          (("1" (flatten) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (hide -2)
                      (("2" (hide -1)
                        (("2" (expand "conflict_step")
                          (("2" (flatten)
                            (("2"
                              (name "D"
                                    "first_los_aircraft(LOS, traj, k, ts, 0, AL)")
                              (("2"
                                (replaces -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "D")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide (-2 -3))
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst 4 "k" "D")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (first_green_rec subtype "(number_fields.-)(1)"
    "integers.subrange((number_fields.-)(1), kinematic_bands_exist.MaxN)")))
 (first_green_rec_TCC3 0
  (first_green_rec_TCC3-2 "" 3813484689
   ("" (skeep*) (("" (assert) nil nil)) nil) nil shostak
   (first_green_rec subtype "(number_fields.-)(1)"
    "integers.subrange((number_fields.-)(1), kinematic_bands_exist.MaxN)"))
  (first_green_rec_TCC3-1 nil 3631881565
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "k")
        (("" (expand "all_conflict_steps_before")
          (("" (expand "first_green?")
            (("" (skeep -)
              (("" (assert)
                (("" (case "i < k")
                  (("1" (inst - "i")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (expand "conflict_step")
                          (("1" (flatten) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1)
                    (("2" (expand "conflict_step")
                      (("2" (flatten)
                        (("2" (inst 6 "k")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (first_green_rec subtype "(number_fields.-)(1)"
    "integers.subrange((number_fields.-)(1), kinematic_bands_exist.MaxN)")))
 (first_green_rec_TCC4 0
  (first_green_rec_TCC4-2 "" 3813484690
   ("" (skeep*) (("" (assert) nil nil)) nil) nil shostak
   (first_green_rec subtype "(number_fields.-)(1)"
    "integers.subrange((number_fields.-)(1), kinematic_bands_exist.MaxN)"))
  (first_green_rec_TCC4-1 nil 3631881565
   ("" (skeep*)
    (("" (assert)
      (("" (expand "first_green?")
        (("" (typepred "k")
          (("" (expand "all_conflict_steps_before")
            (("" (skeep)
              (("" (case "i < k")
                (("1" (assert)
                  (("1" (inst - "i")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (expand "conflict_step")
                          (("1" (flatten) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1)
                  (("2" (expand "conflict_step")
                    (("2" (flatten)
                      (("2" (inst 8 "k")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (first_green_rec subtype "(number_fields.-)(1)"
    "integers.subrange((number_fields.-)(1), kinematic_bands_exist.MaxN)")))
 (first_green_rec_TCC5 0
  (first_green_rec_TCC5-2 "" 3813484690
   ("" (skeep*) (("" (assert) nil nil)) nil) nil shostak
   (first_green_rec subtype "(number_fields.-)(1)"
    "integers.subrange((number_fields.-)(1), kinematic_bands_exist.MaxN)"))
  (first_green_rec_TCC5-1 nil 3631881565
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "k")
        (("" (expand "all_conflict_steps_before")
          (("" (expand "first_green?")
            (("" (label "hyp" -1)
              (("" (hide "hyp")
                (("" (expand "conflict_step")
                  (("" (split -)
                    (("1" (skeep -)
                      (("1" (case "j = k")
                        (("1" (assert)
                          (("1"
                            (typepred
                             "first_los_aircraft(LOS, traj, k, ts, 0, AL)")
                            (("1" (assert)
                              (("1"
                                (inst - "p")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal "hyp")
                          (("2" (inst - "j")
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2" (inst - "p") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (skeep -)
                          (("2" (case "j = k")
                            (("1" (assert) nil nil)
                             ("2" (reveal "hyp")
                              (("2"
                                (inst - "j")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (flatten)
                      (("3" (assert)
                        (("3" (skeep -)
                          (("3" (reveal "hyp")
                            (("3" (inst - "j") (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (assert)
                      (("4" (skeep -)
                        (("4"
                          (typepred
                           "first_conflict_aircraft(CD, B, T, traj, k, ts, 0, AL)")
                          (("4" (assert)
                            (("4" (inst - "p")
                              (("4"
                                (assert)
                                (("4"
                                  (lemma "CD_future_traj_def")
                                  (("4"
                                    (inst?)
                                    (("4"
                                      (inst - "LOS")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (inst + "t")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (first_green_rec subtype "(number_fields.-)(1)"
    "integers.subrange((number_fields.-)(1), kinematic_bands_exist.MaxN)")))
 (first_green_rec_TCC6 0
  (first_green_rec_TCC6-2 "" 3813484690
   ("" (skeep*) (("" (assert) nil nil)) nil) nil shostak
   (first_green_rec subtype "kinematic_bands_exist.k"
    "integers.subrange((number_fields.-)(1), kinematic_bands_exist.MaxN)"))
  (first_green_rec_TCC6-1 nil 3631881565
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "k")
        (("" (expand "all_conflict_steps_before")
          (("" (skeep +)
            (("" (case "j/=k")
              (("1" (inst - "j") (("1" (ground) nil nil)) nil)
               ("2" (flatten)
                (("2" (replace -1)
                  (("2" (assert)
                    (("2" (hide -2)
                      (("2" (split 5)
                        (("1" (skeep)
                          (("1" (assert)
                            (("1"
                              (typepred
                               "first_los_aircraft(LOS, traj, k, ts, 0, AL)")
                              (("1"
                                (assert)
                                (("1"
                                  (inst - "p")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil)
                         ("3" (flatten) (("3" (assert) nil nil)) nil)
                         ("4" (assert)
                          (("4"
                            (name "D"
                                  "first_conflict_aircraft(CD, B, T, traj, k, ts, 0, AL)")
                            (("4" (replace -1)
                              (("4"
                                (typepred "D")
                                (("4"
                                  (assert)
                                  (("4"
                                    (skeep)
                                    (("4"
                                      (inst + "D" _)
                                      (("4"
                                        (lemma "CD_future_traj_def")
                                        (("4"
                                          (inst?)
                                          (("4"
                                            (inst - "LOS")
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (first_green_rec subtype "kinematic_bands_exist.k"
    "integers.subrange((number_fields.-)(1), kinematic_bands_exist.MaxN)")))
 (first_green_rec_TCC7 0
  (first_green_rec_TCC7-1 nil 3638007036 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (first_los_aircraft def-decl "{j: int |
   (j >= 0 IFF
     (i <= j AND
       j < length(AL) AND
        LOS(traj(k * ts)`1, traj(k * ts)`2,
            nth(AL, j)`s + (k * ts) * nth(AL, j)`v, nth(AL, j)`v)
         AND
         (FORALL (q: int):
            q >= i AND q < j IMPLIES
             NOT LOS(traj(k * ts)`1, traj(k * ts)`2,
                     nth(AL, q)`s + (k * ts) * nth(AL, q)`v,
                     nth(AL, q)`v))))
    AND
    (j < 0 IFF
      (FORALL (q: int):
         q >= i AND q < length(AL) IMPLIES
          NOT LOS(traj(k * ts)`1, traj(k * ts)`2,
                  nth(AL, q)`s + (k * ts) * nth(AL, q)`v, nth(AL, q)`v)))}"
     int_bands nil)
    (- const-decl "Vector" vectors_3D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (linvel const-decl "Vect3" int_bands nil)
    (/= const-decl "boolean" notequal nil)
    (det const-decl "real" det_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (repulsive_criteria const-decl "bool" repulsive ACCoRD)
    (repulsive_at const-decl "bool" int_bands nil)
    (vertical_repulsive_crit const-decl "bool" repulsive_vertical_it
     ACCoRD)
    (vert_repul_at const-decl "bool" int_bands nil)
    (aircraft_at const-decl "Aircraft" int_bands nil)
    (CD_future_traj const-decl "bool" int_bands nil)
    (first_conflict_aircraft def-decl "{j: int |
   (j >= 0 IFF
     (i <= j AND
       j < length(AL) AND
        CD_future_traj(CD, B, T, traj, k * tsn, AL, j) AND
         (FORALL (q: int):
            q >= i AND q < j IMPLIES
             NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q))))
    AND
    (j < 0 IFF
      (FORALL (q: int):
         q >= i AND q < length(AL) IMPLIES
          NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q)))}"
     int_bands nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (first_green_rec termination
    "kinematic_bands_exist.first_green_rec(kinematic_bands_exist.LOS, kinematic_bands_exist.CD, kinematic_bands_exist.LOS2, kinematic_bands_exist.CD2, kinematic_bands_exist.useLOS2, kinematic_bands_exist.B, kinematic_bands_exist.T, kinematic_bands_exist.B2, kinematic_bands_exist.T2, kinematic_bands_exist.so, kinematic_bands_exist.vo, kinematic_bands_exist.traj, kinematic_bands_exist.MaxN, kinematic_bands_exist.ts, kinematic_bands_exist.AL, kinematic_bands_exist.most_urgent, kinematic_bands_exist.epsH, kinematic_bands_exist.epsV, kinematic_bands_exist.UseHCrit, kinematic_bands_exist.UseVCrit, (number_fields.+)(kinematic_bands_exist.k, 1))"
    "nil")))
 (first_green_types 0
  (first_green_types-1 nil 3638015576
   ("" (skeep*)
    (("" (skoletin 1)
      ((""
        (case "FORALL (k:nat): k<=MaxN+1 AND all_conflict_steps_before(LOS, CD, LOS2, CD2, useLOS2, B, T, B2, T2,
                                                                                            so, vo, traj, MaxN, ts, AL, most_urgent,
                                                                                            epsH, epsV, UseHCrit, UseVCrit)
                                                                                           (MaxN+1-k) IMPLIES first_green?(LOS, CD, LOS2, CD2, useLOS2, B, T, B2, T2, so, vo, traj,
                                                                               MaxN, ts, AL, most_urgent, epsH, epsV, UseHCrit,
                                                                               UseVCrit, MaxN+1-k)(first_green_rec(LOS, CD, LOS2, CD2, useLOS2, B, T, B2, T2, so, vo,
                                                                                   traj, MaxN, ts, AL, most_urgent, epsH, epsV,
                                                                                   UseHCrit, UseVCrit, MaxN+1-k))")
        (("1" (inst - "MaxN+1")
          (("1" (assert)
            (("1" (split)
              (("1" (expand "first_green") (("1" (assert) nil nil))
                nil)
               ("2" (hide (-1 -2 2))
                (("2" (expand "all_conflict_steps_before")
                  (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide (-1 2))
          (("2" (induct "k")
            (("1" (flatten)
              (("1" (assert)
                (("1" (expand "first_green_rec")
                  (("1" (expand "first_green?")
                    (("1" (skeep)
                      (("1" (expand "all_conflict_steps_before")
                        (("1" (inst - "i")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (expand "conflict_step")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace 6)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem 1 "k")
              (("2" (flatten)
                (("2" (assert)
                  (("2" (label "hyp2" -1)
                    (("2" (hide "hyp2")
                      (("2" (expand "first_green_rec" + :assert? none)
                        (("2" (assert)
                          (("2" (split +)
                            (("1" (flatten)
                              (("1"
                                (expand "first_green?")
                                (("1"
                                  (skeep -)
                                  (("1"
                                    (case "i<MaxN-k")
                                    (("1"
                                      (expand
                                       "all_conflict_steps_before")
                                      (("1"
                                        (inst - "i")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "conflict_step")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (replace 6)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "conflict_step")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide (3 4 5 6 7 8))
                                          (("2"
                                            (invoke
                                             (name "az" "%1")
                                             (! -3 1))
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (typepred "az")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide (-2 -3))
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst
                                                         +
                                                         "MaxN-k"
                                                         "az")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide -5)
                                      (("1"
                                        (expand "first_green?")
                                        (("1"
                                          (skeep -)
                                          (("1"
                                            (case "i<MaxN-k")
                                            (("1"
                                              (expand
                                               "all_conflict_steps_before")
                                              (("1"
                                                (inst - "i")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "conflict_step")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (replace 6)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "conflict_step")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (hide (2 4 5 6 7 8))
                                                  (("2"
                                                    (invoke
                                                     (name "az" "%1")
                                                     (! -4 1))
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (typepred "az")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide
                                                             (-2 -3))
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "MaxN-k"
                                                                 "az")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (hide (2 3))
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (expand "first_green?")
                                            (("1"
                                              (skeep -)
                                              (("1"
                                                (case "i<MaxN-k")
                                                (("1"
                                                  (expand
                                                   "all_conflict_steps_before")
                                                  (("1"
                                                    (inst - "i")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "conflict_step")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (replace
                                                               7)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "conflict_step")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide
                                                       (3 4 6 7 8))
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           +
                                                           "MaxN-k")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (hide (2 3 4))
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "first_green?")
                                                (("1"
                                                  (skeep -)
                                                  (("1"
                                                    (case "i<MaxN-k")
                                                    (("1"
                                                      (expand
                                                       "all_conflict_steps_before")
                                                      (("1"
                                                        (inst - "i")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "conflict_step")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (replace
                                                                   7)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "conflict_step")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide
                                                           (3 4 5 7 8))
                                                          (("2"
                                                            (inst
                                                             +
                                                             "MaxN-k")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (expand
                                                   "first_green?")
                                                  (("1"
                                                    (expand
                                                     "conflict_step")
                                                    (("1"
                                                      (split -)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (typepred
                                                           "j")
                                                          (("1"
                                                            (expand
                                                             "all_conflict_steps_before")
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "j")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "p")
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "NOT j = MaxN-k")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (invoke
                                                                         (name
                                                                          "bz"
                                                                          "%1")
                                                                         (!
                                                                          7
                                                                          1))
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (typepred
                                                                             "bz")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "p")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skeep -)
                                                            (("2"
                                                              (expand
                                                               "all_conflict_steps_before")
                                                              (("2"
                                                                (inst
                                                                 -5
                                                                 "j")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split
                                                                     -)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -2
                                                                           "p")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "NOT j = MaxN-k")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (invoke
                                                                           (name
                                                                            "bz"
                                                                            "%1")
                                                                           (!
                                                                            6
                                                                            1))
                                                                          (("2"
                                                                            (replaces
                                                                             -1)
                                                                            (("2"
                                                                              (typepred
                                                                               "bz")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "p")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (flatten)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (skeep -)
                                                            (("3"
                                                              (case
                                                               "j < MaxN-k")
                                                              (("1"
                                                                (expand
                                                                 "all_conflict_steps_before")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -4
                                                                     "j")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (flatten)
                                                        (("4"
                                                          (skeep -)
                                                          (("4"
                                                            (assert)
                                                            (("4"
                                                              (case
                                                               "j < MaxN-k")
                                                              (("1"
                                                                (expand
                                                                 "all_conflict_steps_before")
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "j")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("5"
                                                        (assert)
                                                        (("5"
                                                          (skeep -)
                                                          (("5"
                                                            (invoke
                                                             (name
                                                              "bz"
                                                              "%1")
                                                             (! 1 1))
                                                            (("5"
                                                              (replaces
                                                               -1)
                                                              (("5"
                                                                (typepred
                                                                 "bz")
                                                                (("5"
                                                                  (assert)
                                                                  (("5"
                                                                    (hide
                                                                     (-1
                                                                      -2
                                                                      -4))
                                                                    (("5"
                                                                      (inst
                                                                       -
                                                                       "p")
                                                                      (("5"
                                                                        (assert)
                                                                        (("5"
                                                                          (lemma
                                                                           "CD_future_traj_def")
                                                                          (("5"
                                                                            (inst?)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "LOS")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "t")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "nnreal_times_nnreal_is_nnreal")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "MaxN-k"
                                                                                 "ts")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("6"
                                                        (flatten)
                                                        (("6"
                                                          (assert)
                                                          (("6"
                                                            (invoke
                                                             (name
                                                              "bz"
                                                              "%1")
                                                             (! 2 1))
                                                            (("6"
                                                              (replaces
                                                               -1)
                                                              (("6"
                                                                (typepred
                                                                 "bz")
                                                                (("6"
                                                                  (assert)
                                                                  (("6"
                                                                    (hide
                                                                     (-1
                                                                      -2
                                                                      -4))
                                                                    (("6"
                                                                      (skeep
                                                                       -)
                                                                      (("6"
                                                                        (inst
                                                                         -
                                                                         "p")
                                                                        (("6"
                                                                          (assert)
                                                                          (("6"
                                                                            (lemma
                                                                             "CD_future_traj_def")
                                                                            (("6"
                                                                              (inst?)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "LOS2")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "t")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "nnreal_times_nnreal_is_nnreal")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "MaxN-k"
                                                                                   "ts")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (reveal "hyp2")
                                                  (("2"
                                                    (split -)
                                                    (("1"
                                                      (invoke
                                                       (name "ff" "%1")
                                                       (! -1 1))
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (expand
                                                           "first_green?")
                                                          (("1"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   (-3
                                                                    -4))
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (flatten)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "all_conflict_steps_before")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (case
                                                           "NOT j = MaxN-k")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "j")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide -4)
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   +)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (invoke
                                                                         (name
                                                                          "bz"
                                                                          "%1")
                                                                         (!
                                                                          6
                                                                          1))
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (typepred
                                                                               "bz")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "p")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (invoke
                                                                             (name
                                                                              "bz"
                                                                              "%1")
                                                                             (!
                                                                              5
                                                                              1))
                                                                            (("2"
                                                                              (replaces
                                                                               -1)
                                                                              (("2"
                                                                                (typepred
                                                                                 "bz")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "p")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (flatten)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (flatten)
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("5"
                                                                    (flatten)
                                                                    (("5"
                                                                      (assert)
                                                                      (("5"
                                                                        (split
                                                                         3)
                                                                        (("1"
                                                                          (invoke
                                                                           (name
                                                                            "bz"
                                                                            "%1")
                                                                           (!
                                                                            -1
                                                                            1))
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (typepred
                                                                               "bz")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   (-2
                                                                                    -3))
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "CD_future_traj_def")
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "LOS")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "bz"
                                                                                                   _)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "nnreal_times_nnreal_is_nnreal")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "MaxN-k"
                                                                                               "ts")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (invoke
                                                                                 (name
                                                                                  "bz"
                                                                                  "%1")
                                                                                 (!
                                                                                  -2
                                                                                  1))
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "bz")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         (-2
                                                                                          -3))
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "CD_future_traj_def")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "LOS2")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "bz"
                                                                                                     _)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "nnreal_times_nnreal_is_nnreal")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "MaxN-k"
                                                                                                   "ts")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp*) (("3" (assert) nil nil)) nil)
             ("4" (skosimp*) (("4" (assert) nil nil)) nil)
             ("5" (skosimp*) (("5" (assert) nil nil)) nil)
             ("6" (skosimp*) (("6" (assert) nil nil)) nil)
             ("7" (skosimp*) (("7" (assert) nil nil)) nil)
             ("8" (skosimp*) (("8" (assert) nil nil)) nil))
            nil))
          nil)
         ("3" (skosimp*) (("3" (assert) nil nil)) nil)
         ("4" (skosimp*) (("4" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (CD_future_traj_def formula-decl nil int_bands nil)
    (CD_future_traj const-decl "bool" int_bands nil)
    (first_conflict_aircraft def-decl "{j: int |
   (j >= 0 IFF
     (i <= j AND
       j < length(AL) AND
        CD_future_traj(CD, B, T, traj, k * tsn, AL, j) AND
         (FORALL (q: int):
            q >= i AND q < j IMPLIES
             NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q))))
    AND
    (j < 0 IFF
      (FORALL (q: int):
         q >= i AND q < length(AL) IMPLIES
          NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q)))}"
     int_bands nil)
    (i skolem-const-decl "nat" kinematic_bands_exist nil)
    (k skolem-const-decl "nat" kinematic_bands_exist nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (* const-decl "Vector" vectors_3D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (first_los_aircraft def-decl "{j: int |
   (j >= 0 IFF
     (i <= j AND
       j < length(AL) AND
        LOS(traj(k * ts)`1, traj(k * ts)`2,
            nth(AL, j)`s + (k * ts) * nth(AL, j)`v, nth(AL, j)`v)
         AND
         (FORALL (q: int):
            q >= i AND q < j IMPLIES
             NOT LOS(traj(k * ts)`1, traj(k * ts)`2,
                     nth(AL, q)`s + (k * ts) * nth(AL, q)`v,
                     nth(AL, q)`v))))
    AND
    (j < 0 IFF
      (FORALL (q: int):
         q >= i AND q < length(AL) IMPLIES
          NOT LOS(traj(k * ts)`1, traj(k * ts)`2,
                  nth(AL, q)`s + (k * ts) * nth(AL, q)`v, nth(AL, q)`v)))}"
     int_bands nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (conflict_step const-decl "bool" int_bands nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (LOS skolem-const-decl "[[Vect3, Vect3, Vect3, Vect3] -> bool]"
     kinematic_bands_exist nil)
    (CD skolem-const-decl
     "[[nnreal, nnreal, Vect3, Vect3, Vect3, Vect3] -> bool]"
     kinematic_bands_exist nil)
    (LOS2 skolem-const-decl "[[Vect3, Vect3, Vect3, Vect3] -> bool]"
     kinematic_bands_exist nil)
    (CD2 skolem-const-decl
     "[[nnreal, nnreal, Vect3, Vect3, Vect3, Vect3] -> bool]"
     kinematic_bands_exist nil)
    (useLOS2 skolem-const-decl "bool" kinematic_bands_exist nil)
    (B skolem-const-decl "nnreal" kinematic_bands_exist nil)
    (T skolem-const-decl "nnreal" kinematic_bands_exist nil)
    (B2 skolem-const-decl "nnreal" kinematic_bands_exist nil)
    (T2 skolem-const-decl "nnreal" kinematic_bands_exist nil)
    (traj skolem-const-decl "Traj" kinematic_bands_exist nil)
    (ts skolem-const-decl "posreal" kinematic_bands_exist nil)
    (epsH skolem-const-decl "Sign" kinematic_bands_exist nil)
    (epsV skolem-const-decl "Sign" kinematic_bands_exist nil)
    (UseHCrit skolem-const-decl "bool" kinematic_bands_exist nil)
    (UseVCrit skolem-const-decl "bool" kinematic_bands_exist nil)
    (vo skolem-const-decl "Vect3" kinematic_bands_exist nil)
    (so skolem-const-decl "Vect3" kinematic_bands_exist nil)
    (most_urgent skolem-const-decl
     "[[Vect3, Vect3, AircraftList] -> int]" kinematic_bands_exist nil)
    (AL skolem-const-decl "AircraftList" kinematic_bands_exist nil)
    (MaxN skolem-const-decl "nat" kinematic_bands_exist nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (first_green_rec def-decl "subrange(-1, MaxN)"
     kinematic_bands_exist nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (all_conflict_steps_before const-decl "bool" kinematic_bands_exist
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (first_green? const-decl "bool" kinematic_bands_exist nil)
    (first_green const-decl "subrange(-1, MaxN)" kinematic_bands_exist
     nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil) (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (string type-eq-decl nil strings nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Traj type-eq-decl nil int_bands nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (first_green_def 0
  (first_green_def-2 nil 3638015592
   ("" (skeep*)
    (("" (skoletin 1)
      (("" (skoletin 1)
        (("" (split +)
          (("1" (flatten)
            (("1" (lemma "first_green_types")
              (("1" (inst?)
                (("1" (assert)
                  (("1" (replace -5 :dir rl)
                    (("1" (expand "first_green?")
                      (("1" (replace -4 :dir rl)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (lemma "kinematic_bands_def")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -4 :dir rl)
                                    (("1"
                                      (expand "bands_sound?")
                                      (("1"
                                        (inst - "gbe")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (split -)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst + "i")
                                                  (("1"
                                                    (expand "in?")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (lemma "first_green_types")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (replace -5 :dir rl)
                    (("2" (replace -4 :dir rl)
                      (("2" (assert)
                        (("2" (expand "first_green?")
                          (("2" (skeep -)
                            (("2" (inst + "i")
                              (("2"
                                (assert)
                                (("2"
                                  (lemma "kinematic_bands_def")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -4 :dir rl)
                                        (("2"
                                          (expand "bands_sound?")
                                          (("2"
                                            (inst - "i")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (hide -2)
                                                (("2"
                                                  (split -)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (inst + "j")
                                                    (("2"
                                                      (expand "in?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in? const-decl "bool" int_bands nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bands_sound? const-decl "bool" int_bands nil)
    (kinematic_bands_def formula-decl nil kinematic_bands nil)
    (first_green? const-decl "bool" kinematic_bands_exist nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (first_green_types formula-decl nil kinematic_bands_exist nil)
    (IntBand type-eq-decl nil int_bands nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (RealBand type-eq-decl nil real_bands nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (proper? const-decl "bool" int_bands nil)
    (kinematic_bands const-decl "(proper?(MaxN))" kinematic_bands nil)
    (first_green const-decl "subrange(-1, MaxN)" kinematic_bands_exist
     nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil) (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (string type-eq-decl nil strings nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Traj type-eq-decl nil int_bands nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (first_green_def-1 nil 3631879395
   ("" (skeep*)
    (("" (skoletin 1)
      (("" (skoletin 1)
        (("" (invoke (case "NOT %1") (! 1 1))
          (("1" (hide 2)
            (("1"
              (case "FORALL (k:nat): k<=MaxN+1 AND all_conflict_steps_before(LOS, CD, LOS2, CD2, useLOS2, B, T, B2, T2,
                                so, vo, traj, MaxN, ts, AL, most_urgent,
                                epsH, epsV, UseHCrit, UseVCrit)
                               (MaxN+1-k) IMPLIES first_green?(LOS, CD, LOS2, CD2, useLOS2, B, T, B2, T2, so, vo, traj,
                   MaxN, ts, AL, most_urgent, epsH, epsV, UseHCrit,
                   UseVCrit, MaxN+1-k)(first_green_rec(LOS, CD, LOS2, CD2, useLOS2, B, T, B2, T2, so, vo,
                       traj, MaxN, ts, AL, most_urgent, epsH, epsV,
                       UseHCrit, UseVCrit, MaxN+1-k))")
              (("1" (inst - "MaxN+1")
                (("1" (assert)
                  (("1" (split)
                    (("1" (expand "first_green")
                      (("1" (assert) nil nil)) nil)
                     ("2" (hide (-1 -2 2))
                      (("2" (expand "all_conflict_steps_before")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide (-1 -2 2))
                (("2" (induct "k")
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (expand "first_green_rec")
                        (("1" (expand "first_green?")
                          (("1" (skeep)
                            (("1" (expand "all_conflict_steps_before")
                              (("1"
                                (inst - "i")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "conflict_step")
                                      (("1" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skolem 1 "k")
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (split -)
                          (("1"
                            (expand "first_green_rec" + :assert? none)
                            (("1" (assert)
                              (("1"
                                (split +)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "first_green?" +)
                                    (("1"
                                      (skeep -)
                                      (("1"
                                        (expand "conflict_step")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide (2 3 4 5 6))
                                            (("1"
                                              (invoke
                                               (name "az" "%1")
                                               (! -3 1))
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (typepred "az")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide (-2 -3))
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst
                                                           +
                                                           "MaxN-k"
                                                           "az")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (postpone) nil nil) ("4" (postpone) nil nil)
                   ("5" (postpone) nil nil) ("6" (postpone) nil nil)
                   ("7" (postpone) nil nil) ("8" (postpone) nil nil))
                  nil))
                nil)
               ("3" (postpone) nil nil) ("4" (postpone) nil nil))
              nil))
            nil)
           ("2" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((Vect3 type-eq-decl nil vectors_3D_def vectors)
    (detector? const-decl "bool" int_bands nil)
    (Traj type-eq-decl nil int_bands nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (kinematic_bands const-decl "(proper?(MaxN))" kinematic_bands nil)
    (proper? const-decl "bool" int_bands nil)
    (in? const-decl "bool" real_bands nil)
    (RealBand type-eq-decl nil real_bands nil)
    (IntBand type-eq-decl nil int_bands nil)
    (kinematic_bands_def formula-decl nil kinematic_bands nil)
    (bands_sound? const-decl "bool" int_bands nil)
    (in? const-decl "bool" int_bands nil))
   shostak)))

