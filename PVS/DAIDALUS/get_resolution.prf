(get_resolution
 (res_it_TCC1 0
  (res_it_TCC1-1 nil 3717358097 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (res_it subtype "get_resolution.bands"
    "(list_adt[RealBand].cons?)")))
 (res_it_TCC2 0
  (res_it_TCC2-1 nil 3717358097 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (res_it termination
    "get_resolution.res_it(get_resolution.lower, get_resolution.upper)((get_resolution.lgreen, get_resolution.retval`2), list_adt[RealBand].cdr(get_resolution.bands), get_resolution.curr)"
    "nil")))
 (res_it_TCC3 0
  (res_it_TCC3-1 nil 3717358097 ("" (subtype-tcc) nil nil) nil nil
   (res_it subtype "get_resolution.bands"
    "(list_adt[RealBand].cons?)")))
 (res_pair_TCC1 0
  (res_pair_TCC1-1 nil 3717358097
   ("" (skeep*)
    (("" (assert)
      (("" (hide-all-but (1 3)) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (res_pair subtype
    "(number_fields.-)(list_props[RealBand].length(get_resolution.bands), 1)"
    "below[length[RealBand](bands)]"))))

