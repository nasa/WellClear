(alt_bands
 (conflict_free_traj_step_TCC1 0
  (conflict_free_traj_step_TCC1-1 nil 3644254181
   ("" (subtype-tcc) nil nil) nil nil
   (conflict_free_traj_step subtype "alt_bands.i" "nat")))
 (conflict_free_traj_step_TCC2 0
  (conflict_free_traj_step_TCC2-1 nil 3644254181
   ("" (subtype-tcc) nil nil) nil nil
   (conflict_free_traj_step subtype "alt_bands.i" "nat")))
 (conflict_free_traj_step_TCC3 0
  (conflict_free_traj_step_TCC3-1 nil 3661105070
   ("" (skeep*)
    (("" (expand "min")
      (("" (lift-if 1)
        (("" (split) (("1" (assert) nil nil) ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (conflict_free_traj_step subtype
    "real_defs.min(alt_bands.T, alt_bands.timeseq(alt_bands.j)`2)"
    "nnreal")))
 (conflict_free_traj_step_TCC4 0
  (conflict_free_traj_step_TCC4-1 nil 3661105070
   ("" (skeep*)
    (("" (expand "min")
      (("" (lift-if)
        (("" (split) (("1" (assert) nil nil) ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (conflict_free_traj_step subtype
    "real_defs.min(alt_bands.T2, alt_bands.timeseq(alt_bands.j)`2)"
    "nnreal")))
 (conflict_free_traj_step_TCC5 0
  (conflict_free_traj_step_TCC5-1 nil 3661192908
   ("" (skeep*)
    (("" (mult-by 3 "timestep") (("" (assert) nil nil)) nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (TimeSeq type-eq-decl nil alt_bands nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (subrange type-eq-decl nil integers nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil (conflict_free_traj_step subtype "alt_bands.i" "nat")))
 (conflict_free_traj_step_TCC6 0
  (conflict_free_traj_step_TCC6-1 nil 3661192908
   ("" (skeep*)
    (("" (mult-by 4 "timestep") (("" (assert) nil nil)) nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (TimeSeq type-eq-decl nil alt_bands nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (subrange type-eq-decl nil integers nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil (conflict_free_traj_step subtype "alt_bands.i" "nat")))
 (alt_bands_generic_TCC1 0
  (alt_bands_generic_TCC1-1 nil 3644254181
   ("" (skeep*)
    (("" (case "(MaxAlt-MinAlt)/AltStep>=0")
      (("1" (assert) nil nil) ("2" (cross-mult 1) nil nil)) nil))
    nil)
   ((nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (alt_bands_generic subtype
    "(number_fields.+)(floor_ceil.floor(number_fields./(((number_fields.-)(alt_bands.MaxAlt, alt_bands.MinAlt)), alt_bands.AltStep)), 1)"
    "nat")))
 (alt_bands_generic_TCC2 0
  (alt_bands_generic_TCC2-1 nil 3658840474 ("" (subtype-tcc) nil nil)
   ((nat_bands const-decl "(Bands?(maxi, 0, maxi, IP, -1))" int_bands
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (alt_bands_generic subtype
    "int_bands.nat_bands((number_fields.+)(floor_ceil.floor(number_fields./(((number_fields.-)(alt_bands.MaxAlt, alt_bands.MinAlt)), alt_bands.AltStep)), 1), alt_bands.conflict_free_traj_step(alt_bands.LOS, alt_bands.CD, alt_bands.LOS2, alt_bands.CD2, alt_bands.UseLOS2, alt_bands.B, alt_bands.T, alt_bands.B2, alt_bands.T2, alt_bands.so, alt_bands.vo, alt_bands.AL, alt_bands.trajseq, alt_bands.timeseq, alt_bands.timestep))"
    "(int_bands.Bands?((number_fields.+)(floor_ceil.floor(number_fields./(((number_fields.-)(alt_bands.MaxAlt, alt_bands.MinAlt)), alt_bands.AltStep)), 1), 0, (number_fields.+)(floor_ceil.floor(number_fields./(((number_fields.-)(alt_bands.MaxAlt, alt_bands.MinAlt)), alt_bands.AltStep)), 1), alt_bands.conflict_free_traj_step(alt_bands.LOS, alt_bands.CD, alt_bands.LOS2, alt_bands.CD2, alt_bands.UseLOS2, alt_bands.B, alt_bands.T, alt_bands.B2, alt_bands.T2, alt_bands.so, alt_bands.vo, alt_bands.AL, alt_bands.trajseq, alt_bands.timeseq, alt_bands.timestep), (number_fields.-)(1)))")))
 (instant_alt_bands_TCC1 0
  (instant_alt_bands_TCC1-1 nil 3658844843 ("" (subtype-tcc) nil nil)
   nil nil
   (instant_alt_bands subtype "alt_bands.MaxAlt"
    "{MaxAlt | reals.<=(alt_bands.MinAlt, alt_bands.MaxAlt)}")))
 (instant_alt_bands_TCC2 0
  (instant_alt_bands_TCC2-1 nil 3661105070 ("" (subtype-tcc) nil nil)
   ((instant_alt_times const-decl "[real, real, real]" alt_bands nil))
   nil
   (instant_alt_bands subtype "alt_bands.instant_alt_times"
    "TimeSeq")))
 (instant_alt_bands_def 0
  (instant_alt_bands_def-1 nil 3644254209
   ("" (skeep*)
    (("" (skoletin 1)
      (("" (skeep)
        (("" (skoletin 1)
          ((""
            (name "newso"
                  "LAMBDA (t: nnreal): (so + t * vo) WITH [z := testalt]")
            (("" (replace -1)
              (("" (name "newvo" "(vo WITH [z := 0])")
                (("" (replace -1)
                  (("" (assert)
                    (("" (flatten)
                      (("" (skeep -6)
                        (("" (typepred "i")
                          (("" (expand "instant_alt_bands")
                            ((""
                              (name "abg"
                                    "alt_bands_generic(LOS, CD, LOS2, CD2, UseLOS2, B, T, B2, T2,
                                                                                             so, vo, AL, MinAlt,MaxAlt, AltStep,
                                                                                             instant_alt_traj(so, vo, MinAlt,AltStep),
                                                                                             instant_alt_times, 1)")
                              ((""
                                (replaces -1)
                                ((""
                                  (lemma "scal_intband_def")
                                  ((""
                                    (inst?)
                                    ((""
                                      (inst - "j")
                                      ((""
                                        (assert)
                                        ((""
                                          (flatten)
                                          ((""
                                            (hide -2)
                                            ((""
                                              (split -)
                                              (("1"
                                                (case
                                                 "NOT EXISTS (i: below(length( abg))):
                                                                                         in?(nth(abg, i),  j)")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst + "i!1")
                                                    (("1"
                                                      (lemma
                                                       "scal_intband_def2")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "scalrb")
                                                              (("1"
                                                                (expand
                                                                 "in?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (split
                                                                     +)
                                                                    (("1"
                                                                      (div-by
                                                                       -1
                                                                       "AltStep")
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (div-by
                                                                       -2
                                                                       "AltStep")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -2)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (typepred "abg")
                                                      (("2"
                                                        (expand
                                                         "Bands?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "j")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split
                                                                 -)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (expand
                                                                         "conflict_free_traj_step")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (hide
                                                                                     (1
                                                                                      2))
                                                                                    (("1"
                                                                                      (split
                                                                                       -)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (invoke
                                                                                             (name
                                                                                              "az"
                                                                                              "%1")
                                                                                             (!
                                                                                              1
                                                                                              1))
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "az")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     (-1
                                                                                                      -2
                                                                                                      -4))
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "air")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "CD_future_traj_def")
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       +
                                                                                                                       "t")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           +)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "instant_alt_times"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "max"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "instant_alt_traj")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "traj_position")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "instant_alt_times")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "max")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "traj_velocity")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "position")
                                                                                                                                      (("2"
                                                                                                                                        (lift-if)
                                                                                                                                        (("2"
                                                                                                                                          (split
                                                                                                                                           +)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "newso"
                                                                                                                                                 -4)
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "NOT t = 0")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "newvo"
                                                                                                                                                 -3)
                                                                                                                                                (("2"
                                                                                                                                                  (case
                                                                                                                                                   "newso(t) = (so WITH [z := MinAlt+j * AltStep] + t * (vo WITH [z := 0]))")
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1
                                                                                                                                                     :dir
                                                                                                                                                     rl)
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "newso")
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "testalt")
                                                                                                                                                        (("2"
                                                                                                                                                          (decompose-equality)
                                                                                                                                                          (("1"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("3"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (hide
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("2"
                                                                                                (invoke
                                                                                                 (name
                                                                                                  "az"
                                                                                                  "%1")
                                                                                                 (!
                                                                                                  1
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "az")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         (-1
                                                                                                          -2
                                                                                                          -4))
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "air")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "CD_future_traj_def")
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         +
                                                                                                                         "t")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             +)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "instant_alt_times"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "max"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (expand
                                                                                                                               "instant_alt_traj")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "traj_position")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "instant_alt_times")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "max")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "traj_velocity")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "position")
                                                                                                                                            (("2"
                                                                                                                                              (lift-if)
                                                                                                                                              (("2"
                                                                                                                                                (split
                                                                                                                                                 +)
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "newso"
                                                                                                                                                       -4)
                                                                                                                                                      (("1"
                                                                                                                                                        (case
                                                                                                                                                         "NOT t = 0")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "newvo"
                                                                                                                                                       -3)
                                                                                                                                                      (("2"
                                                                                                                                                        (case
                                                                                                                                                         "newso(t) = (so WITH [z := MinAlt+j * AltStep] + t * (vo WITH [z := 0]))")
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1
                                                                                                                                                           :dir
                                                                                                                                                           rl)
                                                                                                                                                          (("1"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "newso")
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "testalt")
                                                                                                                                                              (("2"
                                                                                                                                                                (decompose-equality)
                                                                                                                                                                (("1"
                                                                                                                                                                  (grind)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (grind)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("3"
                                                                                                                                                                  (grind)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         +
                                                                         "i!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "in?")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (copy
                                                                   -8)
                                                                  (("2"
                                                                    (expand
                                                                     "testalt"
                                                                     -1)
                                                                    (("2"
                                                                      (case
                                                                       "j<=(MaxAlt-MinAlt)/AltStep")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (cross-mult
                                                                         1)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst + "i")
                                                (("2"
                                                  (lemma
                                                   "scal_intband_def2")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (inst - "i")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace
                                                           -10
                                                           -8)
                                                          (("2"
                                                            (copy -8)
                                                            (("2"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("2"
                                                                (expand
                                                                 "testalt")
                                                                (("2"
                                                                  (rewrite
                                                                   "add_realband_def"
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "scal_intband_def2")
                                                                    (("2"
                                                                      (expand
                                                                       "scalrb")
                                                                      (("2"
                                                                        (expand
                                                                         "in?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (split
                                                                             +)
                                                                            (("1"
                                                                              (div-by
                                                                               -1
                                                                               "AltStep")
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (div-by
                                                                               -2
                                                                               "AltStep")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((times_div_cancel2 formula-decl nil extra_real_props nil)
    (add_realband_def formula-decl nil real_bands nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (in? const-decl "bool" int_bands nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (testalt skolem-const-decl "nnreal" alt_bands nil)
    (newvo skolem-const-decl "Vect3" alt_bands nil)
    (add_zero_right formula-decl nil vectors_3D vectors)
    (scal_0 formula-decl nil vectors_3D vectors)
    (newso skolem-const-decl "[nnreal -> Vector]" alt_bands nil)
    (position const-decl "Vect3" int_bands nil)
    (traj_velocity const-decl "Vect3" int_bands nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (traj_position const-decl "Vect3" int_bands nil)
    (CD_future_traj_def formula-decl nil int_bands nil)
    (CD_future_traj const-decl "bool" int_bands nil)
    (first_conflict_aircraft def-decl "{j: int |
   (j >= 0 IFF
     (i <= j AND
       j < length(AL) AND
        CD_future_traj(CD, B, T, traj, k * tsn, AL, j) AND
         (FORALL (q: int):
            q >= i AND q < j IMPLIES
             NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q))))
    AND
    (j < 0 IFF
      (FORALL (q: int):
         q >= i AND q < length(AL) IMPLIES
          NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q)))}"
     int_bands nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (scalrb const-decl "RealBand" real_bands nil)
    (scal_intband_def2 formula-decl nil real_bands nil)
    (listn type-eq-decl nil listn structures)
    (scal const-decl "listn[RealBand](length[IntBand](L))" real_bands
     nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (scal_intband_def formula-decl nil real_bands nil)
    (instant_alt_times const-decl "[real, real, real]" alt_bands nil)
    (instant_alt_traj const-decl "[Vect3, Vect3]" alt_bands nil)
    (alt_bands_generic const-decl
     "(Bands?(floor((MaxAlt - MinAlt) / AltStep) + 1, 0,
        floor((MaxAlt - MinAlt) / AltStep) + 1,
        conflict_free_traj_step(LOS, CD, LOS2, CD2, UseLOS2, B, T, B2, T2,
                                so, vo, AL, trajseq, timeseq, timestep),
        -1))" alt_bands nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (conflict_free_traj_step const-decl "bool" alt_bands nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (Bands? const-decl "bool" int_bands nil)
    (TimeSeq type-eq-decl nil alt_bands nil)
    (TrajSeq type-eq-decl nil alt_bands nil)
    (Traj type-eq-decl nil int_bands nil)
    (IntBand type-eq-decl nil int_bands nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "Vector" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (instant_alt_bands const-decl "list[RealBand]" alt_bands nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (string type-eq-decl nil strings nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (RealBand type-eq-decl nil real_bands nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (kinematic_alt_bands_TCC1 0
  (kinematic_alt_bands_TCC1-1 nil 3661105070
   ("" (skeep*)
    (("" (expand "kinematic_alt_times")
      (("" (lemma "times_increase")
        (("" (inst?) (("" (assert) (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (> const-decl "bool" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (times_increase formula-decl nil vsLevelOut aviation)
    (kinematic_alt_times const-decl "[real, real, real]" alt_bands nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (kinematic_alt_bands subtype
    "alt_bands.kinematic_alt_times(alt_bands.so, alt_bands.vo, alt_bands.MinAlt, alt_bands.AltStep, alt_bands.timestep, alt_bands.climbRate, alt_bands.accelup, alt_bands.acceldown, alt_bands.alterCR?)"
    "TimeSeq")))
 (kinematic_alt_bands_def1 0
  (kinematic_alt_bands_def1-1 nil 3661257226
   (""
    (case "NOT FORALL (vv,ww:Vect3): (vv=ww IFF (vect2(vv)=vect2(ww) AND vv`z=ww`z))")
    (("1" (hide 2)
      (("1" (skeep)
        (("1" (ground)
          (("1" (decompose-equality +)
            (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (label "hyp" -1)
      (("2" (hide "hyp")
        (("2" (skeep*)
          (("2" (skoletin 1)
            (("2" (expand "kinematic_alt_bands_correct?" :assert? none)
              (("2" (replace -1 :dir rl)
                (("2" (skoletin 1)
                  (("2" (skeep)
                    (("2" (skoletin 1)
                      (("2" (skoletin 1)
                        (("2" (skoletin 1)
                          (("2" (skoletin 1)
                            (("2" (replaces -1)
                              (("2"
                                (skoletin 1)
                                (("2"
                                  (skoletin 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (copy -10)
                                        (("2"
                                          (hide -11)
                                          (("2"
                                            (expand
                                             "kinematic_alt_bands")
                                            (("2"
                                              (name
                                               "abg"
                                               "alt_bands_generic(LOS, CD, LOS2, CD2, UseLOS2, B, T, B2,
                                                                                      T2, so, vo, AL, MinAlt, MaxAlt, AltStep,
                                                                                      kinematic_alt_traj(so,
                                                                                                         vo,
                                                                                                         MinAlt,
                                                                                                         AltStep,
                                                                                                         timestep,
                                                                                                         climbRate,
                                                                                                         accelup,
                                                                                                         acceldown,
                                                                                                         alterCR?),
                                                                                      kinematic_alt_times(so,
                                                                                                          vo,
                                                                                                          MinAlt,
                                                                                                          AltStep,
                                                                                                          timestep,
                                                                                                          climbRate,
                                                                                                          accelup,
                                                                                                          acceldown,
                                                                                                          alterCR?),
                                                                                      timestep)")
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (lemma
                                                   "scal_intband_def")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (inst - "j")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (case
                                                               "NOT EXISTS (i: below(length( abg))):
                                                                                                                                                                                                                         in?(nth(abg, i),  j)")
                                                              (("1"
                                                                (skosimp
                                                                 -5)
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "i!1")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     -5)
                                                                    (("1"
                                                                      (copy
                                                                       -5)
                                                                      (("1"
                                                                        (lemma
                                                                         "add_realband_def")
                                                                        (("1"
                                                                          (expand
                                                                           "testalt"
                                                                           -2)
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "scal_intband_def2")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "scalrb")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "in?"
                                                                                           (-1
                                                                                            1))
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (split
                                                                                               +)
                                                                                              (("1"
                                                                                                (div-by
                                                                                                 -1
                                                                                                 "AltStep")
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (div-by
                                                                                                 -2
                                                                                                 "AltStep")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (hide
                                                                     -2)
                                                                    (("2"
                                                                      (hide
                                                                       (-6
                                                                        -7))
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (typepred
                                                                           "abg")
                                                                          (("2"
                                                                            (expand
                                                                             "Bands?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst
                                                                                 -3
                                                                                 "j")
                                                                                (("2"
                                                                                  (hide
                                                                                   (-1
                                                                                    -2))
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (split
                                                                                             -)
                                                                                            (("1"
                                                                                              (name
                                                                                               "kat"
                                                                                               "kinematic_alt_traj(so,
                                                                                                                                         vo,
                                                                                                                                         MinAlt,
                                                                                                                                         AltStep,
                                                                                                                                         timestep,
                                                                                                                                         climbRate,
                                                                                                                                         accelup,
                                                                                                                                         acceldown,
                                                                                                                                         alterCR?)")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (name
                                                                                                   "katt"
                                                                                                   "kinematic_alt_times(so,
                                                                                                                                          vo,
                                                                                                                                          MinAlt,
                                                                                                                                          AltStep,
                                                                                                                                          timestep,
                                                                                                                                          climbRate,
                                                                                                                                          accelup,
                                                                                                                                          acceldown,
                                                                                                                                          alterCR?)")
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "conflict_free_traj_step")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             (-1
                                                                                                              -2))
                                                                                                            (("1"
                                                                                                              (skolem
                                                                                                               -
                                                                                                               "t")
                                                                                                              (("1"
                                                                                                                (skeep)
                                                                                                                (("1"
                                                                                                                  (copy
                                                                                                                   -4)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -5)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (split
                                                                                                                         -)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             (1
                                                                                                                              2
                                                                                                                              4))
                                                                                                                            (("1"
                                                                                                                              (invoke
                                                                                                                               (name
                                                                                                                                "az"
                                                                                                                                "%1")
                                                                                                                               (!
                                                                                                                                1
                                                                                                                                1))
                                                                                                                              (("1"
                                                                                                                                (replaces
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (typepred
                                                                                                                                   "az")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       (-1
                                                                                                                                        -2
                                                                                                                                        -4))
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "air")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "CD_future_traj_def")
                                                                                                                                            (("1"
                                                                                                                                              (inst?)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         +
                                                                                                                                                         "t")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (split
                                                                                                                                                             +)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "max"
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "katt")
                                                                                                                                                                (("1"
                                                                                                                                                                  (lift-if
                                                                                                                                                                   +)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (ground)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "kinematic_alt_times")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (lemma
                                                                                                                                                               "times_increase")
                                                                                                                                                              (("2"
                                                                                                                                                                (inst?)
                                                                                                                                                                (("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   -14
                                                                                                                                                                   :dir
                                                                                                                                                                   rl)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (case
                                                                                                                                                                           "NOT max(katt(j)`3,0)=lt_1`3+timestep")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             "katt"
                                                                                                                                                                             1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "kinematic_alt_times")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "max"
                                                                                                                                                                                 1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (replace
                                                                                                                                                                             -1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "traj_position")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "traj_velocity")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "kat")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (case
                                                                                                                                                                                       "kinematic_alt_traj(so, vo, MinAlt, AltStep, timestep, climbRate,
                                                                                                                     accelup, acceldown, alterCR?)
                                                                                                                    (j)(lt_1`3 + timestep)`1
                                                                                                   +
                                                                                                   (-1 * lt_1`3 - timestep + t) *
                                                                                                    kinematic_alt_traj(so, vo, MinAlt, AltStep, timestep,
                                                                                                                       climbRate, accelup, acceldown, alterCR?)
                                                                                                                      (j)(lt_1`3 + timestep)`2 = newso(t)")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (replaces
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "kinematic_alt_traj(so, vo, MinAlt, AltStep, timestep, climbRate,
                                                                                                                             accelup, acceldown, alterCR?)
                                                                                                                            (j)(lt_1`3 + timestep)`2 = newvo(t)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (replaces
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "position")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (hide
                                                                                                                                                                                             2)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "kinematic_alt_traj")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (reveal
                                                                                                                                                                                                 "hyp")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (rewrite
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   1)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (split
                                                                                                                                                                                                     +)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                       "vsLevelOut_vect2")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "vsLevelOut")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (replace
                                                                                                                                                                                                           -19
                                                                                                                                                                                                           :dir
                                                                                                                                                                                                           rl)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (inst?)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (flatten)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (replaces
                                                                                                                                                                                                                   -2)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                     "newvo"
                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil)
                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "newvo")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                         "Velocity_after_level")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (inst?)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (inst
                                                                                                                                                                                                             -
                                                                                                                                                                                                             "lt_1`3 + timestep")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                 "vsLevelOutEquals")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (inst?)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (hide
                                                                                                                                                                                         2)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "kinematic_alt_traj")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (reveal
                                                                                                                                                                                             "hyp")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (rewrite
                                                                                                                                                                                               -1
                                                                                                                                                                                               1)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (hide
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (split
                                                                                                                                                                                                   +)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (rewrite
                                                                                                                                                                                                     "vect2_add")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (rewrite
                                                                                                                                                                                                       "vect2_scal")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                         "vsLevelOut_vect2")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "vsLevelOut")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (replace
                                                                                                                                                                                                             -18
                                                                                                                                                                                                             :dir
                                                                                                                                                                                                             rl)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (inst?)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (replaces
                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (replaces
                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                         "newso")
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (hide-all-but
                                                                                                                                                                                                                             1)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (grind)
                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil)
                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                    (rewrite
                                                                                                                                                                                                     "vz_distr_add")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (rewrite
                                                                                                                                                                                                       "vz_scal")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                         "vsLevelOutEquals")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (inst?)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (flatten)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (replaces
                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (replaces
                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                                       "Velocity_after_level")
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (inst?)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (replaces
                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (lemma
                                                                                                                                                                                                                               "Position_after_level")
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (inst?)
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (replaces
                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                       "newso")
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           (1
                                                                                                                            2
                                                                                                                            3))
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (invoke
                                                                                                                                   (name
                                                                                                                                    "az"
                                                                                                                                    "%1")
                                                                                                                                   (!
                                                                                                                                    1
                                                                                                                                    1))
                                                                                                                                  (("2"
                                                                                                                                    (replaces
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (typepred
                                                                                                                                       "az")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           (-1
                                                                                                                                            -2
                                                                                                                                            -4))
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "air")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "CD_future_traj_def")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst?)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (hide
                                                                                                                                                           2)
                                                                                                                                                          (("2"
                                                                                                                                                            (inst
                                                                                                                                                             +
                                                                                                                                                             "t")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (split
                                                                                                                                                                 +)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "max"
                                                                                                                                                                   1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "katt")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lift-if
                                                                                                                                                                       +)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (ground)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "kinematic_alt_times")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "times_increase")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst?)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (replace
                                                                                                                                                                       -14
                                                                                                                                                                       :dir
                                                                                                                                                                       rl)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (case
                                                                                                                                                                               "NOT max(katt(j)`3,0)=lt_1`3+timestep")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "katt"
                                                                                                                                                                                 1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "kinematic_alt_times")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -16
                                                                                                                                                                                     :dir
                                                                                                                                                                                     rl)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "max"
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "traj_position")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "traj_velocity")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "kat")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "kinematic_alt_traj(so, vo, MinAlt, AltStep, timestep, climbRate,
                                                                                                                     accelup, acceldown, alterCR?)
                                                                                                                    (j)(lt_1`3 + timestep)`1
                                                                                                   +
                                                                                                   (-1 * lt_1`3 - timestep + t) *
                                                                                                    kinematic_alt_traj(so, vo, MinAlt, AltStep, timestep,
                                                                                                                       climbRate, accelup, acceldown, alterCR?)
                                                                                                                      (j)(lt_1`3 + timestep)`2 = newso(t)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (replaces
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (case
                                                                                                                                                                                               "kinematic_alt_traj(so, vo, MinAlt, AltStep, timestep, climbRate,
                                                                                                                             accelup, acceldown, alterCR?)
                                                                                                                            (j)(lt_1`3 + timestep)`2 = newvo(t)")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (replaces
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "position")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (hide
                                                                                                                                                                                                 2)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "kinematic_alt_traj")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (reveal
                                                                                                                                                                                                     "hyp")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (rewrite
                                                                                                                                                                                                       -1
                                                                                                                                                                                                       1)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (split
                                                                                                                                                                                                         +)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                           "vsLevelOut_vect2")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "vsLevelOut")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (replace
                                                                                                                                                                                                               -19
                                                                                                                                                                                                               :dir
                                                                                                                                                                                                               rl)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (inst?)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (flatten)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (replaces
                                                                                                                                                                                                                       -2)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                         "newvo"
                                                                                                                                                                                                                         1)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "newvo")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                             "Velocity_after_level")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (inst?)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                 -
                                                                                                                                                                                                                 "lt_1`3 + timestep")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                                     "vsLevelOutEquals")
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (inst?)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (hide
                                                                                                                                                                                             2)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "kinematic_alt_traj")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (reveal
                                                                                                                                                                                                 "hyp")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (rewrite
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   1)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (hide
                                                                                                                                                                                                     -1)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (split
                                                                                                                                                                                                       +)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (rewrite
                                                                                                                                                                                                         "vect2_add")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (rewrite
                                                                                                                                                                                                           "vect2_scal")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                             "vsLevelOut_vect2")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "vsLevelOut")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (inst?)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (flatten)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (replaces
                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (replaces
                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                           "newso")
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (hide-all-but
                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (grind)
                                                                                                                                                                                                                                nil
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                        (rewrite
                                                                                                                                                                                                         "vz_distr_add")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (rewrite
                                                                                                                                                                                                           "vz_scal")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                             "vsLevelOutEquals")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (inst?)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (replaces
                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (replaces
                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                                         "Position_after_level")
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (inst?)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (replaces
                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                                 "Velocity_after_level")
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (inst?)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (replaces
                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                           "newso")
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               +
                                                                                               "i")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (grind
                                                                                                     :exclude
                                                                                                     "nth")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "in?"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (case
                                                                                             "nth(abg,i)`ub<=1 + floor((MaxAlt - MinAlt) / AltStep)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "FORALL (aa,bb,cc:real): aa<=bb AND bb<=cc IMPLIES aa<=cc")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "j"
                                                                                                   "nth(abg,i)`ub"
                                                                                                   "1 + floor((MaxAlt - MinAlt) / AltStep)")
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "abg")
                                                                                                (("2"
                                                                                                  (invoke
                                                                                                   (name
                                                                                                    "CDG"
                                                                                                    "%1")
                                                                                                   (!
                                                                                                    -1
                                                                                                    0
                                                                                                    4))
                                                                                                  (("2"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "Bands?")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "i")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in? const-decl "bool" int_bands nil)
    (Position_after_level formula-decl nil vsLevelOut aviation)
    (vz_scal formula-decl nil vectors_3D vectors)
    (vz_distr_add formula-decl nil vectors_3D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (newso skolem-const-decl "[nnreal -> Vect3]" alt_bands nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (vect2_scal formula-decl nil vect_3D_2D vectors)
    (vect2_add formula-decl nil vect_3D_2D vectors)
    (vsLevelOutEquals formula-decl nil vsLevelOut aviation)
    (Velocity_after_level formula-decl nil vsLevelOut aviation)
    (vect2_eq formula-decl nil vect_3D_2D vectors)
    (newvo skolem-const-decl "[nnreal -> Vect3]" alt_bands nil)
    (vsLevelOut_vect2 formula-decl nil vsLevelOut aviation)
    (position const-decl "Vect3" int_bands nil)
    (kat skolem-const-decl "[nat -> [nnreal -> [Vect3, Vect3]]]"
     alt_bands nil)
    (traj_velocity const-decl "Vect3" int_bands nil)
    (traj_position const-decl "Vect3" int_bands nil)
    (times_increase formula-decl nil vsLevelOut aviation)
    (katt skolem-const-decl "[nat -> [real, real, real]]" alt_bands
     nil)
    (CD_future_traj_def formula-decl nil int_bands nil)
    (CD_future_traj const-decl "bool" int_bands nil)
    (first_conflict_aircraft def-decl "{j: int |
   (j >= 0 IFF
     (i <= j AND
       j < length(AL) AND
        CD_future_traj(CD, B, T, traj, k * tsn, AL, j) AND
         (FORALL (q: int):
            q >= i AND q < j IMPLIES
             NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q))))
    AND
    (j < 0 IFF
      (FORALL (q: int):
         q >= i AND q < length(AL) IMPLIES
          NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q)))}"
     int_bands nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (scalrb const-decl "RealBand" real_bands nil)
    (scal_intband_def2 formula-decl nil real_bands nil)
    (listn type-eq-decl nil listn structures)
    (scal const-decl "listn[RealBand](length[IntBand](L))" real_bands
     nil)
    (testalt skolem-const-decl "nnreal" alt_bands nil)
    (add_realband_def formula-decl nil real_bands nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (scal_intband_def formula-decl nil real_bands nil)
    (kinematic_alt_times const-decl "[real, real, real]" alt_bands nil)
    (kinematic_alt_traj const-decl "[Vect3, Vect3]" alt_bands nil)
    (alt_bands_generic const-decl
     "(Bands?(floor((MaxAlt - MinAlt) / AltStep) + 1, 0,
        floor((MaxAlt - MinAlt) / AltStep) + 1,
        conflict_free_traj_step(LOS, CD, LOS2, CD2, UseLOS2, B, T, B2, T2,
                                so, vo, AL, trajseq, timeseq, timestep),
        -1))" alt_bands nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (conflict_free_traj_step const-decl "bool" alt_bands nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (Bands? const-decl "bool" int_bands nil)
    (TimeSeq type-eq-decl nil alt_bands nil)
    (TrajSeq type-eq-decl nil alt_bands nil)
    (Traj type-eq-decl nil int_bands nil)
    (IntBand type-eq-decl nil int_bands nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vsLevelOut const-decl "[Vect3, Vect3]" vsLevelOut aviation)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (in? const-decl "bool" real_bands nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (RealBand type-eq-decl nil real_bands nil)
    (kinematic_alt_bands const-decl "list[RealBand]" alt_bands nil)
    (kinematic_alt_bands_correct? const-decl "bool" alt_bands nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (string type-eq-decl nil strings nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vsLevelOutTimes const-decl "[real, real, real, real, real, real]"
     vsLevelOut aviation)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (kinematic_alt_bands_def2 0
  (kinematic_alt_bands_def2-1 nil 3661257529
   (""
    (case "NOT FORALL (vv,ww:Vect3): (vv=ww IFF (vect2(vv)=vect2(ww) AND vv`z=ww`z))")
    (("1" (hide 2)
      (("1" (skeep)
        (("1" (ground)
          (("1" (decompose-equality +)
            (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (label "hyp" -1)
      (("2" (hide "hyp")
        (("2" (skeep*)
          (("2" (skoletin 1)
            (("2" (expand "kinematic_alt_bands_correct?" :assert? none)
              (("2" (replace -1 :dir rl)
                (("2" (skoletin 1)
                  (("2" (skeep)
                    (("2" (skoletin 1)
                      (("2" (skoletin 1)
                        (("2" (skoletin 1)
                          (("2" (skoletin 1)
                            (("2" (replaces -1)
                              (("2"
                                (skoletin 1)
                                (("2"
                                  (skoletin 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (copy -10)
                                        (("2"
                                          (hide -11)
                                          (("2"
                                            (expand
                                             "kinematic_alt_bands")
                                            (("2"
                                              (name
                                               "abg"
                                               "alt_bands_generic(LOS, CD, LOS2, CD2, UseLOS2, B, T, B2,
                                                                                                        T2, so, vo, AL, MinAlt, MaxAlt, AltStep,
                                                                                                        kinematic_alt_traj(so,
                                                                                                                           vo,
                                                                                                                           MinAlt,
                                                                                                                           AltStep,
                                                                                                                           timestep,
                                                                                                                           climbRate,
                                                                                                                           accelup,
                                                                                                                           acceldown,
                                                                                                                           alterCR?),
                                                                                                        kinematic_alt_times(so,
                                                                                                                            vo,
                                                                                                                            MinAlt,
                                                                                                                            AltStep,
                                                                                                                            timestep,
                                                                                                                            climbRate,
                                                                                                                            accelup,
                                                                                                                            acceldown,
                                                                                                                            alterCR?),
                                                                                                        timestep)")
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (lemma
                                                   "scal_intband_def")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (inst - "j")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (case
                                                               "NOT EXISTS (i: below(length( abg))):
                                                                                                                                                                                                                                           in?(nth(abg, i),  j)")
                                                              (("1"
                                                                (skosimp
                                                                 -5)
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "i!1")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     -5)
                                                                    (("1"
                                                                      (copy
                                                                       -5)
                                                                      (("1"
                                                                        (lemma
                                                                         "add_realband_def")
                                                                        (("1"
                                                                          (expand
                                                                           "testalt"
                                                                           -2)
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "scal_intband_def2")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "scalrb")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "in?"
                                                                                           (-1
                                                                                            1))
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (split
                                                                                               +)
                                                                                              (("1"
                                                                                                (div-by
                                                                                                 -1
                                                                                                 "AltStep")
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (div-by
                                                                                                 -2
                                                                                                 "AltStep")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (hide
                                                                     -2)
                                                                    (("2"
                                                                      (hide
                                                                       (-6
                                                                        -7))
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (typepred
                                                                           "abg")
                                                                          (("2"
                                                                            (expand
                                                                             "Bands?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst
                                                                                 -3
                                                                                 "j")
                                                                                (("2"
                                                                                  (hide
                                                                                   (-1
                                                                                    -2))
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (split
                                                                                             -)
                                                                                            (("1"
                                                                                              (name
                                                                                               "kat"
                                                                                               "kinematic_alt_traj(so,
                                                                                                                                                                       vo,
                                                                                                                                                                       MinAlt,
                                                                                                                                                                       AltStep,
                                                                                                                                                                       timestep,
                                                                                                                                                                       climbRate,
                                                                                                                                                                       accelup,
                                                                                                                                                                       acceldown,
                                                                                                                                                                       alterCR?)")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (name
                                                                                                   "katt"
                                                                                                   "kinematic_alt_times(so,
                                                                                                                                                                        vo,
                                                                                                                                                                        MinAlt,
                                                                                                                                                                        AltStep,
                                                                                                                                                                        timestep,
                                                                                                                                                                        climbRate,
                                                                                                                                                                        accelup,
                                                                                                                                                                        acceldown,
                                                                                                                                                                        alterCR?)")
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "conflict_free_traj_step")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             (-1
                                                                                                              -2))
                                                                                                            (("1"
                                                                                                              (skolem
                                                                                                               -
                                                                                                               "t")
                                                                                                              (("1"
                                                                                                                (skeep)
                                                                                                                (("1"
                                                                                                                  (copy
                                                                                                                   -5)
                                                                                                                  (("1"
                                                                                                                    (copy
                                                                                                                     -5)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -6)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -6)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 (3
                                                                                                                                  4))
                                                                                                                                (("1"
                                                                                                                                  (hide
                                                                                                                                   2)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "NOT katt(j)`2>=B")
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "katt"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "kinematic_alt_times")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (invoke
                                                                                                                                         (name
                                                                                                                                          "az"
                                                                                                                                          "%1")
                                                                                                                                         (!
                                                                                                                                          1
                                                                                                                                          1))
                                                                                                                                        (("1"
                                                                                                                                          (replaces
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (typepred
                                                                                                                                             "az")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (hide
                                                                                                                                                 (-1
                                                                                                                                                  -2
                                                                                                                                                  -4))
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -
                                                                                                                                                   "air")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "CD_future_traj_def")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst?)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst?)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   +
                                                                                                                                                                   "t")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (case
                                                                                                                                                                       "NOT t<=min(T,katt(j)`2)")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         2)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "min"
                                                                                                                                                                           1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lift-if)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (ground)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "katt"
                                                                                                                                                                                 1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "kinematic_alt_times")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (case
                                                                                                                                                                           "NOT max(katt(j)`1,0)<=t")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             2)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "max")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (lift-if)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (ground)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "katt"
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "kinematic_alt_times")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (replace
                                                                                                                                                                               -15
                                                                                                                                                                               :dir
                                                                                                                                                                               rl)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (case
                                                                                                                                                                                 "traj_position(kat(j), 1 * max(katt(j)`1, 0), t) = newso(t)")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (case
                                                                                                                                                                                   "traj_velocity(kat(j), 1 * max(katt(j)`1, 0), t) = newvo(t)")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "position")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (hide
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "kat")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "kinematic_alt_traj")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -18
                                                                                                                                                                                           :dir
                                                                                                                                                                                           rl)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "traj_velocity")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (lemma
                                                                                                                                                                                                 "times_increase")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (inst?)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -19
                                                                                                                                                                                                     :dir
                                                                                                                                                                                                     rl)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (flatten)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (case
                                                                                                                                                                                                             "katt(j)`1 = lt_1`1")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "newvo")
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                     -1
                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (hide
                                                                                                                                                                                                                       -4)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                         "vsLevelOut"
                                                                                                                                                                                                                         +)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (replace
                                                                                                                                                                                                                           -20
                                                                                                                                                                                                                           :dir
                                                                                                                                                                                                                           rl)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                             "vsLevelOutCalculation")
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (propax)
                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil)
                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                              (hide
                                                                                                                                                                                                               2)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "katt")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "kinematic_alt_times")
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   2)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (case
                                                                                                                                                                                     "katt(j)`1 = lt_1`1")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replaces
                                                                                                                                                                                       -1
                                                                                                                                                                                       +)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (lemma
                                                                                                                                                                                         "times_increase")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst?)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -18
                                                                                                                                                                                             :dir
                                                                                                                                                                                             rl)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (flatten)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "kat")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "kinematic_alt_traj")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (replace
                                                                                                                                                                                                         -19
                                                                                                                                                                                                         :dir
                                                                                                                                                                                                         rl)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "traj_position")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "newso")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "vsLevelOut"
                                                                                                                                                                                                                 +)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                   -19
                                                                                                                                                                                                                   :dir
                                                                                                                                                                                                                   rl)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                     "vsLevelOutCalculation")
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (hide-all-but
                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (decompose-equality
                                                                                                                                                                                                                         +)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (grind)
                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                          (grind)
                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                         ("3"
                                                                                                                                                                                                                          (grind)
                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "katt")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "kinematic_alt_times")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (expand
                                                                                                                                                           "min")
                                                                                                                                                          (("2"
                                                                                                                                                            (lift-if)
                                                                                                                                                            (("2"
                                                                                                                                                              (ground)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (expand
                                                                                                                                           "min"
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (lift-if)
                                                                                                                                            (("2"
                                                                                                                                              (ground)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   (3
                                                                                                                                    4))
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (case
                                                                                                                                       "NOT katt(j)`2>=B2")
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "katt"
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "kinematic_alt_times")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (invoke
                                                                                                                                           (name
                                                                                                                                            "az"
                                                                                                                                            "%1")
                                                                                                                                           (!
                                                                                                                                            1
                                                                                                                                            1))
                                                                                                                                          (("1"
                                                                                                                                            (replaces
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (typepred
                                                                                                                                               "az")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (hide
                                                                                                                                                   (-1
                                                                                                                                                    -2
                                                                                                                                                    -4))
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "air")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "CD_future_traj_def")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (inst?)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (hide
                                                                                                                                                                   2)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     +
                                                                                                                                                                     "t")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (case
                                                                                                                                                                         "NOT t<=min(T2,katt(j)`2)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (hide
                                                                                                                                                                           2)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             "min"
                                                                                                                                                                             1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lift-if)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (ground)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "katt"
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "kinematic_alt_times")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (case
                                                                                                                                                                             "NOT max(katt(j)`1,0)<=t")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (hide
                                                                                                                                                                               2)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "max")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (lift-if)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (ground)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "katt"
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "kinematic_alt_times")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (case
                                                                                                                                                                                 "traj_position(kat(j), 1 * max(katt(j)`1, 0), t) = newso(t)")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (case
                                                                                                                                                                                   "traj_velocity(kat(j), 1 * max(katt(j)`1, 0), t) = newvo(t)")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "position")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (hide
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "kat")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "kinematic_alt_traj")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -18
                                                                                                                                                                                           :dir
                                                                                                                                                                                           rl)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "traj_velocity")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (lemma
                                                                                                                                                                                                 "times_increase")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (inst?)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (flatten)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (case
                                                                                                                                                                                                           "katt(j)`1 = lt_1`1")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "newvo")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (hide
                                                                                                                                                                                                                     -4)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                       "vsLevelOut"
                                                                                                                                                                                                                       +)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                         -20
                                                                                                                                                                                                                         :dir
                                                                                                                                                                                                                         rl)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                           "vsLevelOutCalculation")
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (hide
                                                                                                                                                                                                                             2)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               "katt")
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                 "kinematic_alt_times")
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil)
                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                            (hide
                                                                                                                                                                                                             2)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "katt")
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "kinematic_alt_times")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (hide
                                                                                                                                                                                                                   -3)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   2)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (case
                                                                                                                                                                                     "katt(j)`1 = lt_1`1")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replaces
                                                                                                                                                                                       -1
                                                                                                                                                                                       +)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (lemma
                                                                                                                                                                                         "times_increase")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst?)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -19
                                                                                                                                                                                             :dir
                                                                                                                                                                                             rl)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (flatten)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "kat")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "kinematic_alt_traj")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (replace
                                                                                                                                                                                                         -20
                                                                                                                                                                                                         :dir
                                                                                                                                                                                                         rl)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "traj_position")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "newso")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "vsLevelOut"
                                                                                                                                                                                                                 +)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                   -20
                                                                                                                                                                                                                   :dir
                                                                                                                                                                                                                   rl)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                     "vsLevelOutCalculation")
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (hide-all-but
                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (decompose-equality
                                                                                                                                                                                                                         +)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (grind)
                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                          (grind)
                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                         ("3"
                                                                                                                                                                                                                          (grind)
                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "katt")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "kinematic_alt_times")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (expand
                                                                                                                                                             "min")
                                                                                                                                                            (("2"
                                                                                                                                                              (lift-if)
                                                                                                                                                              (("2"
                                                                                                                                                                (ground)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "min"
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (lift-if)
                                                                                                                                              (("2"
                                                                                                                                                (ground)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               +
                                                                                               "i")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "in?")
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "in?")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (case
                                                                                             "nth(abg,i)`ub<=1 + floor((MaxAlt - MinAlt) / AltStep)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "FORALL (aa,bb,cc:real): aa<=bb AND bb<=cc IMPLIES aa<=cc")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "j"
                                                                                                   "nth(abg,i)`ub"
                                                                                                   "1 + floor((MaxAlt - MinAlt) / AltStep)")
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "abg")
                                                                                                (("2"
                                                                                                  (invoke
                                                                                                   (name
                                                                                                    "CG"
                                                                                                    "%1")
                                                                                                   (!
                                                                                                    -1
                                                                                                    0
                                                                                                    4))
                                                                                                  (("2"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "Bands?")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "i")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in? const-decl "bool" int_bands nil)
    (T2 skolem-const-decl "nnreal" alt_bands nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (linear_pos const-decl "Vect3" util aviation)
    (S1 const-decl "real" vsLevelOut aviation)
    (V1 const-decl "real" vsLevelOut aviation)
    (newso skolem-const-decl "[nnreal -> Vect3]" alt_bands nil)
    (vsLevelOutCalculation const-decl "[Vect3, Vect3]" vsLevelOut
     aviation)
    (newvo skolem-const-decl "[nnreal -> Vect3]" alt_bands nil)
    (max_nnreal_0 formula-decl nil min_max reals)
    (times_increase formula-decl nil vsLevelOut aviation)
    (kat skolem-const-decl "[nat -> [nnreal -> [Vect3, Vect3]]]"
     alt_bands nil)
    (position const-decl "Vect3" int_bands nil)
    (traj_velocity const-decl "Vect3" int_bands nil)
    (traj_position const-decl "Vect3" int_bands nil)
    (j skolem-const-decl "nat" alt_bands nil)
    (T skolem-const-decl "nnreal" alt_bands nil)
    (CD_future_traj_def formula-decl nil int_bands nil)
    (CD_future_traj const-decl "bool" int_bands nil)
    (first_conflict_aircraft def-decl "{j: int |
   (j >= 0 IFF
     (i <= j AND
       j < length(AL) AND
        CD_future_traj(CD, B, T, traj, k * tsn, AL, j) AND
         (FORALL (q: int):
            q >= i AND q < j IMPLIES
             NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q))))
    AND
    (j < 0 IFF
      (FORALL (q: int):
         q >= i AND q < length(AL) IMPLIES
          NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q)))}"
     int_bands nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (katt skolem-const-decl "[nat -> [real, real, real]]" alt_bands
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (scalrb const-decl "RealBand" real_bands nil)
    (scal_intband_def2 formula-decl nil real_bands nil)
    (listn type-eq-decl nil listn structures)
    (scal const-decl "listn[RealBand](length[IntBand](L))" real_bands
     nil)
    (testalt skolem-const-decl "nnreal" alt_bands nil)
    (add_realband_def formula-decl nil real_bands nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (scal_intband_def formula-decl nil real_bands nil)
    (kinematic_alt_times const-decl "[real, real, real]" alt_bands nil)
    (kinematic_alt_traj const-decl "[Vect3, Vect3]" alt_bands nil)
    (alt_bands_generic const-decl
     "(Bands?(floor((MaxAlt - MinAlt) / AltStep) + 1, 0,
        floor((MaxAlt - MinAlt) / AltStep) + 1,
        conflict_free_traj_step(LOS, CD, LOS2, CD2, UseLOS2, B, T, B2, T2,
                                so, vo, AL, trajseq, timeseq, timestep),
        -1))" alt_bands nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (conflict_free_traj_step const-decl "bool" alt_bands nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (Bands? const-decl "bool" int_bands nil)
    (TimeSeq type-eq-decl nil alt_bands nil)
    (TrajSeq type-eq-decl nil alt_bands nil)
    (Traj type-eq-decl nil int_bands nil)
    (IntBand type-eq-decl nil int_bands nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vsLevelOut const-decl "[Vect3, Vect3]" vsLevelOut aviation)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (in? const-decl "bool" real_bands nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (RealBand type-eq-decl nil real_bands nil)
    (kinematic_alt_bands const-decl "list[RealBand]" alt_bands nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (kinematic_alt_bands_correct? const-decl "bool" alt_bands nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (string type-eq-decl nil strings nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vsLevelOutTimes const-decl "[real, real, real, real, real, real]"
     vsLevelOut aviation)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (kinematic_alt_bands_def3 0
  (kinematic_alt_bands_def3-2 nil 3661271543
   (""
    (case "NOT FORALL (vv,ww:Vect3): (vv=ww IFF (vect2(vv)=vect2(ww) AND vv`z=ww`z))")
    (("1" (hide 2)
      (("1" (skeep)
        (("1" (ground)
          (("1" (decompose-equality +)
            (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (label "hyp" -1)
      (("2" (hide "hyp")
        (("2" (skeep*)
          (("2" (skoletin 1)
            (("2" (expand "kinematic_alt_bands_correct?" :assert? none)
              (("2" (replace -1 :dir rl)
                (("2" (skoletin 1)
                  (("2" (skeep)
                    (("2" (skoletin 1)
                      (("2" (skoletin 1)
                        (("2" (skoletin 1)
                          (("2" (skoletin 1)
                            (("2" (replaces -1)
                              (("2"
                                (skoletin 1)
                                (("2"
                                  (skoletin 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (copy -10)
                                        (("2"
                                          (hide -11)
                                          (("2"
                                            (expand
                                             "kinematic_alt_bands")
                                            (("2"
                                              (name
                                               "abg"
                                               "alt_bands_generic(LOS, CD, LOS2, CD2, UseLOS2, B, T, B2,
                                                                                                                          T2, so, vo, AL, MinAlt, MaxAlt, AltStep,
                                                                                                                          kinematic_alt_traj(so,
                                                                                                                                             vo,
                                                                                                                                             MinAlt,
                                                                                                                                             AltStep,
                                                                                                                                             timestep,
                                                                                                                                             climbRate,
                                                                                                                                             accelup,
                                                                                                                                             acceldown,
                                                                                                                                             alterCR?),
                                                                                                                          kinematic_alt_times(so,
                                                                                                                                              vo,
                                                                                                                                              MinAlt,
                                                                                                                                              AltStep,
                                                                                                                                              timestep,
                                                                                                                                              climbRate,
                                                                                                                                              accelup,
                                                                                                                                              acceldown,
                                                                                                                                              alterCR?),
                                                                                                                          timestep)")
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (lemma
                                                   "scal_intband_def")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (inst - "j")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (case
                                                               "NOT EXISTS (i: below(length( abg))):
                                                                                                                                                                                                                                                             in?(nth(abg, i),  j)")
                                                              (("1"
                                                                (skosimp
                                                                 -5)
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "i!1")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     -5)
                                                                    (("1"
                                                                      (copy
                                                                       -5)
                                                                      (("1"
                                                                        (lemma
                                                                         "add_realband_def")
                                                                        (("1"
                                                                          (expand
                                                                           "testalt"
                                                                           -2)
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "scal_intband_def2")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "scalrb")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "in?"
                                                                                           (-1
                                                                                            1))
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (split
                                                                                               +)
                                                                                              (("1"
                                                                                                (div-by
                                                                                                 -1
                                                                                                 "AltStep")
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (div-by
                                                                                                 -2
                                                                                                 "AltStep")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (hide
                                                                     -2)
                                                                    (("2"
                                                                      (hide
                                                                       (-6
                                                                        -7))
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (typepred
                                                                           "abg")
                                                                          (("2"
                                                                            (expand
                                                                             "Bands?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst
                                                                                 -3
                                                                                 "j")
                                                                                (("2"
                                                                                  (hide
                                                                                   (-1
                                                                                    -2))
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (split
                                                                                             -)
                                                                                            (("1"
                                                                                              (name
                                                                                               "kat"
                                                                                               "kinematic_alt_traj(so,
                                                                                                                                                                                                     vo,
                                                                                                                                                                                                     MinAlt,
                                                                                                                                                                                                     AltStep,
                                                                                                                                                                                                     timestep,
                                                                                                                                                                                                     climbRate,
                                                                                                                                                                                                     accelup,
                                                                                                                                                                                                     acceldown,
                                                                                                                                                                                                     alterCR?)")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (name
                                                                                                   "katt"
                                                                                                   "kinematic_alt_times(so,
                                                                                                                                                                                                      vo,
                                                                                                                                                                                                      MinAlt,
                                                                                                                                                                                                      AltStep,
                                                                                                                                                                                                      timestep,
                                                                                                                                                                                                      climbRate,
                                                                                                                                                                                                      accelup,
                                                                                                                                                                                                      acceldown,
                                                                                                                                                                                                      alterCR?)")
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (skolem
                                                                                                       -
                                                                                                       "t")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "times_increase")
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -12
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "kinematic_alt_bands_def1")
                                                                                                                  (("1"
                                                                                                                    (insteep
                                                                                                                     -)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -16
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "kinematic_alt_bands_def2")
                                                                                                                          (("1"
                                                                                                                            (insteep
                                                                                                                             -)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -17
                                                                                                                               :dir
                                                                                                                               rl)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "t > lt_1`1 AND t < lt_1`2")
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -3)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "kinematic_alt_bands_correct?")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "kinematic_alt_bands")
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "abg")
                                                                                                                                            (("1"
                                                                                                                                              (replaces
                                                                                                                                               -1
                                                                                                                                               :dir
                                                                                                                                               rl)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -18
                                                                                                                                                 :dir
                                                                                                                                                 rl)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -
                                                                                                                                                   "air")
                                                                                                                                                  (("1"
                                                                                                                                                    (split
                                                                                                                                                     -)
                                                                                                                                                    (("1"
                                                                                                                                                      (skeep
                                                                                                                                                       -12)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         +
                                                                                                                                                         "i!1")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (inst
                                                                                                                                                       +
                                                                                                                                                       "t")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (split
                                                                                                                                                           -)
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "newso")
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "newvo")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "newvo")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "newso")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (case
                                                                                                                                     "t>lt_1`3+timestep")
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "kinematic_alt_bands_correct?")
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "abg")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "kinematic_alt_bands")
                                                                                                                                            (("1"
                                                                                                                                              (replaces
                                                                                                                                               -1
                                                                                                                                               :dir
                                                                                                                                               rl)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -17
                                                                                                                                                 :dir
                                                                                                                                                 rl)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -
                                                                                                                                                   "air")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (split
                                                                                                                                                       -)
                                                                                                                                                      (("1"
                                                                                                                                                        (hide
                                                                                                                                                         2)
                                                                                                                                                        (("1"
                                                                                                                                                          (skeep
                                                                                                                                                           -11)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             +
                                                                                                                                                             "i!1")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide
                                                                                                                                                         2)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           +
                                                                                                                                                           "t")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "newso")
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "newvo")
                                                                                                                                                                (("2"
                                                                                                                                                                  (split
                                                                                                                                                                   -)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       (-1
                                                                                                                                        -2))
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "conflict_free_traj_step")
                                                                                                                                        (("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (hide
                                                                                                                                             (3
                                                                                                                                              4
                                                                                                                                              5
                                                                                                                                              6))
                                                                                                                                            (("2"
                                                                                                                                              (case
                                                                                                                                               "t>= lt_1`2")
                                                                                                                                              (("1"
                                                                                                                                                (hide
                                                                                                                                                 -5)
                                                                                                                                                (("1"
                                                                                                                                                  (skeep
                                                                                                                                                   -)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "i!1")
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -9
                                                                                                                                                       :dir
                                                                                                                                                       rl)
                                                                                                                                                      (("1"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -)
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 4)
                                                                                                                                                                (("1"
                                                                                                                                                                  (invoke
                                                                                                                                                                   (name
                                                                                                                                                                    "az"
                                                                                                                                                                    "%1")
                                                                                                                                                                   (!
                                                                                                                                                                    3
                                                                                                                                                                    1))
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replaces
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "az")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (hide
                                                                                                                                                                           (-1
                                                                                                                                                                            -2
                                                                                                                                                                            -4))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst
                                                                                                                                                                             -
                                                                                                                                                                             "air")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -15
                                                                                                                                                                                 :dir
                                                                                                                                                                                 rl)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -14
                                                                                                                                                                                   :dir
                                                                                                                                                                                   rl)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -13
                                                                                                                                                                                     :dir
                                                                                                                                                                                     rl)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -11
                                                                                                                                                                                       :dir
                                                                                                                                                                                       rl)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "kat")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "kinematic_alt_traj")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "newso")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "newvo")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (propax)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide
                                                                                                                                                             3)
                                                                                                                                                            (("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (invoke
                                                                                                                                                                   (name
                                                                                                                                                                    "az"
                                                                                                                                                                    "%1")
                                                                                                                                                                   (!
                                                                                                                                                                    3
                                                                                                                                                                    1))
                                                                                                                                                                  (("2"
                                                                                                                                                                    (replaces
                                                                                                                                                                     -1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "az")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (hide
                                                                                                                                                                           (-1
                                                                                                                                                                            -2
                                                                                                                                                                            -4))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -
                                                                                                                                                                             "air")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "kat")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "kinematic_alt_traj")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "newso")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "newvo")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (split
                                                                                                                                                       +)
                                                                                                                                                      (("1"
                                                                                                                                                        (case
                                                                                                                                                         "katt(j)`2/timestep<=i!1")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (cross-mult
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "katt"
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "kinematic_alt_times")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (case
                                                                                                                                                         "i!1<=katt(j)`3/timestep")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (cross-mult
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "katt"
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "kinematic_alt_times")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (case
                                                                                                                                                 "NOT t<=lt_1`1")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide
                                                                                                                                                   +)
                                                                                                                                                  (("2"
                                                                                                                                                    (hide
                                                                                                                                                     -6)
                                                                                                                                                    (("2"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -
                                                                                                                                                         "i!1")
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -8
                                                                                                                                                             :dir
                                                                                                                                                             rl)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -)
                                                                                                                                                                (("1"
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (hide
                                                                                                                                                                       2)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (invoke
                                                                                                                                                                         (name
                                                                                                                                                                          "az"
                                                                                                                                                                          "%1")
                                                                                                                                                                         (!
                                                                                                                                                                          1
                                                                                                                                                                          1))
                                                                                                                                                                        (("1"
                                                                                                                                                                          (replaces
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (typepred
                                                                                                                                                                             "az")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (hide
                                                                                                                                                                                 (-1
                                                                                                                                                                                  -2
                                                                                                                                                                                  -4))
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -
                                                                                                                                                                                   "air")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "kat")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "kinematic_alt_traj")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "newso")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "newvo")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (hide
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (invoke
                                                                                                                                                                         (name
                                                                                                                                                                          "az"
                                                                                                                                                                          "%1")
                                                                                                                                                                         (!
                                                                                                                                                                          1
                                                                                                                                                                          1))
                                                                                                                                                                        (("2"
                                                                                                                                                                          (replaces
                                                                                                                                                                           -1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (typepred
                                                                                                                                                                             "az")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (hide
                                                                                                                                                                                 (-1
                                                                                                                                                                                  -2
                                                                                                                                                                                  -4))
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -
                                                                                                                                                                                   "air")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "newso")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "newvo")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "kat")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "kinematic_alt_traj")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (case
                                                                                                                                                           "i!1<=katt(j)`1/timestep")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (cross-mult
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "katt"
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "kinematic_alt_times")
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               +
                                                                                               "i")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "in?")
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "in?")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (case
                                                                                             "nth(abg,i)`ub<=1 + floor((MaxAlt - MinAlt) / AltStep)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "FORALL (aa,bb,cc:real): aa<=bb AND bb<=cc IMPLIES aa<=cc")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "j"
                                                                                                   "nth(abg,i)`ub"
                                                                                                   "1 + floor((MaxAlt - MinAlt) / AltStep)")
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (typepred
                                                                                               "abg")
                                                                                              (("2"
                                                                                                (invoke
                                                                                                 (name
                                                                                                  "CG"
                                                                                                  "%1")
                                                                                                 (!
                                                                                                  -1
                                                                                                  0
                                                                                                  4))
                                                                                                (("2"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "Bands?")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "i")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in? const-decl "bool" int_bands nil)
    (i!1 skolem-const-decl "nat" alt_bands nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (kat skolem-const-decl "[nat -> [nnreal -> [Vect3, Vect3]]]"
     alt_bands nil)
    (first_los_aircraft def-decl "{j: int |
   (j >= 0 IFF
     (i <= j AND
       j < length(AL) AND
        LOS(traj(k * ts)`1, traj(k * ts)`2,
            nth(AL, j)`s + (k * ts) * nth(AL, j)`v, nth(AL, j)`v)
         AND
         (FORALL (q: int):
            q >= i AND q < j IMPLIES
             NOT LOS(traj(k * ts)`1, traj(k * ts)`2,
                     nth(AL, q)`s + (k * ts) * nth(AL, q)`v,
                     nth(AL, q)`v))))
    AND
    (j < 0 IFF
      (FORALL (q: int):
         q >= i AND q < length(AL) IMPLIES
          NOT LOS(traj(k * ts)`1, traj(k * ts)`2,
                  nth(AL, q)`s + (k * ts) * nth(AL, q)`v, nth(AL, q)`v)))}"
     int_bands nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange type-eq-decl nil integers nil)
    (i!1 skolem-const-decl "nat" alt_bands nil)
    (timestep skolem-const-decl "posreal" alt_bands nil)
    (j skolem-const-decl "nat" alt_bands nil)
    (katt skolem-const-decl "[nat -> [real, real, real]]" alt_bands
     nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (newvo skolem-const-decl "[nnreal -> Vect3]" alt_bands nil)
    (newso skolem-const-decl "[nnreal -> Vect3]" alt_bands nil)
    (abg skolem-const-decl
     "(Bands?(floor((MaxAlt - MinAlt) / AltStep) + 1, 0,
        floor((MaxAlt - MinAlt) / AltStep) + 1,
        conflict_free_traj_step(LOS, CD, LOS2, CD2, UseLOS2, B, T, B2, T2,
                                so, vo, AL,
                                kinematic_alt_traj(so,
                                                   vo,
                                                   MinAlt,
                                                   AltStep,
                                                   timestep,
                                                   climbRate,
                                                   accelup,
                                                   acceldown,
                                                   alterCR?),
                                kinematic_alt_times(so,
                                                    vo,
                                                    MinAlt,
                                                    AltStep,
                                                    timestep,
                                                    climbRate,
                                                    accelup,
                                                    acceldown,
                                                    alterCR?),
                                timestep),
        -1))" alt_bands nil)
    (kinematic_alt_bands_def2 formula-decl nil alt_bands nil)
    (kinematic_alt_bands_def1 formula-decl nil alt_bands nil)
    (times_increase formula-decl nil vsLevelOut aviation)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (scalrb const-decl "RealBand" real_bands nil)
    (scal_intband_def2 formula-decl nil real_bands nil)
    (listn type-eq-decl nil listn structures)
    (scal const-decl "listn[RealBand](length[IntBand](L))" real_bands
     nil)
    (testalt skolem-const-decl "nnreal" alt_bands nil)
    (add_realband_def formula-decl nil real_bands nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (scal_intband_def formula-decl nil real_bands nil)
    (kinematic_alt_times const-decl "[real, real, real]" alt_bands nil)
    (kinematic_alt_traj const-decl "[Vect3, Vect3]" alt_bands nil)
    (alt_bands_generic const-decl
     "(Bands?(floor((MaxAlt - MinAlt) / AltStep) + 1, 0,
        floor((MaxAlt - MinAlt) / AltStep) + 1,
        conflict_free_traj_step(LOS, CD, LOS2, CD2, UseLOS2, B, T, B2, T2,
                                so, vo, AL, trajseq, timeseq, timestep),
        -1))" alt_bands nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (conflict_free_traj_step const-decl "bool" alt_bands nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (Bands? const-decl "bool" int_bands nil)
    (TimeSeq type-eq-decl nil alt_bands nil)
    (TrajSeq type-eq-decl nil alt_bands nil)
    (Traj type-eq-decl nil int_bands nil)
    (IntBand type-eq-decl nil int_bands nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vsLevelOut const-decl "[Vect3, Vect3]" vsLevelOut aviation)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (in? const-decl "bool" real_bands nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (RealBand type-eq-decl nil real_bands nil)
    (kinematic_alt_bands const-decl "list[RealBand]" alt_bands nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (kinematic_alt_bands_correct? const-decl "bool" alt_bands nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (string type-eq-decl nil strings nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vsLevelOutTimes const-decl "[real, real, real, real, real, real]"
     vsLevelOut aviation)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (kinematic_alt_bands_def3-1 nil 3661271471
   ("" (skeep) (("" (skoletin) (("" (postpone) nil nil)) nil)) nil) nil
   shostak))
 (first_nat_TCC1 0
  (first_nat_TCC1-1 nil 3661277452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (first_nat subtype "alt_bands.i" "nat")))
 (first_nat_TCC2 0
  (first_nat_TCC2-2 "" 3794670912
   (""
    (case "FORALL (mini, maxi: nat, P: pred[nat], eps: Sign): eps=1 IMPLIES
        nonempty?[int]
            ({i: int |
                ((EXISTS (j: nat): mini <= j AND j <= maxi AND P(j))
                  IMPLIES
                  (mini <= i AND
                    i <= maxi AND
                     P(i) AND
                      (FORALL (z: nat):
                         mini <= z AND z <= maxi AND P(z) IMPLIES
                          eps * z >= eps * i)))
                 AND
                 ((FORALL (j: nat):
                     mini <= j AND j <= maxi IMPLIES NOT P(j))
                   IMPLIES i = -1)})")
    (("1" (skeep)
      (("1" (typepred "eps")
        (("1" (hide -1)
          (("1" (split) (("1" (assert) nil nil) ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "maxi")
        (("1" (skeep)
          (("1" (replaces -1)
            (("1" (assert)
              (("1" (case "NOT mini=0")
                (("1" (expand "nonempty?")
                  (("1" (expand "empty?")
                    (("1" (expand "member")
                      (("1" (inst - "-1")
                        (("1" (assert)
                          (("1" (skosimp*) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (assert)
                    (("2" (expand "nonempty?")
                      (("2" (expand "empty?")
                        (("2" (case "P(0)")
                          (("1" (inst - "0")
                            (("1" (expand "member")
                              (("1"
                                (split)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (inst - "0")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst - "-1")
                            (("2" (expand "member")
                              (("2"
                                (skosimp*)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (skolem 1 "i")
            (("2" (flatten)
              (("2" (skeep)
                (("2" (insteep -)
                  (("2" (expand "nonempty?")
                    (("2" (expand "empty?")
                      (("2" (expand "member")
                        (("2" (case "1+i<mini")
                          (("1" (hide (-2 -3))
                            (("1" (inst - "-1")
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skosimp*)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (case "x=-1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case "P(i+1)")
                                    (("1"
                                      (inst -5 "i+1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split +)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst + "z")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst - "1+i")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst - "-1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skeep -)
                                          (("2"
                                            (inst + "j")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst - "x")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split +)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (split -)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (case "z=i+1")
                                                      (("1"
                                                        (inst - "j")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst - "z")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst + "j")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (inst - "j")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2) (("3" (skeep*) (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skeep*) (("3" (assert) nil nil)) nil)) nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak
   (first_nat subtype
    "real_defs.max((number_fields.+)((number_fields.-)(alt_bands.maxi, alt_bands.mini), 2), 0)"
    "naturalnumber"))
  (first_nat_TCC2-1 nil 3661277452
   (""
    (case "FORALL (mini, maxi: nat, P: pred[nat], eps: Sign): eps=1 IMPLIES
        nonempty?[int]
            ({i: int |
                ((EXISTS (j: nat): mini <= j AND j <= maxi AND P(j))
                  IMPLIES
                  (mini <= i AND
                    i <= maxi AND
                     P(i) AND
                      (FORALL (z: nat):
                         mini <= z AND z <= maxi AND P(z) IMPLIES
                          eps * z >= eps * i)))
                 AND
                 ((FORALL (j: nat):
                     mini <= j AND j <= maxi IMPLIES NOT P(j))
                   IMPLIES i = -1)})")
    (("1" (skeep)
      (("1" (typepred "eps")
        (("1" (hide -1)
          (("1" (split)
            (("1" (replaces -1)
              (("1" (assert) (("1" (inst?) nil nil)) nil)) nil)
             ("2" (replace -1)
              (("2" (assert)
                (("2"
                  (name "PZ"
                        "LAMBDA (j:nat): IF mini<=j AND j<=maxi THEN P(maxi+mini-j) ELSE P(j) ENDIF")
                  (("1" (inst - "mini" "maxi" "PZ" "1")
                    (("1" (expand "nonempty?")
                      (("1" (expand "empty?")
                        (("1" (expand "member")
                          (("1" (skeep)
                            (("1" (case "x=-1")
                              (("1"
                                (inst - "-1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (skeep*)
                                    (("1"
                                      (inst + "maxi+mini-j")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "PZ" 1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (case "NOT (mini<=x AND x<=maxi)")
                                  (("1"
                                    (split -)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (inst + "j")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (inst - "maxi+mini-x")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split +)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split -)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "PZ" (-1 -2))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst
                                                         -
                                                         "maxi+mini-z")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (skeep -)
                                                  (("2"
                                                    (inst
                                                     +
                                                     "maxi+mini-j!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "PZ" 1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (skeep*)
                                              (("2"
                                                (inst - "maxi+mini-j")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "PZ")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep*) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "maxi")
        (("1" (skeep)
          (("1" (replaces -1)
            (("1" (assert)
              (("1" (case "NOT mini=0")
                (("1" (expand "nonempty?")
                  (("1" (expand "empty?")
                    (("1" (expand "member")
                      (("1" (inst - "-1")
                        (("1" (assert)
                          (("1" (skosimp*) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (assert)
                    (("2" (expand "nonempty?")
                      (("2" (expand "empty?")
                        (("2" (case "P(0)")
                          (("1" (inst - "0")
                            (("1" (expand "member")
                              (("1"
                                (split)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (inst - "0")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst - "-1")
                            (("2" (expand "member")
                              (("2"
                                (skosimp*)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (skolem 1 "i")
            (("2" (flatten)
              (("2" (skeep)
                (("2" (replaces -1)
                  (("2" (insteep -)
                    (("2" (expand "nonempty?")
                      (("2" (expand "empty?")
                        (("2" (expand "member")
                          (("2" (case "1+i<mini")
                            (("1" (hide (-2 -3))
                              (("1"
                                (inst - "-1")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skosimp*)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (skeep)
                                (("2"
                                  (case "x=-1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case "P(i+1)")
                                      (("1"
                                        (inst -5 "i+1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split +)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst + "z")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst - "1+i")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst - "-1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skeep -)
                                            (("2"
                                              (inst + "j")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst - "x")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split +)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (split -)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (case "z=i+1")
                                                        (("1"
                                                          (inst - "j")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst - "z")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst + "j")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (inst - "j")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2) (("3" (skeep*) (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skeep*) (("3" (assert) nil nil)) nil)) nil))
    nil)
   ((member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (Sign type-eq-decl nil sign reals) (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (first_nat subtype
    "real_defs.max((number_fields.+)((number_fields.-)(alt_bands.maxi, alt_bands.mini), 2), 0)"
    "naturalnumber")))
 (first_nat_TCC3 0
  (first_nat_TCC3-1 nil 3663942941 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil
   (first_nat subtype "(number_fields.-)(1)"
    "{i: integers.int | booleans.AND((booleans.IMPLIES((EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<=(alt_bands.mini, j), booleans.AND(reals.<=(j, alt_bands.maxi), alt_bands.P(j)))), (booleans.AND(reals.<=(alt_bands.mini, i), booleans.AND(reals.<=(i, alt_bands.maxi), booleans.AND(alt_bands.P(i), FORALL (z: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(alt_bands.mini, z), booleans.AND(reals.<=(z, alt_bands.maxi), alt_bands.P(z))), reals.>=(number_fields.*(alt_bands.eps, z), number_fields.*(alt_bands.eps, i))))))))), (booleans.IMPLIES((FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(alt_bands.mini, j), reals.<=(j, alt_bands.maxi)), (booleans.NOT)(alt_bands.P(j)))), i = (number_fields.-)(1))))}")))
 (first_nat_TCC4 0
  (first_nat_TCC4-1 nil 3663942941 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (first_nat subtype "alt_bands.mini"
    "{i: integers.int | booleans.AND((booleans.IMPLIES((EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<=(alt_bands.mini, j), booleans.AND(reals.<=(j, alt_bands.maxi), alt_bands.P(j)))), (booleans.AND(reals.<=(alt_bands.mini, i), booleans.AND(reals.<=(i, alt_bands.maxi), booleans.AND(alt_bands.P(i), FORALL (z: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(alt_bands.mini, z), booleans.AND(reals.<=(z, alt_bands.maxi), alt_bands.P(z))), reals.>=(number_fields.*(alt_bands.eps, z), number_fields.*(alt_bands.eps, i))))))))), (booleans.IMPLIES((FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(alt_bands.mini, j), reals.<=(j, alt_bands.maxi)), (booleans.NOT)(alt_bands.P(j)))), i = (number_fields.-)(1))))}")))
 (first_nat_TCC5 0
  (first_nat_TCC5-1 nil 3663942941 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (first_nat termination
    "alt_bands.first_nat((number_fields.+)(alt_bands.mini, 1), alt_bands.maxi, alt_bands.P, alt_bands.eps)"
    "nil")))
 (first_nat_TCC6 0
  (first_nat_TCC6-1 nil 3663942941
   ("" (skeep*)
    (("" (name "G" "v(mini + 1, maxi, P, eps)")
      (("1" (replaces -1)
        (("1" (assert)
          (("1" (typepred "G")
            (("1" (split +)
              (("1" (flatten)
                (("1" (skeep)
                  (("1" (case "j /= mini")
                    (("1" (flatten)
                      (("1" (split -)
                        (("1" (ground)
                          (("1" (skeep 2)
                            (("1" (inst - "z") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst + "j") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (inst - "j") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 4) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((int_times_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals) (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (first_nat subtype
    "alt_bands.first_nat((number_fields.+)(alt_bands.mini, 1), alt_bands.maxi, alt_bands.P, alt_bands.eps)"
    "{i: integers.int | booleans.AND((booleans.IMPLIES((EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<=(alt_bands.mini, j), booleans.AND(reals.<=(j, alt_bands.maxi), alt_bands.P(j)))), (booleans.AND(reals.<=(alt_bands.mini, i), booleans.AND(reals.<=(i, alt_bands.maxi), booleans.AND(alt_bands.P(i), FORALL (z: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(alt_bands.mini, z), booleans.AND(reals.<=(z, alt_bands.maxi), alt_bands.P(z))), reals.>=(number_fields.*(alt_bands.eps, z), number_fields.*(alt_bands.eps, i))))))))), (booleans.IMPLIES((FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(alt_bands.mini, j), reals.<=(j, alt_bands.maxi)), (booleans.NOT)(alt_bands.P(j)))), i = (number_fields.-)(1))))}")))
 (first_nat_TCC7 0
  (first_nat_TCC7-1 nil 3663942941 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (first_nat subtype "alt_bands.maxi"
    "{i: integers.int | booleans.AND((booleans.IMPLIES((EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<=(alt_bands.mini, j), booleans.AND(reals.<=(j, alt_bands.maxi), alt_bands.P(j)))), (booleans.AND(reals.<=(alt_bands.mini, i), booleans.AND(reals.<=(i, alt_bands.maxi), booleans.AND(alt_bands.P(i), FORALL (z: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(alt_bands.mini, z), booleans.AND(reals.<=(z, alt_bands.maxi), alt_bands.P(z))), reals.>=(number_fields.*(alt_bands.eps, z), number_fields.*(alt_bands.eps, i))))))))), (booleans.IMPLIES((FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(alt_bands.mini, j), reals.<=(j, alt_bands.maxi)), (booleans.NOT)(alt_bands.P(j)))), i = (number_fields.-)(1))))}")))
 (first_nat_TCC8 0
  (first_nat_TCC8-1 nil 3663942941 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil
   (first_nat subtype "(number_fields.-)(1)"
    "{i: integers.int | booleans.AND((booleans.IMPLIES((EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<=(alt_bands.mini, j), booleans.AND(reals.<=(j, alt_bands.maxi), alt_bands.P(j)))), (booleans.AND(reals.<=(alt_bands.mini, i), booleans.AND(reals.<=(i, alt_bands.maxi), booleans.AND(alt_bands.P(i), FORALL (z: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(alt_bands.mini, z), booleans.AND(reals.<=(z, alt_bands.maxi), alt_bands.P(z))), reals.>=(number_fields.*(alt_bands.eps, z), number_fields.*(alt_bands.eps, i))))))))), (booleans.IMPLIES((FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(alt_bands.mini, j), reals.<=(j, alt_bands.maxi)), (booleans.NOT)(alt_bands.P(j)))), i = (number_fields.-)(1))))}")))
 (first_nat_TCC9 0
  (first_nat_TCC9-1 nil 3663942941 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (first_nat subtype "(number_fields.-)(alt_bands.maxi, 1)" "nat")))
 (first_nat_TCC10 0
  (first_nat_TCC10-1 nil 3663942941 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (first_nat termination
    "alt_bands.first_nat(alt_bands.mini, (number_fields.-)(alt_bands.maxi, 1), alt_bands.P, alt_bands.eps)"
    "nil")))
 (first_nat_TCC11 0
  (first_nat_TCC11-1 nil 3663942941
   ("" (skeep*)
    (("" (name "G" "v(mini, maxi - 1, P, eps)")
      (("1" (replaces -1)
        (("1" (assert)
          (("1" (eval-expr "FALSE")
            (("1" (replaces -1)
              (("1" (typepred "G")
                (("1" (split +)
                  (("1" (flatten)
                    (("1" (skeep)
                      (("1" (case "j /= maxi")
                        (("1" (flatten)
                          (("1" (split -)
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skeep*)
                                    (("1"
                                      (inst - "z")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (inst + "j")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (skeep*)
                        (("2" (inst - "j") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil) ("3" (assert) nil nil))
      nil))
    nil)
   ((int_times_int_is_int application-judgement "int" integers nil)
    (FALSE const-decl "bool" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals) (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (first_nat subtype
    "alt_bands.first_nat(alt_bands.mini, (number_fields.-)(alt_bands.maxi, 1), alt_bands.P, alt_bands.eps)"
    "{i: integers.int | booleans.AND((booleans.IMPLIES((EXISTS (j: naturalnumbers.nat): booleans.AND(reals.<=(alt_bands.mini, j), booleans.AND(reals.<=(j, alt_bands.maxi), alt_bands.P(j)))), (booleans.AND(reals.<=(alt_bands.mini, i), booleans.AND(reals.<=(i, alt_bands.maxi), booleans.AND(alt_bands.P(i), FORALL (z: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(alt_bands.mini, z), booleans.AND(reals.<=(z, alt_bands.maxi), alt_bands.P(z))), reals.>=(number_fields.*(alt_bands.eps, z), number_fields.*(alt_bands.eps, i))))))))), (booleans.IMPLIES((FORALL (j: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.<=(alt_bands.mini, j), reals.<=(j, alt_bands.maxi)), (booleans.NOT)(alt_bands.P(j)))), i = (number_fields.-)(1))))}")))
 (first_green_alt_generic_TCC1 0
  (first_green_alt_generic_TCC1-1 nil 3661606177
   ("" (skeep*)
    (("" (replaces -2 +)
      (("" (lift-if +)
        (("" (hide -)
          (("" (ground)
            (("" (mult-by 2 "1/AltStep") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (nnreal type-eq-decl nil real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil (first_green_alt_generic subtype "alt_bands.lower" "nat")))
 (first_green_alt_generic_TCC2 0
  (first_green_alt_generic_TCC2-1 nil 3661606177
   ("" (skeep*)
    (("" (hide -2)
      (("" (replaces -1)
        (("" (lift-if)
          (("" (assert)
            (("" (ground)
              (("1" (case "MaxAlt-MinAlt>=0")
                (("1" (mult-by -1 "1/AltStep") (("1" (assert) nil nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (mult-by 3 "1/AltStep") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil (first_green_alt_generic subtype "alt_bands.upper" "nat")))
 (first_green_alt_generic_def_TCC1 0
  (first_green_alt_generic_def_TCC1-1 nil 3661689167
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (first_green_alt_generic_def subtype "alt_bands.MaxAlt"
    "{MaxAlt | reals.<=(alt_bands.MinAlt, alt_bands.MaxAlt)}")))
 (first_green_alt_generic_def 0
  (first_green_alt_generic_def-2 nil 3661697635
   ("" (skeep*)
    ((""
      (name "kz" "first_green_alt_generic(LOS,
                                                  CD,
                                                  LOS2,
                                                  CD2,
                                                  UseLOS2,
                                                  B,
                                                  T,
                                                  B2,
                                                  T2,
                                                  so,
                                                  vo,
                                                  AL,
                                                  MinAlt,
                                                  MaxAlt,
                                                  AltStep,
                                                  trajseq,
                                                  timeseq,
                                                  timestep,
                                                  eps)")
      (("" (replace -1)
        ((""
          (name "abg"
                "alt_bands_generic(LOS, CD, LOS2, CD2, UseLOS2, B, T, B2, T2,
                                            so, vo, AL, MinAlt, MaxAlt, AltStep, trajseq,
                                            timeseq, timestep)")
          (("" (replace -1)
            (("" (assert)
              (("" (label "abgname" -1)
                (("" (expand "first_green_alt_generic" :assert? none)
                  ((""
                    (name "upper"
                          "IF eps = 1 THEN floor((MaxAlt - MinAlt) / AltStep) + 1
                                                ELSE floor((so`z - MinAlt) / AltStep)
                                                ENDIF")
                    ((""
                      (name "lower"
                            "IF eps = 1 THEN ceiling((so`z - MinAlt) / AltStep)
                                                ELSE 0
                                                ENDIF")
                      (("" (replace -1)
                        (("" (replace -2)
                          (("" (assert)
                            ((""
                              (case "NOT FORALL (z:int): inrange?(so`z, MinAlt, MaxAlt, AltStep, eps)(z) IFF (lower<=z AND z<=upper)")
                              (("1"
                                (hide (-3 -4 2))
                                (("1"
                                  (skeep)
                                  (("1"
                                    (case "eps = 1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (expand "inrange?")
                                          (("1"
                                            (split)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replaces
                                                   (-3 -4)
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (case
                                                     "((so`z - MinAlt) / AltStep) <= z AND
                                                                         z-1 <=  ((MaxAlt - MinAlt) / AltStep)")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (cross-mult
                                                           1)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (cross-mult
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (replaces
                                                 (-3 -4)
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (case
                                                   "((so`z - MinAlt) / AltStep) <= z
                                                                  AND  z-1 <= ((MaxAlt - MinAlt) / AltStep)")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (cross-mult -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (cross-mult
                                                           -2)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (typepred "eps")
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide 1)
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "inrange?")
                                                        (("1"
                                                          (replaces
                                                           (-2 -3)
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "z<=(so`z - MinAlt) / AltStep")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (cross-mult
                                                                   1)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (replaces
                                                         (-3 -4)
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "inrange?")
                                                            (("2"
                                                              (case
                                                               "z<=(so`z-MinAlt)/AltStep")
                                                              (("1"
                                                                (cross-mult
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (invoke (name "kp" "%1") (! -5 1))
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (replaces -5 :dir rl)
                                    (("1"
                                      (case
                                       "0<=lower AND lower<=upper")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (typepred "kp")
                                          (("1"
                                            (name
                                             "A"
                                             "conflict_free_traj_step(LOS,
                                                                                             CD,
                                                                                             LOS2,
                                                                                             CD2,
                                                                                             UseLOS2,
                                                                                             B,
                                                                                             T,
                                                                                             B2,
                                                                                             T2,
                                                                                             so,
                                                                                             vo,
                                                                                             AL,
                                                                                             trajseq,
                                                                                             timeseq,
                                                                                             timestep)")
                                            (("1"
                                              (expand
                                               "alt_bands_generic")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (invoke
                                                   (case "NOT %1")
                                                   (! 1 1))
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (split +)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skeep*)
                                                            (("1"
                                                              (typepred
                                                               "j")
                                                              (("1"
                                                                (inst-cp
                                                                 -
                                                                 "j")
                                                                (("1"
                                                                  (replace
                                                                   -8)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "j")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (copy
                                                                             "abgname")
                                                                            (("1"
                                                                              (typepred
                                                                               "nat_bands(1 + floor((MaxAlt - MinAlt) / AltStep), A)")
                                                                              (("1"
                                                                                (replaces
                                                                                 -2)
                                                                                (("1"
                                                                                  (expand
                                                                                   "Bands?")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -3
                                                                                       "j")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "i")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "in?")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (case
                                                                                             "upper<=1 + floor((MaxAlt - MinAlt) / AltStep)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "upper"
                                                                                               +)
                                                                                              (("2"
                                                                                                (lift-if
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "(so`z-MinAlt)/AltStep<=(MaxAlt-MinAlt)/AltStep")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (case
                                                                                                           "NOT so`z<=MaxAlt")
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (mult-by
                                                                                                             -1
                                                                                                             "1/AltStep")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (case
                                                                                   "(MaxAlt-MinAlt)/AltStep>=0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (cross-mult
                                                                                     1)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (copy
                                                               "abgname")
                                                              (("2"
                                                                (typepred
                                                                 "nat_bands(1 + floor((MaxAlt - MinAlt) / AltStep), A)")
                                                                (("1"
                                                                  (replaces
                                                                   -2)
                                                                  (("1"
                                                                    (expand
                                                                     "Bands?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -3
                                                                           "j")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -5
                                                                                       "j"
                                                                                       "j!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "in?")
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (inst
                                                                                         -11
                                                                                         "j")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "upper<=1 + floor((MaxAlt - MinAlt) / AltStep)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "upper"
                                                                                     1)
                                                                                    (("2"
                                                                                      (lift-if
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           +)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (case
                                                                                               "so`z<=MaxAlt")
                                                                                              (("1"
                                                                                                (mult-by
                                                                                                 -1
                                                                                                 "1/AltStep")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "(MaxAlt-MinAlt)/AltStep>=0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (cross-mult
                                                                     1)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (replace
                                                       -1
                                                       1
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (invoke
                                                           (case
                                                            "NOT %1")
                                                           (! 1 1))
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "kp")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep
                                                                         4)
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "j")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     -7
                                                                     "kp")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -1
                                                             1
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (invoke
                                                                 (case
                                                                  "NOT %1")
                                                                 (!
                                                                  1
                                                                  1))
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (split
                                                                     +)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -5)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (copy
                                                                                 "abgname")
                                                                                (("1"
                                                                                  (typepred
                                                                                   "nat_bands(1 + floor((MaxAlt - MinAlt) / AltStep), A)")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -2
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "Bands?")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -3
                                                                                           "kp")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (skeep
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "j")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "in?")
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "upper<=1 + floor((MaxAlt - MinAlt) / AltStep)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   (2
                                                                                                    3
                                                                                                    4
                                                                                                    5))
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "upper"
                                                                                                     +)
                                                                                                    (("2"
                                                                                                      (lift-if)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "so`z<=MaxAlt")
                                                                                                              (("1"
                                                                                                                (mult-by
                                                                                                                 -1
                                                                                                                 "1/AltStep")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "(MaxAlt-MinAlt)/AltStep>=0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skeep
                                                                             4)
                                                                            (("2"
                                                                              (inst
                                                                               +
                                                                               "j")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten
                                                                       +)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (skeep
                                                                           -)
                                                                          (("2"
                                                                            (copy
                                                                             "abgname")
                                                                            (("2"
                                                                              (case
                                                                               "NOT nth(abg,z)`lb>=0")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "nat_bands(1 + floor((MaxAlt - MinAlt) / AltStep), A)")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "Bands?")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "z")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "(MaxAlt-MinAlt)/AltStep>=0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (cross-mult
                                                                                         1)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "in?")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "FORALL (aa,bb,cc:real): bb<=aa AND bb>=cc IMPLIES aa>=cc")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "kp"
                                                                                         "nth(abg,z)`lb"
                                                                                         "0")
                                                                                        (("1"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1
                                                                   1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (flatten
                                                                       +)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (skeep
                                                                           3)
                                                                          (("2"
                                                                            (split
                                                                             -3)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "j")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -8
                                                                                     "j")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (copy
                                                                                             "abgname")
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "nat_bands(1 + floor((MaxAlt - MinAlt) / AltStep), A)")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -2
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "Bands?")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -3
                                                                                                       "j")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             +
                                                                                                             "i")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "in?")
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (case
                                                                                                             "upper<=1 + floor((MaxAlt - MinAlt) / AltStep)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "upper"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (lift-if
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "so`z<=MaxAlt")
                                                                                                                        (("1"
                                                                                                                          (mult-by
                                                                                                                           -1
                                                                                                                           "1/AltStep")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "(MaxAlt-MinAlt)/AltStep>=0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (cross-mult
                                                                                                   1)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (case
                                                                                     "nth(abg,i)`lb>=0")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "in?")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "FORALL (aa,bb,cc:real): bb<=aa AND bb>=cc IMPLIES aa>=cc")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j"
                                                                                               "nth(abg,i)`lb"
                                                                                               "0")
                                                                                              (("1"
                                                                                                (split
                                                                                                 -)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (copy
                                                                                       "abgname")
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "nat_bands(1 + floor((MaxAlt - MinAlt) / AltStep), A)")
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -2
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "Bands?")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "i")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "(MaxAlt-MinAlt)/AltStep>=0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (cross-mult
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               +
                                                                               "kp")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "kp")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (copy
                                                                                         "abgname")
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "nat_bands(1 + floor((MaxAlt - MinAlt) / AltStep), A)")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -2
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "Bands?")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -3
                                                                                                   "kp")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "in?")
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (case
                                                                                                         "upper<=1 + floor((MaxAlt - MinAlt) / AltStep)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "upper"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (lift-if
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 +)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (case
                                                                                                                       "so`z<=MaxAlt")
                                                                                                                      (("1"
                                                                                                                        (mult-by
                                                                                                                         -1
                                                                                                                         "1/AltStep")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (case
                                                                                             "(MaxAlt-MinAlt)/AltStep>=0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (cross-mult
                                                                                               1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (replaces (-2 -3) :dir rl)
                                          (("2"
                                            (split +)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "(so`z-MinAlt)/AltStep>=0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (cross-mult 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lift-if)
                                              (("2"
                                                (split +)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "(so`z-MinAlt)<=(MaxAlt-MinAlt)")
                                                      (("1"
                                                        (mult-by
                                                         -1
                                                         "1/AltStep")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (case
                                                     "(so`z-MinAlt)>=0")
                                                    (("1"
                                                      (mult-by
                                                       -1
                                                       "1/AltStep")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (hide -5)
                                    (("2"
                                      (expand "upper" +)
                                      (("2"
                                        (lift-if 1)
                                        (("2"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case "MaxAlt-MinAlt>=0")
                                              (("1"
                                                (mult-by
                                                 -1
                                                 "1/AltStep")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (mult-by -6 "1/AltStep")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide 2)
                                  (("3"
                                    (replaces -2 1 :dir rl)
                                    (("3"
                                      (hide (-1 -2 -3 -4))
                                      (("3"
                                        (lift-if)
                                        (("3"
                                          (ground)
                                          (("3"
                                            (mult-by -3 "1/AltStep")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (j skolem-const-decl
     "(inrange?(so`z, MinAlt, MaxAlt, AltStep, eps))" alt_bands nil)
    (j skolem-const-decl "nat" alt_bands nil)
    (eps skolem-const-decl "Sign" alt_bands nil)
    (AltStep skolem-const-decl "posreal" alt_bands nil)
    (MaxAlt skolem-const-decl "posreal" alt_bands nil)
    (MinAlt skolem-const-decl "nnreal" alt_bands nil)
    (so skolem-const-decl "Vect3" alt_bands nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (upper skolem-const-decl "int" alt_bands nil)
    (in? const-decl "bool" int_bands nil)
    (nat_bands const-decl "(Bands?(maxi, 0, maxi, IP, -1))" int_bands
     nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (RealBand type-eq-decl nil real_bands nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (first_nat def-decl "{i: int |
   ((EXISTS (j: nat): mini <= j AND j <= maxi AND P(j)) IMPLIES
     (mini <= i AND
       i <= maxi AND
        P(i) AND
         (FORALL (z: nat):
            mini <= z AND z <= maxi AND P(z) IMPLIES eps * z >= eps * i)))
    AND
    ((FORALL (j: nat): mini <= j AND j <= maxi IMPLIES NOT P(j)) IMPLIES
      i = -1)}" alt_bands nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (inrange? const-decl "bool" alt_bands nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IntBand type-eq-decl nil int_bands nil)
    (Bands? const-decl "bool" int_bands nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (conflict_free_traj_step const-decl "bool" alt_bands nil)
    (alt_bands_generic const-decl
     "(Bands?(floor((MaxAlt - MinAlt) / AltStep) + 1, 0,
        floor((MaxAlt - MinAlt) / AltStep) + 1,
        conflict_free_traj_step(LOS, CD, LOS2, CD2, UseLOS2, B, T, B2, T2,
                                so, vo, AL, trajseq, timeseq, timestep),
        -1))" alt_bands nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (string type-eq-decl nil strings nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Traj type-eq-decl nil int_bands nil)
    (TrajSeq type-eq-decl nil alt_bands nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TimeSeq type-eq-decl nil alt_bands nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (first_green_alt_generic const-decl "int" alt_bands nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (first_green_alt_generic_def-1 nil 3661694462
   ("" (skeep*)
    (("" (skoletin)
      (("" (skoletin)
        (("" (expand "first_green_alt_generic" :assert? none)
          ((""
            (name "upper"
                  "IF eps = 1 THEN floor((MaxAlt - MinAlt) / AltStep) + 1
                    ELSE floor((so`z - MinAlt) / AltStep)
                    ENDIF")
            ((""
              (name "lower"
                    "IF eps = 1 THEN ceiling((so`z - MinAlt) / AltStep)
                    ELSE 0
                    ENDIF")
              (("" (replace -1)
                (("" (replace -2)
                  (("" (assert)
                    (("" (assert)
                      ((""
                        (case "NOT FORALL (z:int): inrange?(so`z, MinAlt, MaxAlt, AltStep, eps)(z) IFF (lower<=z AND z<=upper)")
                        (("1" (hide (-3 -4 2))
                          (("1" (skeep)
                            (("1" (case "eps = 1")
                              (("1"
                                (assert)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (expand "inrange?")
                                    (("1"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replaces (-3 -4) :dir rl)
                                            (("1"
                                              (case
                                               "((so`z - MinAlt) / AltStep) <= z AND
                     z-1 <=  ((MaxAlt - MinAlt) / AltStep)")
                                              (("1" (ground) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (cross-mult 1)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (cross-mult 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (replaces (-3 -4) :dir rl)
                                          (("2"
                                            (case
                                             "((so`z - MinAlt) / AltStep) <= z
              AND  z-1 <= ((MaxAlt - MinAlt) / AltStep)")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (cross-mult -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (cross-mult -2)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (typepred "eps")
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide 1)
                                        (("2"
                                          (replaces -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "inrange?")
                                                  (("1"
                                                    (replaces
                                                     (-2 -3)
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "z<=(so`z - MinAlt) / AltStep")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (cross-mult
                                                             1)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (replaces
                                                   (-3 -4)
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "inrange?")
                                                      (("2"
                                                        (case
                                                         "z<=(so`z-MinAlt)/AltStep")
                                                        (("1"
                                                          (cross-mult
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (invoke (name "kz" "%1") (! -5 2))
                          (("1" (replaces -1)
                            (("1" (replaces -5)
                              (("1"
                                (case "0<=lower AND lower<=upper")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (typepred "kz")
                                    (("1"
                                      (name
                                       "A"
                                       "conflict_free_traj_step(LOS,
                                         CD,
                                         LOS2,
                                         CD2,
                                         UseLOS2,
                                         B,
                                         T,
                                         B2,
                                         T2,
                                         so,
                                         vo,
                                         AL,
                                         trajseq,
                                         timeseq,
                                         timestep)")
                                      (("1"
                                        (expand "alt_bands_generic")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (invoke
                                             (case "NOT %1")
                                             (! 1 1))
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (split +)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skeep*)
                                                      (("1"
                                                        (typepred "j")
                                                        (("1"
                                                          (inst-cp
                                                           -
                                                           "j")
                                                          (("1"
                                                            (replace
                                                             -8)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "j")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil)
                           ("3" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (first_red_alt_generic_def 0
  (first_red_alt_generic_def-1 nil 3662906103
   ("" (skeep*)
    ((""
      (name "kz" "first_red_alt_generic(LOS,
                                                                CD,
                                                                LOS2,
                                                                CD2,
                                                                UseLOS2,
                                                                B,
                                                                T,
                                                                B2,
                                                                T2,
                                                                so,
                                                                vo,
                                                                AL,
                                                                MinAlt,
                                                                MaxAlt,
                                                                AltStep,
                                                                trajseq,
                                                                timeseq,
                                                                timestep,
                                                                eps)")
      (("" (replace -1)
        ((""
          (name "abg"
                "alt_bands_generic(LOS, CD, LOS2, CD2, UseLOS2, B, T, B2, T2,
                                                          so, vo, AL, MinAlt, MaxAlt, AltStep, trajseq,
                                                          timeseq, timestep)")
          (("" (replace -1)
            (("" (assert)
              (("" (label "abgname" -1)
                (("" (expand "first_red_alt_generic" :assert? none)
                  ((""
                    (name "upper"
                          "IF eps = 1 THEN floor((MaxAlt - MinAlt) / AltStep) + 1
                                                              ELSE floor((so`z - MinAlt) / AltStep)
                                                              ENDIF")
                    ((""
                      (name "lower"
                            "IF eps = 1 THEN ceiling((so`z - MinAlt) / AltStep)
                                                              ELSE 0
                                                              ENDIF")
                      (("" (replace -1)
                        (("" (replace -2)
                          (("" (assert)
                            ((""
                              (case "NOT FORALL (z:int): inrange?(so`z, MinAlt, MaxAlt, AltStep, eps)(z) IFF (lower<=z AND z<=upper)")
                              (("1"
                                (hide (-3 -4 2))
                                (("1"
                                  (skeep)
                                  (("1"
                                    (case "eps = 1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (expand "inrange?")
                                          (("1"
                                            (split)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replaces
                                                   (-3 -4)
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (case
                                                     "((so`z - MinAlt) / AltStep) <= z AND
                                                                                                   z-1 <=  ((MaxAlt - MinAlt) / AltStep)")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (cross-mult
                                                           1)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (cross-mult
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (replaces
                                                 (-3 -4)
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (case
                                                   "((so`z - MinAlt) / AltStep) <= z
                                                                                            AND  z-1 <= ((MaxAlt - MinAlt) / AltStep)")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (cross-mult -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (cross-mult
                                                           -2)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (typepred "eps")
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide 1)
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "inrange?")
                                                        (("1"
                                                          (replaces
                                                           (-2 -3)
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "z<=(so`z - MinAlt) / AltStep")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (cross-mult
                                                                   1)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (replaces
                                                         (-3 -4)
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "inrange?")
                                                            (("2"
                                                              (case
                                                               "z<=(so`z-MinAlt)/AltStep")
                                                              (("1"
                                                                (cross-mult
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (invoke (name "kp" "%1") (! -5 1))
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (replaces -5 :dir rl)
                                    (("1"
                                      (case
                                       "0<=lower AND lower<=upper")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (typepred "kp")
                                          (("1"
                                            (name
                                             "A"
                                             "conflict_free_traj_step(LOS,
                                                                                                                       CD,
                                                                                                                       LOS2,
                                                                                                                       CD2,
                                                                                                                       UseLOS2,
                                                                                                                       B,
                                                                                                                       T,
                                                                                                                       B2,
                                                                                                                       T2,
                                                                                                                       so,
                                                                                                                       vo,
                                                                                                                       AL,
                                                                                                                       trajseq,
                                                                                                                       timeseq,
                                                                                                                       timestep)")
                                            (("1"
                                              (expand
                                               "alt_bands_generic")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (invoke
                                                   (case "NOT %1")
                                                   (! 1 1))
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (split +)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skeep*)
                                                            (("1"
                                                              (typepred
                                                               "j")
                                                              (("1"
                                                                (inst-cp
                                                                 -
                                                                 "j")
                                                                (("1"
                                                                  (replace
                                                                   -7)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         2
                                                                         "j")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (copy
                                                                             "abgname")
                                                                            (("1"
                                                                              (typepred
                                                                               "nat_bands(1 + floor((MaxAlt - MinAlt) / AltStep), A)")
                                                                              (("1"
                                                                                (replaces
                                                                                 -2)
                                                                                (("1"
                                                                                  (expand
                                                                                   "Bands?")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -3
                                                                                       "j")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (skolem
                                                                                                 -
                                                                                                 "i")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "i")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "in?")
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (case
                                                                                             "upper<=1 + floor((MaxAlt - MinAlt) / AltStep)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "upper"
                                                                                               +)
                                                                                              (("2"
                                                                                                (lift-if
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "(so`z-MinAlt)/AltStep<=(MaxAlt-MinAlt)/AltStep")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (case
                                                                                                           "NOT so`z<=MaxAlt")
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (mult-by
                                                                                                             -1
                                                                                                             "1/AltStep")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (case
                                                                                   "(MaxAlt-MinAlt)/AltStep>=0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (cross-mult
                                                                                     1)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (copy
                                                               "abgname")
                                                              (("2"
                                                                (typepred
                                                                 "nat_bands(1 + floor((MaxAlt - MinAlt) / AltStep), A)")
                                                                (("1"
                                                                  (replaces
                                                                   -2)
                                                                  (("1"
                                                                    (expand
                                                                     "Bands?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -3
                                                                           "j_1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -3
                                                                                   "j_1")
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -8
                                                                                       "j_1")
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 -3
                                                                                 "j_1")
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "i!1")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "in?")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst
                                                                                   -8
                                                                                   "j_1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (case
                                                                                 "upper<=1 + floor((MaxAlt - MinAlt) / AltStep)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "upper"
                                                                                     1)
                                                                                    (("2"
                                                                                      (lift-if
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           +)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (case
                                                                                               "so`z<=MaxAlt")
                                                                                              (("1"
                                                                                                (mult-by
                                                                                                 -1
                                                                                                 "1/AltStep")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "(MaxAlt-MinAlt)/AltStep>=0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (cross-mult
                                                                     1)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (replace
                                                       -1
                                                       1
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (invoke
                                                           (case
                                                            "NOT %1")
                                                           (! 1 1))
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (inst
                                                                           -7
                                                                           "kp")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp
                                                                         4)
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "j!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     -7
                                                                     "kp")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -1
                                                             1
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (invoke
                                                                 (case
                                                                  "NOT %1")
                                                                 (!
                                                                  1
                                                                  1))
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -6)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (copy
                                                                               "abgname")
                                                                              (("1"
                                                                                (typepred
                                                                                 "nat_bands(1 + floor((MaxAlt - MinAlt) / AltStep), A)")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -2
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "Bands?")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -3
                                                                                         "kp")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -)
                                                                                            (("1"
                                                                                              (skeep
                                                                                               -)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "in?")
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skosimp
                                                                                               -)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "z!1")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "in?")
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (case
                                                                                               "upper<=1 + floor((MaxAlt - MinAlt) / AltStep)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 (2
                                                                                                  3
                                                                                                  4
                                                                                                  5))
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "upper"
                                                                                                   +)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         +)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             "so`z<=MaxAlt")
                                                                                                            (("1"
                                                                                                              (mult-by
                                                                                                               -1
                                                                                                               "1/AltStep")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "(MaxAlt-MinAlt)/AltStep>=0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (cross-mult
                                                                                     1)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp
                                                                           3)
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "j!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("2"
                                                                    (flatten
                                                                     +)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skeep
                                                                         4)
                                                                        (("2"
                                                                          (split
                                                                           -)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "j")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "j")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (copy
                                                                                           "abgname")
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "nat_bands(1 + floor((MaxAlt - MinAlt) / AltStep), A)")
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -2
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "Bands?")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -3
                                                                                                     "j")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (skolem
                                                                                                             -
                                                                                                             "i")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -20
                                                                                                               "i")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "in?")
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (case
                                                                                                           "upper<=1 + floor((MaxAlt - MinAlt) / AltStep)")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "upper"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (lift-if
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (case
                                                                                                                       "so`z<=MaxAlt")
                                                                                                                      (("1"
                                                                                                                        (mult-by
                                                                                                                         -1
                                                                                                                         "1/AltStep")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case
                                                                                               "(MaxAlt-MinAlt)/AltStep>=0")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (cross-mult
                                                                                                 1)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "j")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skolem
                                                                             4
                                                                             "jj")
                                                                            (("2"
                                                                              (inst
                                                                               +
                                                                               "jj")
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (replaces (-2 -3) :dir rl)
                                          (("2"
                                            (split +)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "(so`z-MinAlt)/AltStep>=0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (cross-mult 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lift-if)
                                              (("2"
                                                (split +)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "(so`z-MinAlt)<=(MaxAlt-MinAlt)")
                                                      (("1"
                                                        (mult-by
                                                         -1
                                                         "1/AltStep")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (case
                                                     "(so`z-MinAlt)>=0")
                                                    (("1"
                                                      (mult-by
                                                       -1
                                                       "1/AltStep")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (hide -5)
                                    (("2"
                                      (expand "upper" +)
                                      (("2"
                                        (lift-if 1)
                                        (("2"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case "MaxAlt-MinAlt>=0")
                                              (("1"
                                                (mult-by
                                                 -1
                                                 "1/AltStep")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (mult-by -6 "1/AltStep")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide 2)
                                  (("3"
                                    (replaces -2 1 :dir rl)
                                    (("3"
                                      (hide (-1 -2 -3 -4))
                                      (("3"
                                        (lift-if)
                                        (("3"
                                          (ground)
                                          (("3"
                                            (mult-by -3 "1/AltStep")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (j skolem-const-decl
     "(inrange?(so`z, MinAlt, MaxAlt, AltStep, eps))" alt_bands nil)
    (j_1 skolem-const-decl "nat" alt_bands nil)
    (eps skolem-const-decl "Sign" alt_bands nil)
    (AltStep skolem-const-decl "posreal" alt_bands nil)
    (MaxAlt skolem-const-decl "posreal" alt_bands nil)
    (MinAlt skolem-const-decl "nnreal" alt_bands nil)
    (so skolem-const-decl "Vect3" alt_bands nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (upper skolem-const-decl "int" alt_bands nil)
    (in? const-decl "bool" int_bands nil)
    (nat_bands const-decl "(Bands?(maxi, 0, maxi, IP, -1))" int_bands
     nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (RealBand type-eq-decl nil real_bands nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (first_nat def-decl "{i: int |
   ((EXISTS (j: nat): mini <= j AND j <= maxi AND P(j)) IMPLIES
     (mini <= i AND
       i <= maxi AND
        P(i) AND
         (FORALL (z: nat):
            mini <= z AND z <= maxi AND P(z) IMPLIES eps * z >= eps * i)))
    AND
    ((FORALL (j: nat): mini <= j AND j <= maxi IMPLIES NOT P(j)) IMPLIES
      i = -1)}" alt_bands nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (inrange? const-decl "bool" alt_bands nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IntBand type-eq-decl nil int_bands nil)
    (Bands? const-decl "bool" int_bands nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (conflict_free_traj_step const-decl "bool" alt_bands nil)
    (alt_bands_generic const-decl
     "(Bands?(floor((MaxAlt - MinAlt) / AltStep) + 1, 0,
        floor((MaxAlt - MinAlt) / AltStep) + 1,
        conflict_free_traj_step(LOS, CD, LOS2, CD2, UseLOS2, B, T, B2, T2,
                                so, vo, AL, trajseq, timeseq, timestep),
        -1))" alt_bands nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (string type-eq-decl nil strings nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Traj type-eq-decl nil int_bands nil)
    (TrajSeq type-eq-decl nil alt_bands nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TimeSeq type-eq-decl nil alt_bands nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (first_red_alt_generic const-decl "int" alt_bands nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)))

