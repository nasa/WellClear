(kinematic_bands
 (first_los_search_index_TCC1 0
  (first_los_search_index_TCC1-1 nil 3637424497
   ("" (skeep*)
    (("" (lift-if)
      (("" (lemma "first_los_step_range")
        (("" (inst?)
          (("" (lemma "first_los_step_range")
            (("" (label "igz" (-2 -7))
              (("" (hide "igz")
                (("" (inst?)
                  (("" (flatten)
                    (("" (reveal "igz")
                      (("" (expand "min")
                        (("" (flatten)
                          (("" (lift-if) (("" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Traj type-eq-decl nil int_bands nil)
    (nnreal type-eq-decl nil real_types nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (string type-eq-decl nil strings nil)
    (first_los_step_range formula-decl nil int_bands nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil
   (first_los_search_index subtype "kinematic_bands.FirstLosInd"
    "integers.subrange(0, (number_fields.+)(1, kinematic_bands.MaxN))")))
 (first_los_search_index_def_TCC1 0
  (first_los_search_index_def_TCC1-1 nil 3637424497
   ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (detector? const-decl "bool" int_bands nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (first_los_search_index_def subtype "kinematic_bands.AL"
    "{AL | reals.>(list_props[Aircraft].length(kinematic_bands.AL), 0)}")))
 (first_los_search_index_def 0
  (first_los_search_index_def-1 nil 3637424966
   ("" (skeep*)
    (("" (skoletin 1)
      (("" (skeep)
        (("" (typepred "j")
          (("" (expand "first_los_search_index" :assert? none)
            (("" (skoletin -3)
              (("" (skoletin -)
                (("" (skoletin -)
                  (("" (skoletin -)
                    (("" (skoletin -)
                      (("" (skoletin -)
                        (("" (skoletin -)
                          (("" (skoletin -)
                            (("" (skoletin -)
                              ((""
                                (name
                                 "A"
                                 "first_los_step(LOS2, traj, FirstLosK2, ts, FirstLosN2, AL)")
                                (("1"
                                  (name
                                   "BB"
                                   "first_los_step(LOS, traj, FirstLosK, ts, FirstLosN, AL)")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (replace -1 :dir rl)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (case
                                               "NOT (j >= min(LosInitIndex, LosIndex) IFF (j>=LosInitIndex OR j>=LosIndex))")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (split +)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split -)
                                                      (("1"
                                                        (lift-if -3)
                                                        (("1"
                                                          (split -)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (lift-if
                                                                 -4)
                                                                (("2"
                                                                  (split
                                                                   -4)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (typepred
                                                                           "A")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               (-2
                                                                                -3))
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   3)
                                                                                  (("1"
                                                                                    (invoke
                                                                                     (name
                                                                                      "CC"
                                                                                      "%1")
                                                                                     (!
                                                                                      3
                                                                                      1))
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "CC")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (hide
                                                                                             (-1
                                                                                              -2
                                                                                              -4))
                                                                                            (("1"
                                                                                              (skeep
                                                                                               -)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "p"
                                                                                                 "A")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "min"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replaces -2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lift-if
                                                             -1)
                                                            (("2"
                                                              (split -)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (hide
                                                                       3)
                                                                      (("2"
                                                                        (typepred
                                                                         "BB")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide
                                                                             (-2
                                                                              -3))
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (invoke
                                                                                   (name
                                                                                    "CC"
                                                                                    "%1")
                                                                                   (!
                                                                                    3
                                                                                    1))
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (skeep
                                                                                       -)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "CC")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (hide
                                                                                             (-1
                                                                                              -2
                                                                                              -4))
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "p"
                                                                                               "BB")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "min"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (lift-if
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split -)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (invoke
                                                           (name
                                                            "CC"
                                                            "%1")
                                                           (! -1 1))
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (typepred
                                                               "CC")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   (-2
                                                                    -3))
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         2)
                                                                        (("1"
                                                                          (replaces
                                                                           -6)
                                                                          (("1"
                                                                            (lift-if
                                                                             +)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split
                                                                                 +)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -8)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "BB")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           (-1
                                                                                            -2
                                                                                            -4))
                                                                                          (("1"
                                                                                            (skeep
                                                                                             -)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "p"
                                                                                               "CC")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "FirstLosN")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "min"
                                                                                                     (-1
                                                                                                      -4))
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (ground)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "BB<=CC")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "BB")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (hide
                                                                                             (-2
                                                                                              -3))
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (skeep
                                                                                                   -)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "CC")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "p")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (replaces
                                                               -4)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (lift-if
                                                                   +)
                                                                  (("2"
                                                                    (split
                                                                     +)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replaces
                                                                           -6)
                                                                          (("1"
                                                                            (typepred
                                                                             "A")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 (-1
                                                                                  -2
                                                                                  -4))
                                                                                (("1"
                                                                                  (invoke
                                                                                   (name
                                                                                    "CC"
                                                                                    "%1")
                                                                                   (!
                                                                                    -4
                                                                                    1))
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "CC")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           (-2
                                                                                            -3))
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 (-4
                                                                                                  -5))
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "A")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       (-1
                                                                                                        -2
                                                                                                        -4))
                                                                                                      (("1"
                                                                                                        (skeep
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "p"
                                                                                                           "CC")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (copy
                                                                                                               -10)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "min"
                                                                                                                 (-1
                                                                                                                  -3))
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (ground)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (replaces
                                                                         -5)
                                                                        (("2"
                                                                          (invoke
                                                                           (name
                                                                            "CC"
                                                                            "%1")
                                                                           (!
                                                                            -2
                                                                            1))
                                                                          (("2"
                                                                            (replaces
                                                                             -1)
                                                                            (("2"
                                                                              (typepred
                                                                               "A")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide
                                                                                   (-2
                                                                                    -3))
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "CC")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (hide
                                                                                             (-2
                                                                                              -3))
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "A<=CC")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (skeep
                                                                                                     -)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -9
                                                                                                       "CC")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -9
                                                                                                           "p")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (flatten)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (replaces -1)
                                                    (("3"
                                                      (lift-if 2)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (replaces -1 1)
                                                (("4"
                                                  (lift-if 1)
                                                  (("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FirstLosN skolem-const-decl
     "{k: nat | k <= floor(T / ts) AND k <= MaxN}" kinematic_bands nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (* const-decl "Vector" vectors_3D vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (first_los_step def-decl "{i: int |
   (i >= 0 IFF
     (k <= i AND
       i <= MaxN AND
        (EXISTS (p: nat):
           p < length(AL) AND
            LOS(traj(i * ts)`1, traj(i * ts)`2,
                nth(AL, p)`s + (i * ts) * nth(AL, p)`v, nth(AL, p)`v))
         AND
         (FORALL (j: nat):
            k <= j AND j < i IMPLIES
             (FORALL (p: nat):
                p < length(AL) IMPLIES
                 NOT LOS(traj(j * ts)`1, traj(j * ts)`2,
                         nth(AL, p)`s + (j * ts) * nth(AL, p)`v,
                         nth(AL, p)`v)))))
    AND
    (i < 0 IFF
      (FORALL (p, j: nat):
         p < length(AL) AND k <= j AND j <= MaxN IMPLIES
          NOT LOS(traj(j * ts)`1, traj(j * ts)`2,
                  nth(AL, p)`s + (j * ts) * nth(AL, p)`v, nth(AL, p)`v)))}"
     int_bands nil)
    (integer nonempty-type-from-decl nil integers nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (first_los_search_index const-decl "subrange(0, MaxN + 1)"
     kinematic_bands nil)
    (subrange type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (string type-eq-decl nil strings nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Traj type-eq-decl nil int_bands nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (bands_search_index_TCC1 0
  (bands_search_index_TCC1-1 nil 3633705670 ("" (subtype-tcc) nil nil)
   nil nil
   (bands_search_index subtype
    "kinematic_bands.most_urgent(kinematic_bands.so, kinematic_bands.vo, kinematic_bands.AL)"
    "below[length[Aircraft](AL)]")))
 (bands_search_index_TCC2 0
  (bands_search_index_TCC2-1 nil 3633705670
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (bands_search_index subtype
    "(number_fields.-)(kinematic_bands.FirstLos, 1)" "nat")))
 (bands_search_index_TCC3 0
  (bands_search_index_TCC3-1 nil 3633705670 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (first_los_search_index const-decl "subrange(0, MaxN + 1)"
     kinematic_bands nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil
   (bands_search_index subtype "kinematic_bands.FirstNonHRep" "nat")))
 (bands_search_index_TCC4 0
  (bands_search_index_TCC4-1 nil 3633705670
   ("" (skeep*)
    (("" (assert)
      (("" (expand "min" 1)
        (("" (lift-if 1)
          (("" (split +)
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (bands_search_index subtype
    "real_defs.min(kinematic_bands.FirstLos, kinematic_bands.FirstProbHcrit)"
    "nat")))
 (bands_search_index_TCC5 0
  (bands_search_index_TCC5-1 nil 3633705670
   ("" (skeep* :preds? t)
    (("" (expand ">=")
      (("" (hide-all-but (3 4 -4)) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (>= const-decl "bool" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (bands_search_index subtype
    "(number_fields.-)(kinematic_bands.FirstProbHL, 1)" "nat")))
 (bands_search_index_TCC6 0
  (bands_search_index_TCC6-1 nil 3633705670 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (first_los_search_index const-decl "subrange(0, MaxN + 1)"
     kinematic_bands nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil
   (bands_search_index subtype "kinematic_bands.FirstNonVRep" "nat")))
 (bands_search_index_TCC7 0
  (bands_search_index_TCC7-2 "" 3813484670
   ("" (skeep*) (("" (assert) nil nil)) nil) nil shostak
   (bands_search_index subtype "kinematic_bands.FirstProbVHL"
    "integers.subrange(0, (number_fields.+)(1, kinematic_bands.MaxN))"))
  (bands_search_index_TCC7-1 nil 3633705670
   ("" (skeep*)
    (("" (assert)
      (("" (case "FirstProbLOS<=1+MaxN")
        (("1" (case "FirstProbHcrit<=1+MaxN")
          (("1" (case "FirstProbVcrit<=1+MaxN")
            (("1" (expand "min")
              (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)
             ("2" (hide 2)
              (("2" (replaces -12 +)
                (("2" (lift-if +) (("2" (ground) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (replaces -8 +)
              (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (replaces -5 +)
          (("2" (lift-if +) (("2" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (bands_search_index subtype "kinematic_bands.FirstProbVHL"
    "integers.subrange(0, (number_fields.+)(1, kinematic_bands.MaxN))")))
 (bands_search_index_def_TCC1 0
  (bands_search_index_def_TCC1-1 nil 3633705670
   ("" (subtype-tcc) nil nil)
   ((* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (detector? const-decl "bool" int_bands nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (bands_search_index_def subtype "kinematic_bands.most_urgent"
    "{most_urgent | booleans.AND(reals.>=(kinematic_bands.most_urgent(kinematic_bands.so, kinematic_bands.vo, kinematic_bands.AL), 0), reals.<(kinematic_bands.most_urgent(kinematic_bands.so, kinematic_bands.vo, kinematic_bands.AL), list_props[Aircraft].length(kinematic_bands.AL)))}")))
 (bands_search_index_def 0
  (bands_search_index_def-3 "" 3813484673
   ("" (skeep)
    (("" (label "det" -4)
      (("" (skoletin 1)
        (("" (label "inddef" -1)
          (("" (label "hyp" +)
            (("" (hide "hyp")
              (("" (expand "bands_search_index" :assert? none)
                (("" (name "MI" "nth(AL, most_urgent(so, vo, AL))")
                  (("1" (replace -1)
                    (("1"
                      (name "FirstLos" "first_los_search_index(LOS,
                                    CD,
                                    LOS2,
                                    CD2,
                                    useLOS2,
                                    B,
                                    T,
                                    B2,
                                    T2,
                                    traj,
                                    MaxN,
                                    ts,
                                    AL)")
                      (("1" (replace -1)
                        (("1"
                          (name "FirstNonHRep"
                                "(IF (NOT UseHCrit) OR FirstLos = 0 THEN FirstLos
                                                                                                       ELSE first_nonrepulsive_step(traj,
                                                                                                                                    0,
                                                                                                                                    ts,
                                                                                                                                    FirstLos - 1,
                                                                                                                                    MI`s,
                                                                                                                                    MI`v,
                                                                                                                                    epsH)
                                                                                                       ENDIF)")
                          (("1"
                            (name "FirstProbHcrit"
                                  "IF FirstNonHRep < 0 THEN MaxN + 1 ELSE FirstNonHRep ENDIF")
                            (("1"
                              (name "FirstProbHL"
                                    "min(FirstLos, FirstProbHcrit)")
                              (("1"
                                (name
                                 "FirstNonVRep"
                                 "(IF (NOT UseVCrit) OR FirstProbHL = 0 THEN FirstProbHL
                                                                                                   ELSE first_nonvert_repul_step(traj,
                                                                                                                                 0,
                                                                                                                                 ts,
                                                                                                                                 FirstProbHL - 1,
                                                                                                                                 MI`s,
                                                                                                                                 MI`v,
                                                                                                                                 epsV)
                                                                                                   ENDIF)")
                                (("1"
                                  (name
                                   "FirstProbVcrit"
                                   "IF FirstNonVRep < 0 THEN MaxN + 1 ELSE FirstNonVRep ENDIF")
                                  (("1"
                                    (name
                                     "FirstProbVHL"
                                     "min(FirstProbHL, FirstProbVcrit)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -6)
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (replace -4)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (reveal "hyp")
                                                  (("1"
                                                    (replace "inddef")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (replace
                                                         -4
                                                         1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (case
                                                           "NOT (j >= min(min(FirstLos, FirstProbHcrit), FirstProbVcrit)) = (j>=FirstLos OR j>= FirstProbHcrit OR j>=FirstProbVcrit)")
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (iff)
                                                              (("1"
                                                                (expand
                                                                 "min")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "j>=FirstLos")
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (lemma
                                                                       "first_los_search_index_def")
                                                                      (("1"
                                                                        (insteep
                                                                         -)
                                                                        (("1"
                                                                          (replace
                                                                           -10)
                                                                          (("1"
                                                                            (replace
                                                                             -17
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (replace
                                                                               -18
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -9)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "j")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "j>=FirstProbHcrit")
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (replace
                                                                           -6
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (lift-if
                                                                             -1)
                                                                            (("1"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -7
                                                                                     -1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (lift-if
                                                                                       -1)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -8
                                                                                                 1
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (invoke
                                                                                                   (name
                                                                                                    "az"
                                                                                                    "%1")
                                                                                                   (!
                                                                                                    1
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "az")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               (-2
                                                                                                                -3))
                                                                                                              (("2"
                                                                                                                (invoke
                                                                                                                 (name
                                                                                                                  "bb"
                                                                                                                  "%1")
                                                                                                                 (!
                                                                                                                  6
                                                                                                                  1))
                                                                                                                (("2"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "bb")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "az")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (replace
                                                                           -3
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (lift-if
                                                                             -1)
                                                                            (("2"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -4
                                                                                     -1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lift-if
                                                                                         -1)
                                                                                        (("2"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "min"
                                                                                                     -5)
                                                                                                    (("1"
                                                                                                      (lift-if
                                                                                                       -5)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "min"
                                                                                                     -6)
                                                                                                    (("2"
                                                                                                      (lift-if
                                                                                                       -6)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -5
                                                                                                 +
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (invoke
                                                                                                   (name
                                                                                                    "az"
                                                                                                    "%1")
                                                                                                   (!
                                                                                                    2
                                                                                                    1))
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "az")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             (-2
                                                                                                              -3))
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (invoke
                                                                                                                   (name
                                                                                                                    "bb"
                                                                                                                    "%1")
                                                                                                                   (!
                                                                                                                    10
                                                                                                                    1))
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "bb")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "az")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "FirstProbHL>=0")
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-1
                                                                                                          1
                                                                                                          2))
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "FORALL (zz:nat): zz-1>=0 OR zz=0")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "FirstProbHL")
                                                                                                            (("1"
                                                                                                              (ground)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         (2
                                                                                                          3))
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -6
                                                                                                           1
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "min"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (lift-if
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (case
                                                                   "(first_los_step(LOS, traj, ceiling(B / ts), ts,
                       min(floor(T / ts), j), AL)
         >= 0)
        OR
        (useLOS2 AND
          first_los_step(LOS2, traj, ceiling(B2 / ts), ts,
                         min(floor(T2 / ts), j), AL)
           >= 0)")
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (lemma
                                                                       "first_los_search_index_def")
                                                                      (("1"
                                                                        (insteep
                                                                         -)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -9)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "j")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split
                                                                             -)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (invoke
                                                                                   (name
                                                                                    "az"
                                                                                    "%1")
                                                                                   (!
                                                                                    -2
                                                                                    1))
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "az")
                                                                                      (("1"
                                                                                        (hide
                                                                                         -9)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (hide
                                                                                             (-2
                                                                                              -3))
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -8
                                                                                                   +
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       "hyp")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -10
                                                                                                             -1
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (invoke
                                                                                                               (name
                                                                                                                "bb"
                                                                                                                "%1")
                                                                                                               (!
                                                                                                                -1
                                                                                                                1))
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "bb")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "az")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -9
                                                                                                             +
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (invoke
                                                                                                               (name
                                                                                                                "bb"
                                                                                                                "%1")
                                                                                                               (!
                                                                                                                1
                                                                                                                1))
                                                                                                              (("2"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "bb")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       (-2
                                                                                                                        -3))
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "az")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (invoke
                                                                                   (name
                                                                                    "az"
                                                                                    "%1")
                                                                                   (!
                                                                                    -2
                                                                                    1))
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "az")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (hide
                                                                                           (-2
                                                                                            -3))
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -10)
                                                                                                (("2"
                                                                                                  (replaces
                                                                                                   -6
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (lift-if
                                                                                                     +)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       "hyp")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -7
                                                                                                             -1
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (lift-if
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (invoke
                                                                                                                       (name
                                                                                                                        "bb"
                                                                                                                        "%1")
                                                                                                                       (!
                                                                                                                        -1
                                                                                                                        1))
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "bb")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               (-1
                                                                                                                                -2
                                                                                                                                -4))
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "az")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -7
                                                                                                                                     1
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "min"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (lift-if
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "FirstProbHL>=0")
                                                                                                                          (("1"
                                                                                                                            (hide-all-but
                                                                                                                             (-1
                                                                                                                              1
                                                                                                                              2))
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "FORALL (zz:nat): zz-1>=0 OR zz=0")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "FirstProbHL")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             (2
                                                                                                                              3))
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (replaces
                                                                                                             -6
                                                                                                             +
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (lift-if
                                                                                                               +)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 +)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (invoke
                                                                                                                       (name
                                                                                                                        "bb"
                                                                                                                        "%1")
                                                                                                                       (!
                                                                                                                        2
                                                                                                                        1))
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "bb")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 (-2
                                                                                                                                  -3))
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "az")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "FirstProbHL>=0")
                                                                                                                          (("1"
                                                                                                                            (hide-all-but
                                                                                                                             (-1
                                                                                                                              1
                                                                                                                              2))
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "FORALL (zz:nat): zz-1>=0 OR zz=0")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "FirstProbHL")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             (2
                                                                                                                              3))
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -6
                                                                                                                               1
                                                                                                                               :dir
                                                                                                                               rl)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "min"
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (lift-if
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     +)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide "inddef")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (case "FirstProbHL>=0")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (replace -2 1 :dir rl)
                                          (("2"
                                            (expand "min" +)
                                            (("2"
                                              (lift-if +)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -4) (("2" (ground) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide "inddef") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (bands_search_index_def-2 nil 3633706572
   ("" (skeep)
    (("" (label "det" -4)
      (("" (skoletin 1)
        (("" (label "inddef" -1)
          (("" (label "hyp" +)
            (("" (hide "hyp")
              (("" (expand "bands_search_index" :assert? none)
                (("" (name "MI" "nth(AL, most_urgent(so, vo, AL))")
                  (("1" (replace -1)
                    (("1"
                      (name "FirstLos" "first_los_search_index(LOS,
                                    CD,
                                    LOS2,
                                    CD2,
                                    useLOS2,
                                    B,
                                    T,
                                    B2,
                                    T2,
                                    traj,
                                    MaxN,
                                    ts,
                                    AL)")
                      (("1" (replace -1)
                        (("1"
                          (name "FirstNonHRep"
                                "(IF (NOT UseHCrit) OR FirstLos = 0 THEN FirstLos
                                                                                                       ELSE first_nonrepulsive_step(traj,
                                                                                                                                    0,
                                                                                                                                    ts,
                                                                                                                                    FirstLos - 1,
                                                                                                                                    MI`s,
                                                                                                                                    MI`v,
                                                                                                                                    epsH)
                                                                                                       ENDIF)")
                          (("1"
                            (name "FirstProbHcrit"
                                  "IF FirstNonHRep < 0 THEN MaxN + 1 ELSE FirstNonHRep ENDIF")
                            (("1"
                              (name "FirstProbHL"
                                    "min(FirstLos, FirstProbHcrit)")
                              (("1"
                                (name
                                 "FirstNonVRep"
                                 "(IF (NOT UseVCrit) OR FirstProbHL = 0 THEN FirstProbHL
                                                                                                   ELSE first_nonvert_repul_step(traj,
                                                                                                                                 0,
                                                                                                                                 ts,
                                                                                                                                 FirstProbHL - 1,
                                                                                                                                 MI`s,
                                                                                                                                 MI`v,
                                                                                                                                 epsV)
                                                                                                   ENDIF)")
                                (("1"
                                  (name
                                   "FirstProbVcrit"
                                   "IF FirstNonVRep < 0 THEN MaxN + 1 ELSE FirstNonVRep ENDIF")
                                  (("1"
                                    (name
                                     "FirstProbVHL"
                                     "min(FirstProbHL, FirstProbVcrit)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -6)
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (replace -4)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (reveal "hyp")
                                                  (("1"
                                                    (replace "inddef")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (replace
                                                         -4
                                                         1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (case
                                                           "NOT (j >= min(min(FirstLos, FirstProbHcrit), FirstProbVcrit)) = (j>=FirstLos OR j>= FirstProbHcrit OR j>=FirstProbVcrit)")
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (iff)
                                                              (("1"
                                                                (expand
                                                                 "min")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "j>=FirstLos")
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (lemma
                                                                       "first_los_search_index_def")
                                                                      (("1"
                                                                        (insteep
                                                                         -)
                                                                        (("1"
                                                                          (replace
                                                                           -10)
                                                                          (("1"
                                                                            (replace
                                                                             -17
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (replace
                                                                               -18
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -9)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "j")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "j>=FirstProbHcrit")
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (replace
                                                                           -6
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (lift-if
                                                                             -1)
                                                                            (("1"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -7
                                                                                     -1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (lift-if
                                                                                       -1)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -8
                                                                                                 1
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (invoke
                                                                                                   (name
                                                                                                    "az"
                                                                                                    "%1")
                                                                                                   (!
                                                                                                    1
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "az")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               (-2
                                                                                                                -3))
                                                                                                              (("2"
                                                                                                                (invoke
                                                                                                                 (name
                                                                                                                  "bb"
                                                                                                                  "%1")
                                                                                                                 (!
                                                                                                                  6
                                                                                                                  1))
                                                                                                                (("2"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "bb")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "az")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (replace
                                                                           -3
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (lift-if
                                                                             -1)
                                                                            (("2"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -4
                                                                                     -1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lift-if
                                                                                         -1)
                                                                                        (("2"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "min"
                                                                                                     -5)
                                                                                                    (("1"
                                                                                                      (lift-if
                                                                                                       -5)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "min"
                                                                                                     -6)
                                                                                                    (("2"
                                                                                                      (lift-if
                                                                                                       -6)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -5
                                                                                                 +
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (invoke
                                                                                                   (name
                                                                                                    "az"
                                                                                                    "%1")
                                                                                                   (!
                                                                                                    2
                                                                                                    1))
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "az")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             (-2
                                                                                                              -3))
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (invoke
                                                                                                                   (name
                                                                                                                    "bb"
                                                                                                                    "%1")
                                                                                                                   (!
                                                                                                                    10
                                                                                                                    1))
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "bb")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "az")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "FirstProbHL>=0")
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-1
                                                                                                          1
                                                                                                          2))
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "FORALL (zz:nat): zz-1>=0 OR zz=0")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "FirstProbHL")
                                                                                                            (("1"
                                                                                                              (ground)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         (2
                                                                                                          3))
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -6
                                                                                                           1
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "min"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (lift-if
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (case
                                                                   "(first_los_step(LOS, traj, ceiling(B / ts), ts,
                       min(floor(T / ts), j), AL)
         >= 0)
        OR
        (useLOS2 AND
          first_los_step(LOS2, traj, ceiling(B2 / ts), ts,
                         min(floor(T2 / ts), j), AL)
           >= 0)")
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (lemma
                                                                       "first_los_search_index_def")
                                                                      (("1"
                                                                        (insteep
                                                                         -)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -9)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "j")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split
                                                                             -)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (invoke
                                                                                   (name
                                                                                    "az"
                                                                                    "%1")
                                                                                   (!
                                                                                    -2
                                                                                    1))
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "az")
                                                                                      (("1"
                                                                                        (hide
                                                                                         -9)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (hide
                                                                                             (-2
                                                                                              -3))
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -8
                                                                                                   +
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       "hyp")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -10
                                                                                                             -1
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (invoke
                                                                                                               (name
                                                                                                                "bb"
                                                                                                                "%1")
                                                                                                               (!
                                                                                                                -1
                                                                                                                1))
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "bb")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "az")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -9
                                                                                                             +
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (invoke
                                                                                                               (name
                                                                                                                "bb"
                                                                                                                "%1")
                                                                                                               (!
                                                                                                                1
                                                                                                                1))
                                                                                                              (("2"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "bb")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       (-2
                                                                                                                        -3))
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "az")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (invoke
                                                                                   (name
                                                                                    "az"
                                                                                    "%1")
                                                                                   (!
                                                                                    -2
                                                                                    1))
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "az")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (hide
                                                                                           (-2
                                                                                            -3))
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -10)
                                                                                                (("2"
                                                                                                  (replaces
                                                                                                   -6
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (lift-if
                                                                                                     +)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       "hyp")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -7
                                                                                                             -1
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (lift-if
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (invoke
                                                                                                                       (name
                                                                                                                        "bb"
                                                                                                                        "%1")
                                                                                                                       (!
                                                                                                                        -1
                                                                                                                        1))
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "bb")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               (-1
                                                                                                                                -2
                                                                                                                                -4))
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "az")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -7
                                                                                                                                     1
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "min"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (lift-if
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (flatten)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "FirstProbHL>=0")
                                                                                                                          (("1"
                                                                                                                            (hide-all-but
                                                                                                                             (-1
                                                                                                                              1
                                                                                                                              2))
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "FORALL (zz:nat): zz-1>=0 OR zz=0")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "FirstProbHL")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             (2
                                                                                                                              3))
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (replaces
                                                                                                             -6
                                                                                                             +
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (lift-if
                                                                                                               +)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 +)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (invoke
                                                                                                                       (name
                                                                                                                        "bb"
                                                                                                                        "%1")
                                                                                                                       (!
                                                                                                                        2
                                                                                                                        1))
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "bb")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 (-2
                                                                                                                                  -3))
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "az")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "FirstProbHL>=0")
                                                                                                                          (("1"
                                                                                                                            (hide-all-but
                                                                                                                             (-1
                                                                                                                              1
                                                                                                                              2))
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "FORALL (zz:nat): zz-1>=0 OR zz=0")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "FirstProbHL")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             (2
                                                                                                                              3))
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -6
                                                                                                                               1
                                                                                                                               :dir
                                                                                                                               rl)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "min"
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (lift-if
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     +)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide "inddef")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (case "FirstProbHL>=0")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (replace -2 1 :dir rl)
                                          (("2"
                                            (expand "min" +)
                                            (("2"
                                              (lift-if +)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -4) (("2" (ground) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide "inddef") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (first_los_search_index_def formula-decl nil kinematic_bands nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (first_los_search_index const-decl "subrange(0, MaxN + 1)"
     kinematic_bands nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (* const-decl "Vector" vectors_3D vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (first_los_step def-decl "{i: int |
   (i >= 0 IFF
     (k <= i AND
       i <= MaxN AND
        (EXISTS (p: nat):
           p < length(AL) AND
            LOS(traj(i * ts)`1, traj(i * ts)`2,
                nth(AL, p)`s + (i * ts) * nth(AL, p)`v, nth(AL, p)`v))
         AND
         (FORALL (j: nat):
            k <= j AND j < i IMPLIES
             (FORALL (p: nat):
                p < length(AL) IMPLIES
                 NOT LOS(traj(j * ts)`1, traj(j * ts)`2,
                         nth(AL, p)`s + (j * ts) * nth(AL, p)`v,
                         nth(AL, p)`v)))))
    AND
    (i < 0 IFF
      (FORALL (p, j: nat):
         p < length(AL) AND k <= j AND j <= MaxN IMPLIES
          NOT LOS(traj(j * ts)`1, traj(j * ts)`2,
                  nth(AL, p)`s + (j * ts) * nth(AL, p)`v, nth(AL, p)`v)))}"
     int_bands nil)
    (integer nonempty-type-from-decl nil integers nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (repulsive_at const-decl "bool" int_bands nil)
    (first_nonrepulsive_step def-decl "{i: int |
   (i >= 0 IFF
     ((k <= i AND i <= MaxN AND NOT repulsive_at(traj, i, ts, si, vi, eps))
       AND
       (FORALL (j: nat):
          k <= j AND j < i IMPLIES
           repulsive_at(traj, j, ts, si, vi, eps))))
    AND
    (i < 0 IFF
      (FORALL (j: nat):
         k <= j AND j <= MaxN IMPLIES
          repulsive_at(traj, j, ts, si, vi, eps)))}" int_bands nil)
    (vert_repul_at const-decl "bool" int_bands nil)
    (first_nonvert_repul_step def-decl "{i: int |
   (i >= 0 IFF
     ((k <= i AND
        i <= MaxN AND NOT vert_repul_at(traj, i, ts, si, vi, eps))
       AND
       (FORALL (j: nat):
          k <= j AND j < i IMPLIES
           vert_repul_at(traj, j, ts, si, vi, eps))))
    AND
    (i < 0 IFF
      (FORALL (j: nat):
         k <= j AND j <= MaxN IMPLIES
          vert_repul_at(traj, j, ts, si, vi, eps)))}" int_bands nil)
    (bands_search_index const-decl "subrange(0, MaxN + 1)"
     kinematic_bands nil)
    (subrange type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil) (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (string type-eq-decl nil strings nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Traj type-eq-decl nil int_bands nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil)
  (bands_search_index_def-1 nil 3633706540
   ("" (skeep) (("" (skoletin 1) (("" (postpone) nil nil)) nil)) nil)
   nil shostak))
 (kinematic_bands_TCC1 0
  (kinematic_bands_TCC1-1 nil 3631294873
   ("" (skeep*) (("" (hide -) (("" (grind) nil nil)) nil)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (proper? const-decl "bool" int_bands nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (kinematic_bands subtype "(: :)"
    "(int_bands.proper?(kinematic_bands.MaxN))")))
 (kinematic_bands_TCC2 0
  (kinematic_bands_TCC2-1 nil 3631294873
   ("" (skeep*) (("" (hide -) (("" (grind) nil nil)) nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (kinematic_bands subtype "(number_fields.-)(kinematic_bands.bsi, 1)"
    "nat")))
 (kinematic_bands_TCC3 0
  (kinematic_bands_TCC3-1 nil 3631294873
   ("" (skeep*)
    ((""
      (name "tcob" "traj_conflict_only_bands(CD,
                                       CD2,
                                       useLOS2,
                                       B,
                                       T,
                                       B2,
                                       T2,
                                       traj,
                                       bsi - 1,
                                       ts,
                                       AL)")
      (("1" (replaces -1)
        (("1" (typepred "tcob")
          (("1" (hide -2)
            (("1" (expand "proper?")
              (("1" (expand "Bands?")
                (("1" (flatten)
                  (("1" (skeep)
                    (("1" (assert)
                      (("1" (inst - "i") (("1" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (proper? const-decl "bool" int_bands nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Traj type-eq-decl nil int_bands nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (string type-eq-decl nil strings nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (Bands? const-decl "bool" int_bands nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (CD_future_traj const-decl "bool" int_bands nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (first_conflict_aircraft def-decl "{j: int |
   (j >= 0 IFF
     (i <= j AND
       j < length(AL) AND
        CD_future_traj(CD, B, T, traj, k * tsn, AL, j) AND
         (FORALL (q: int):
            q >= i AND q < j IMPLIES
             NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q))))
    AND
    (j < 0 IFF
      (FORALL (q: int):
         q >= i AND q < length(AL) IMPLIES
          NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q)))}"
     int_bands nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (traj_conflict_only_bands const-decl "(Bands?(maxi, 0, maxi,
        (LAMBDA (j: nat):
           (NOT first_conflict_aircraft(CD, B, T, traj, j, ts, 0, AL) >= 0)
            AND
            (NOT (useLOS2 AND
                   first_conflict_aircraft(CD2, B2, T2, traj, j, ts, 0, AL)
                    >= 0))),
        -1))" int_bands nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (kinematic_bands subtype
    "int_bands.traj_conflict_only_bands(kinematic_bands.CD, kinematic_bands.CD2, kinematic_bands.useLOS2, kinematic_bands.B, kinematic_bands.T, kinematic_bands.B2, kinematic_bands.T2, kinematic_bands.traj, (number_fields.-)(kinematic_bands.bsi, 1), kinematic_bands.ts, kinematic_bands.AL)"
    "(int_bands.proper?(kinematic_bands.MaxN))")))
 (kinematic_bands_def_TCC1 0
  (kinematic_bands_def_TCC1-1 nil 3633711380 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (detector? const-decl "bool" int_bands nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (kinematic_bands_def subtype "kinematic_bands.AL"
    "{AL | reals.>(list_props[Aircraft].length(kinematic_bands.AL), 0)}")))
 (kinematic_bands_def_TCC2 0
  (kinematic_bands_def_TCC2-1 nil 3633711380 ("" (subtype-tcc) nil nil)
   ((* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (detector? const-decl "bool" int_bands nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (kinematic_bands_def subtype "kinematic_bands.most_urgent"
    "{most_urgent | booleans.AND(reals.>=(kinematic_bands.most_urgent(kinematic_bands.so, kinematic_bands.vo, kinematic_bands.AL), 0), reals.<(kinematic_bands.most_urgent(kinematic_bands.so, kinematic_bands.vo, kinematic_bands.AL), list_props[Aircraft].length(kinematic_bands.AL)))}")))
 (kinematic_bands_def 0
  (kinematic_bands_def-2 nil 3631357963
   ("" (skeep)
    (("" (label "det" -4)
      (("" (label "det2" -5)
        (("" (skoletin 1)
          (("" (label "kbdef" -1)
            (("" (expand "bands_sound?")
              (("" (expand "kinematic_bands" :assert? none)
                ((""
                  (name "bsi"
                        "bands_search_index(LOS, CD, LOS2, CD2, useLOS2, B, T, B2, T2,
                                                                          so, vo, traj, MaxN, ts, AL, most_urgent,
                                                                          epsH, epsV, UseHCrit, UseVCrit)")
                  (("" (replace -1)
                    (("" (assert)
                      (("" (lift-if)
                        (("" (ground)
                          (("1" (skeep)
                            (("1" (ground)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (typepred "i!1")
                                  (("1"
                                    (replaces -5)
                                    (("1"
                                      (hide-all-but -1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (lemma "conflict_step_rew")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (insteep -)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide 7)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "bands_search_index_def")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (name
                                                       "MI"
                                                       "nth(AL, most_urgent(so, vo, AL))")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "MI`s"
                                                         "MI`v")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "k")
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2"
                              (name "MI"
                                    "nth(AL, most_urgent(so, vo, AL))")
                              (("2"
                                (lemma "bands_search_index_def")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (replace -4)
                                    (("2"
                                      (inst - "MI`s" "MI`v")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst - "k")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split +)
                                              (("1"
                                                (flatten +)
                                                (("1"
                                                  (case "NOT k<bsi")
                                                  (("1"
                                                    (label "igpen" -3)
                                                    (("1"
                                                      (hide "igpen")
                                                      (("1"
                                                        (skeep -)
                                                        (("1"
                                                          (name
                                                           "tcob"
                                                           "traj_conflict_only_bands(CD,
                                                                                                   CD2,
                                                                                                   useLOS2,
                                                                                                   B,
                                                                                                   T,
                                                                                                   B2,
                                                                                                   T2,
                                                                                                   traj,
                                                                                                   bsi-1,
                                                                                                   ts,
                                                                                                   AL)")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (replaces
                                                               "kbdef")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (typepred
                                                                   "tcob")
                                                                  (("1"
                                                                    (expand
                                                                     "Bands?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "i")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (expand
                                                                             "in?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (lemma
                                                         "conflict_step_rew")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "CD"
                                                               "CD2"
                                                               "MaxN")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   -)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -5)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (flatten)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (hide
                                                                     (1
                                                                      2
                                                                      3
                                                                      4))
                                                                    (("4"
                                                                      (name
                                                                       "tcob"
                                                                       "traj_conflict_only_bands(CD,
                                                                                                       CD2,
                                                                                                       useLOS2,
                                                                                                       B,
                                                                                                       T,
                                                                                                       B2,
                                                                                                       T2,
                                                                                                       traj,
                                                                                                       bsi-1,
                                                                                                       ts,
                                                                                                       AL)")
                                                                      (("4"
                                                                        (replaces
                                                                         -1)
                                                                        (("4"
                                                                          (typepred
                                                                           "tcob")
                                                                          (("4"
                                                                            (expand
                                                                             "Bands?")
                                                                            (("4"
                                                                              (flatten)
                                                                              (("4"
                                                                                (inst
                                                                                 -3
                                                                                 "k")
                                                                                (("4"
                                                                                  (assert)
                                                                                  (("4"
                                                                                    (skeep
                                                                                     -5)
                                                                                    (("4"
                                                                                      (assert)
                                                                                      (("4"
                                                                                        (inst
                                                                                         +
                                                                                         "i")
                                                                                        (("4"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("5"
                                                                    (flatten)
                                                                    (("5"
                                                                      (hide
                                                                       (1
                                                                        2
                                                                        3
                                                                        4))
                                                                      (("5"
                                                                        (name
                                                                         "tcob"
                                                                         "traj_conflict_only_bands(CD,
                                                                                                       CD2,
                                                                                                       useLOS2,
                                                                                                       B,
                                                                                                       T,
                                                                                                       B2,
                                                                                                       T2,
                                                                                                       traj,
                                                                                                       bsi-1,
                                                                                                       ts,
                                                                                                       AL)")
                                                                        (("5"
                                                                          (replaces
                                                                           -1)
                                                                          (("5"
                                                                            (typepred
                                                                             "tcob")
                                                                            (("5"
                                                                              (expand
                                                                               "Bands?")
                                                                              (("5"
                                                                                (flatten)
                                                                                (("5"
                                                                                  (inst
                                                                                   -3
                                                                                   "k")
                                                                                  (("5"
                                                                                    (assert)
                                                                                    (("5"
                                                                                      (skeep
                                                                                       -6)
                                                                                      (("5"
                                                                                        (assert)
                                                                                        (("5"
                                                                                          (inst
                                                                                           +
                                                                                           "i")
                                                                                          (("5"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten +)
                                                (("2"
                                                  (lemma
                                                   "conflict_step_rew")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (insteep -)
                                                      (("2"
                                                        (replace -3)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "k>=bsi")
                                                                (("1"
                                                                  (hide
                                                                   -3)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (name
                                                                       "tcob"
                                                                       "traj_conflict_only_bands(CD,
                                                                                                       CD2,
                                                                                                       useLOS2,
                                                                                                       B,
                                                                                                       T,
                                                                                                       B2,
                                                                                                       T2,
                                                                                                       traj,
                                                                                                       bsi-1,
                                                                                                       ts,
                                                                                                       AL)")
                                                                      (("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (typepred
                                                                           "tcob")
                                                                          (("2"
                                                                            (expand
                                                                             "Bands?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst
                                                                                 -3
                                                                                 "k")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replace
                                                                                     7)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (skeep
                                                                                           -)
                                                                                          (("2"
                                                                                            (inst
                                                                                             9
                                                                                             "j")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (in? const-decl "bool" int_bands nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (traj_conflict_only_bands const-decl "(Bands?(maxi, 0, maxi,
        (LAMBDA (j: nat):
           (NOT first_conflict_aircraft(CD, B, T, traj, j, ts, 0, AL) >= 0)
            AND
            (NOT (useLOS2 AND
                   first_conflict_aircraft(CD2, B2, T2, traj, j, ts, 0, AL)
                    >= 0))),
        -1))" int_bands nil)
    (first_conflict_aircraft def-decl "{j: int |
   (j >= 0 IFF
     (i <= j AND
       j < length(AL) AND
        CD_future_traj(CD, B, T, traj, k * tsn, AL, j) AND
         (FORALL (q: int):
            q >= i AND q < j IMPLIES
             NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q))))
    AND
    (j < 0 IFF
      (FORALL (q: int):
         q >= i AND q < length(AL) IMPLIES
          NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q)))}"
     int_bands nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (CD_future_traj const-decl "bool" int_bands nil)
    (Bands? const-decl "bool" int_bands nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (bands_search_index_def formula-decl nil kinematic_bands nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (conflict_step_rew formula-decl nil int_bands nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bands_search_index const-decl "subrange(0, MaxN + 1)"
     kinematic_bands nil)
    (subrange type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (bands_sound? const-decl "bool" int_bands nil)
    (kinematic_bands const-decl "(proper?(MaxN))" kinematic_bands nil)
    (proper? const-decl "bool" int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (string type-eq-decl nil strings nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Traj type-eq-decl nil int_bands nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int nonempty-type-eq-decl nil integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (kinematic_bands_def-1 nil 3631353696
   ("" (skeep)
    (("" (skoletin 1)
      (("" (label "kbdef" -1)
        (("" (assert)
          (("" (skeep)
            (("" (expand "kinematic_bands" :assert? none)
              (("" (name "MI" "nth(AL, most_urgent(so, vo, AL))")
                (("" (replace -1)
                  (("" (name "FirstLosK" " ceiling(B / ts)")
                    (("" (replace -1)
                      ((""
                        (name "FirstLosN" "min(floor(T / ts), MaxN)")
                        (("" (replace -1)
                          ((""
                            (name "FirstLos"
                                  "first_los_step(LOS, traj, FirstLosK, ts, FirstLosN, AL)")
                            (("1"
                              (name "FirstProbLOS"
                                    "IF FirstLos < 0 THEN MaxN + 1 ELSE FirstLos ENDIF")
                              (("1"
                                (name
                                 "FirstNonHRep"
                                 "(IF (NOT UseHCrit) THEN FirstProbLOS
                                                    ELSE first_nonrepulsive_step(traj,
                                                                                 0,
                                                                                 ts,
                                                                                 max(FirstProbLOS - 1, 0),
                                                                                 MI`s,
                                                                                 MI`v,
                                                                                 epsH)
                                                    ENDIF)")
                                (("1"
                                  (name
                                   "FirstProbHcrit"
                                   "IF FirstNonHRep < 0 THEN MaxN + 1 ELSE FirstNonHRep ENDIF")
                                  (("1"
                                    (name
                                     "FirstNonVRep"
                                     "(IF (NOT UseVCrit) THEN FirstProbHcrit
                                                            ELSE first_nonvert_repul_step(traj,
                                                                                          0,
                                                                                          ts,
                                                                                          max(FirstProbHcrit - 1, 0),
                                                                                          MI`s,
                                                                                          MI`v,
                                                                                          epsV)
                                                            ENDIF)")
                                    (("1"
                                      (name
                                       "FirstProbVcrit"
                                       "IF FirstNonHRep < 0 THEN MaxN + 1 ELSE FirstNonHRep ENDIF")
                                      (("1"
                                        (name
                                         "CDSearchIndex"
                                         "FirstProbVcrit - 1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -7)
                                            (("1"
                                              (replace -6)
                                              (("1"
                                                (replace -5)
                                                (("1"
                                                  (replace -4)
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (skeep -)
                                                            (("1"
                                                              (expand
                                                               "in?")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "first_los_step(LOS, traj, FirstLosK, ts, FirstLosN, AL)>=0 AND k>=first_los_step(LOS, traj, FirstLosK, ts, FirstLosN, AL)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (typepred
                                                                       "first_los_step(LOS, traj, FirstLosK, ts, FirstLosN, AL)")
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (name
                                                                               "kz"
                                                                               "first_los_step(LOS, traj, FirstLosK, ts, FirstLosN, AL)")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (skeep
                                                                                   -)
                                                                                  (("1"
                                                                                    (inst
                                                                                     2
                                                                                     "kz"
                                                                                     "p")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-2
                                                                                          -3
                                                                                          2))
                                                                                        (("1"
                                                                                          (expand
                                                                                           "FirstLosN")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "FirstLosK")
                                                                                            (("1"
                                                                                              (case
                                                                                               "kz>=B/ts AND kz<=T/ts")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (cross-mult
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (cross-mult
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "first_nonrepulsive_step(traj,
                                                     0,
                                                     ts,
                                                     max(FirstProbLOS - 1, 0),
                                                     MI`s,
                                                     MI`v,
                                                     epsH)>=0 AND k>=first_nonrepulsive_step(traj,
                                                     0,
                                                     ts,
                                                     max(FirstProbLOS - 1, 0),
                                                     MI`s,
                                                     MI`v,
                                                     epsH) AND UseHCrit")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (name
                                                                           "kz"
                                                                           "first_nonrepulsive_step(traj,
                                                       0,
                                                       ts,
                                                       max(FirstProbLOS - 1, 0),
                                                       MI`s,
                                                       MI`v,
                                                       epsH)")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               3
                                                                               "kz")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "kz")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "first_nonvert_repul_step(traj,
                                                        0,
                                                        ts,
                                                        max(CDSearchIndex, 0),
                                                        MI`s,
                                                        MI`v,
                                                        epsV)>=0 AND k>=first_nonvert_repul_step(traj,
                                                        0,
                                                        ts,
                                                        max(CDSearchIndex, 0),
                                                        MI`s,
                                                        MI`v,
                                                        epsV) AND UseVCrit")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (name
                                                                             "kz"
                                                                             "first_nonvert_repul_step(traj,
                                                          0,
                                                          ts,
                                                          max(CDSearchIndex, 0),
                                                          MI`s,
                                                          MI`v,
                                                          epsV)")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (inst
                                                                                 5
                                                                                 "kz")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "kz")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lift-if
                                                                         "kbdef")
                                                                        (("2"
                                                                          (split
                                                                           "kbdef")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (expand
                                                                               "CDSearchIndex"
                                                                               -1)
                                                                              (("1"
                                                                                (case
                                                                                 "NOT FirstProbVcrit = 0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     (2
                                                                                      3
                                                                                      4))
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "FirstProbVcrit"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (lift-if
                                                                                       -1)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "FirstNonHRep"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "FirstProbLOS"
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (lift-if
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "traj_conflict_only_bands(CD, B, T, traj, CDSearchIndex, ts, AL)")
                                                                                (("2"
                                                                                  (replace
                                                                                   -2
                                                                                   :dir
                                                                                   rl)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "Bands?")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -3
                                                                                         "k")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (case
                                                                                             "k<=CDSearchIndex")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "first_conflict_aircraft(CD, B, T, traj, k, ts, 0, AL)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (skeep)
                                                                                                          (("1"
                                                                                                            (postpone)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (postpone)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (postpone)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (postpone)
                                                                        nil
                                                                        nil)
                                                                       ("4"
                                                                        (postpone)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (postpone)
                                                                      nil
                                                                      nil)
                                                                     ("4"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (postpone) nil nil))
                                    nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (kinematic_bands_connected_TCC1 0
  (kinematic_bands_connected_TCC1-1 nil 3633684492
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IntBand type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (proper? const-decl "bool" int_bands nil)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (detector? const-decl "bool" int_bands nil)
    (first_los_search_index const-decl "subrange(0, MaxN + 1)"
     kinematic_bands nil)
    (bands_search_index const-decl "subrange(0, MaxN + 1)"
     kinematic_bands nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil
   (kinematic_bands_connected subtype "kinematic_bands.i"
    "below[length[IntBand](kb)]")))
 (kinematic_bands_connected 0
  (kinematic_bands_connected-2 nil 3633780975
   ("" (skeep)
    (("" (label "det" -4)
      (("" (label "det2" -5)
        (("" (skoletin 1)
          (("" (label "kbdef" -1)
            (("" (name "MI" "nth(AL, most_urgent(so, vo, AL))")
              (("1" (expand "kinematic_bands" :assert? none)
                (("1"
                  (name "bsi"
                        "bands_search_index(LOS, CD, LOS2, CD2, useLOS2, B, T, B2, T2,
                                         so, vo, traj, MaxN, ts, AL, most_urgent,
                                         epsH, epsV, UseHCrit, UseVCrit)")
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (lift-if)
                          (("1" (ground)
                            (("1" (replaces -2)
                              (("1" (assert) nil nil)) nil)
                             ("2"
                              (name "tcob" "traj_conflict_only_bands(CD,
                                                      CD2,
                                                      useLOS2,
                                                      B,
                                                      T,
                                                      B2,
                                                      T2,
                                                      traj,
                                                      bsi-1,
                                                      ts,
                                                      AL)")
                              (("2"
                                (assert)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (typepred "tcob")
                                    (("2"
                                      (expand "Bands?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (inst - "i" "j")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (traj_conflict_only_bands const-decl "(Bands?(maxi, 0, maxi,
        (LAMBDA (j: nat):
           (NOT first_conflict_aircraft(CD, B, T, traj, j, ts, 0, AL) >= 0)
            AND
            (NOT (useLOS2 AND
                   first_conflict_aircraft(CD2, B2, T2, traj, j, ts, 0, AL)
                    >= 0))),
        -1))" int_bands nil)
    (first_conflict_aircraft def-decl "{j: int |
   (j >= 0 IFF
     (i <= j AND
       j < length(AL) AND
        CD_future_traj(CD, B, T, traj, k * tsn, AL, j) AND
         (FORALL (q: int):
            q >= i AND q < j IMPLIES
             NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q))))
    AND
    (j < 0 IFF
      (FORALL (q: int):
         q >= i AND q < length(AL) IMPLIES
          NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q)))}"
     int_bands nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (CD_future_traj const-decl "bool" int_bands nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Bands? const-decl "bool" int_bands nil)
    (length_null formula-decl nil more_list_props structures)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (bands_search_index const-decl "subrange(0, MaxN + 1)"
     kinematic_bands nil)
    (subrange type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (kinematic_bands const-decl "(proper?(MaxN))" kinematic_bands nil)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (string type-eq-decl nil strings nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Traj type-eq-decl nil int_bands nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (proper? const-decl "bool" int_bands nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil)
  (kinematic_bands_connected-1 nil 3633684505
   ("" (skeep)
    (("" (label "det" -4)
      (("" (skoletin 1)
        (("" (label "kbdef" -1)
          (("" (assert)
            (("" (expand "kinematic_bands" :assert? none)
              (("" (name "MI" "nth(AL, most_urgent(so, vo, AL))")
                (("" (replace -1)
                  (("" (name "FirstLosK" " ceiling(B / ts)")
                    (("" (replace -1)
                      ((""
                        (name "FirstLosN" "min(floor(T / ts), MaxN)")
                        (("" (replace -1)
                          ((""
                            (name "FirstLos"
                                  "first_los_step(LOS, traj, FirstLosK, ts, FirstLosN, AL)")
                            (("1"
                              (name "FirstProbLOS"
                                    "IF FirstLos < 0 THEN MaxN + 1 ELSE FirstLos ENDIF")
                              (("1"
                                (name
                                 "FirstNonHRep"
                                 "(IF (NOT UseHCrit) OR FirstProbLOS = 0 THEN FirstProbLOS
                                                                             ELSE first_nonrepulsive_step(traj,
                                                                                                          0,
                                                                                                          ts,
                                                                                                          FirstProbLOS - 1,
                                                                                                          MI`s,
                                                                                                          MI`v,
                                                                                                          epsH)
                                                                             ENDIF)")
                                (("1"
                                  (name
                                   "FirstProbHcrit"
                                   "IF FirstNonHRep < 0 THEN MaxN + 1 ELSE FirstNonHRep ENDIF")
                                  (("1"
                                    (name
                                     "FirstProbHL"
                                     "min(FirstProbLOS, FirstProbHcrit)")
                                    (("1"
                                      (name
                                       "FirstNonVRep"
                                       "(IF (NOT UseVCrit) OR FirstProbHL = 0 THEN FirstProbHL
                                                                     ELSE first_nonvert_repul_step(traj,
                                                                                                   0,
                                                                                                   ts,
                                                                                                   FirstProbHL - 1,
                                                                                                   MI`s,
                                                                                                   MI`v,
                                                                                                   epsV)
                                                                     ENDIF)")
                                      (("1"
                                        (name
                                         "FirstProbVcrit"
                                         "IF FirstNonVRep < 0 THEN MaxN + 1 ELSE FirstNonVRep ENDIF")
                                        (("1"
                                          (name
                                           "FirstProbVHL"
                                           "min(FirstProbHL, FirstProbVcrit)")
                                          (("1"
                                            (name
                                             "CDSearchIndex"
                                             "FirstProbVHL - 1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -9)
                                                (("1"
                                                  (replace -8)
                                                  (("1"
                                                    (replace -7)
                                                    (("1"
                                                      (replace -6)
                                                      (("1"
                                                        (replace -5)
                                                        (("1"
                                                          (replace -4)
                                                          (("1"
                                                            (replace
                                                             -3)
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (lift-if
                                                                   "kbdef")
                                                                  (("1"
                                                                    (split
                                                                     "kbdef")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replaces
                                                                           -2)
                                                                          (("1"
                                                                            (case
                                                                             "NOT FirstProbVHL = 0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 2)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "min")
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil)))))))))))))
                                                                             ("2"
                                                                              (replaces
                                                                               -1
                                                                               +)
                                                                              (("2"
                                                                                (hide
                                                                                 -)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil)))))))))))))
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (name
                                                                         "tcob"
                                                                         "traj_conflict_only_bands(CD,
                                                                                                                               B,
                                                                                                                               T,
                                                                                                                               traj,
                                                                                                                               CDSearchIndex,
                                                                                                                               ts,
                                                                                                                               AL)")
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (name
                                                                             "others"
                                                                             "(# lb := FirstProbVHL, ub := MaxN #)")
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "NOT CDSearchIndex = MaxN")
                                                                                      (("1"
                                                                                        (hide
                                                                                         3)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -3
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -4
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "min"
                                                                                                   (-1
                                                                                                    +))
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (replaces
                                                                                                                   -1
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil)))
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "FirstProbHL<=MaxN+1")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "FirstProbHL"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "min"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (lift-if)
                                                                                                                              (("2"
                                                                                                                                (ground)
                                                                                                                                (("1"
                                                                                                                                  (typepred
                                                                                                                                   "FirstLos")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil)))
                                                                                                                                 ("2"
                                                                                                                                  (typepred
                                                                                                                                   "FirstLos")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil)))
                                                                                                                                 ("3"
                                                                                                                                  (typepred
                                                                                                                                   "FirstLos")
                                                                                                                                  (("3"
                                                                                                                                    (assert)
                                                                                                                                    nil)))))))))))))))))))))))))))
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "FirstProbHL<=MaxN+1")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (-1
                                                                                                                    -2
                                                                                                                    +))
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "FORALL (z1,z2:int): z1<=z2 AND z1>z2-1 IMPLIES z1=z2")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "FirstProbHL-1"
                                                                                                                       "MaxN")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil)))
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil)))))))))
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "FirstProbHL"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (case
                                                                                                                   "FirstLos<=1+MaxN")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "min"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (lift-if)
                                                                                                                      (("1"
                                                                                                                        (ground)
                                                                                                                        nil)))))
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (typepred
                                                                                                                       "FirstLos")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil)))))))))))))))))))))))))))))))))
                                                                                       ("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "tcob")
                                                                                              (("2"
                                                                                                (replaces
                                                                                                 "kbdef"
                                                                                                 +)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "tcob")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "Bands?")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "strictly_increasing_int?")
                                                                                                          (("2"
                                                                                                            (split
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (skeep)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "i")
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  nil)))))
                                                                                                             ("2"
                                                                                                              (skeep)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "i"
                                                                                                                 "j")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil)))))))))))))))))))))))))))))))))
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1
                                                                                     +)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "strictly_increasing_int?"
                                                                                       +)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "tcob")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "Bands?")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -7)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -9)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   +)
                                                                                                  (("1"
                                                                                                    (skeep)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "nth_append")
                                                                                                      (("1"
                                                                                                        (lift-if
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "i")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil)))))
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "NOT i = length(tcob)")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "i")
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "length_append[IntBand]")
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "length"
                                                                                                                             -1
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "length"
                                                                                                                               -1
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil)))))))))))))))))
                                                                                                               ("2"
                                                                                                                (replaces
                                                                                                                 -1
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "nth"
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "others"
                                                                                                                       +)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil)))))))))))))))))
                                                                                                       ("2"
                                                                                                        (typepred
                                                                                                         "i")
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "length_append[IntBand]")
                                                                                                          (("2"
                                                                                                            (inst?)
                                                                                                            (("2"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil)))))))))))))
                                                                                                   ("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "nth_append"
                                                                                                       +)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "nth_append"
                                                                                                         +)
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (lift-if)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   +)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (split
                                                                                                                         +)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "i"
                                                                                                                             "j")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil)))))
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "NOT j = length(tcob)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (typepred
                                                                                                                                 "j")
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "length_append[IntBand]")
                                                                                                                                  (("1"
                                                                                                                                    (inst?)
                                                                                                                                    (("1"
                                                                                                                                      (replaces
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "length"
                                                                                                                                         -1
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "length"
                                                                                                                                           -1
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil)))))))))))))))
                                                                                                                             ("2"
                                                                                                                              (replace
                                                                                                                               -1
                                                                                                                               :dir
                                                                                                                               rl)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "nth"
                                                                                                                                   +
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "others"
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "i")
                                                                                                                                        (("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil)))))))))))))))))))))))))
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "j")
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "length_append[IntBand]")
                                                                                                                          (("2"
                                                                                                                            (inst?)
                                                                                                                            (("2"
                                                                                                                              (replaces
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "length"
                                                                                                                                 -1
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "length"
                                                                                                                                   -1
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil)))))))))))))))))))))))))))
                                                                                                         ("2"
                                                                                                          (typepred
                                                                                                           "j")
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "length_append[IntBand]")
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              (("2"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil)))))))))))
                                                                                                       ("2"
                                                                                                        (typepred
                                                                                                         "i")
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "length_append[IntBand]")
                                                                                                          (("2"
                                                                                                            (inst?)
                                                                                                            (("2"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil)))))))))))))))))))))))))))))))))))))))
                                                                         ("2"
                                                                          (assert)
                                                                          nil)))))))))))))))))))))))))))))))))))
                                       ("2"
                                        (hide (-9 2))
                                        (("2"
                                          (expand "min")
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (ground)
                                              nil)))))))))))))
                                 ("2"
                                  (hide (-6 2))
                                  (("2"
                                    (expand "min")
                                    (("2"
                                      (lift-if)
                                      (("2" (ground) nil)))))))))))
                             ("2" (assert)
                              nil))))))))))))))))))))))))))
    nil)
   nil nil))
 (kinematic_bands_increasing 0
  (kinematic_bands_increasing-1 nil 3631967967
   ("" (skeep)
    (("" (skoletin 1)
      (("" (lemma "kinematic_bands_connected")
        (("" (inst?)
          (("" (assert)
            (("" (replace -2 :dir rl)
              (("" (assert)
                (("" (expand "strictly_increasing_int?")
                  (("" (split 1)
                    (("1" (expand "kinematic_bands" :assert? none)
                      (("1"
                        (name "bsi"
                              "bands_search_index(LOS, CD, LOS2, CD2, useLOS2, B, T, B2, T2,
                                                  so, vo, traj, MaxN, ts, AL, most_urgent,
                                                  epsH, epsV, UseHCrit, UseVCrit)")
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (typepred "i!1")
                                    (("1"
                                      (replaces -3)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (name
                                   "tcob"
                                   "traj_conflict_only_bands(CD,
                                                      CD2,
                                                      useLOS2,
                                                      B,
                                                      T,
                                                      B2,
                                                      T2,
                                                      traj,
                                                      bsi-1,
                                                      ts,
                                                      AL)")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred "tcob")
                                        (("2"
                                          (expand "Bands?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst - "i")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (inst - "i" "j") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (traj_conflict_only_bands const-decl "(Bands?(maxi, 0, maxi,
        (LAMBDA (j: nat):
           (NOT first_conflict_aircraft(CD, B, T, traj, j, ts, 0, AL) >= 0)
            AND
            (NOT (useLOS2 AND
                   first_conflict_aircraft(CD2, B2, T2, traj, j, ts, 0, AL)
                    >= 0))),
        -1))" int_bands nil)
    (first_conflict_aircraft def-decl "{j: int |
   (j >= 0 IFF
     (i <= j AND
       j < length(AL) AND
        CD_future_traj(CD, B, T, traj, k * tsn, AL, j) AND
         (FORALL (q: int):
            q >= i AND q < j IMPLIES
             NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q))))
    AND
    (j < 0 IFF
      (FORALL (q: int):
         q >= i AND q < length(AL) IMPLIES
          NOT CD_future_traj(CD, B, T, traj, k * tsn, AL, q)))}"
     int_bands nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (CD_future_traj const-decl "bool" int_bands nil)
    (Bands? const-decl "bool" int_bands nil)
    (length_null formula-decl nil more_list_props structures)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (bands_search_index const-decl "subrange(0, MaxN + 1)"
     kinematic_bands nil)
    (subrange type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (kinematic_bands_connected formula-decl nil kinematic_bands nil)
    (strictly_increasing_int? const-decl "bool" int_bands nil)
    (kinematic_bands const-decl "(proper?(MaxN))" kinematic_bands nil)
    (proper? const-decl "bool" int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (AircraftList type-eq-decl nil int_bands nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (string type-eq-decl nil strings nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Traj type-eq-decl nil int_bands nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (IntBand type-eq-decl nil int_bands nil)
    (int nonempty-type-eq-decl nil integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil)))

