(get_kinematic_bands
 (skip_first_TCC1 0
  (skip_first_TCC1-1 nil 3687773789 ("" (subtype-tcc) nil nil) nil nil
   (skip_first subtype "get_kinematic_bands.pre"
    "(list_adt[[nat, BandsOut]].cons?)")))
 (get_kinematic_trk_pre_TCC1 0
  (get_kinematic_trk_pre_TCC1-1 nil 3683562998
   ("" (skeep :preds? t)
    (("" (expand "pc_comp")
      (("" (flatten) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pc_comp const-decl "bool" kinematic_core nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil
   (get_kinematic_trk_pre subtype "get_kinematic_bands.par`trk_step"
    "{trkstep: real_types.posreal | booleans.AND(reals.<(trkstep, pi_def.pi), booleans.AND(reals.<=(number_fields.*(trkstep, kinematic_trk_bands.round(number_fields./(get_kinematic_bands.par`left_trk, trkstep))), pi_def.pi), reals.<=(number_fields.*(trkstep, kinematic_trk_bands.round(number_fields./(get_kinematic_bands.par`right_trk, trkstep))), pi_def.pi)))}")))
 (get_kinematic_trk_pre_TCC2 0
  (get_kinematic_trk_pre_TCC2-2 "" 3813485092
   ("" (skeep)
    (("" (typepred "ucore`ownship")
      (("" (expand "gs")
        (("" (expand "norm")
          (("" (lemma "sqrt_gt_0")
            (("" (inst -1 "sqv(vect2(ucore`ownship`v))")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (get_kinematic_trk_pre subtype "get_kinematic_bands.ucore`ownship"
    "{air: int_bands.Aircraft | reals.>(vectors_2D.sqv(vect_3D_2D.vect2(air`v)), 0)}"))
  (get_kinematic_trk_pre_TCC2-1 nil 3683562998
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (typepred "ucore`ownship")
          (("" (expand "gs")
            (("" (expand "norm")
              (("" (lemma "sqrt_gt_0")
                (("" (inst -1 "sqv(vect2(ucore`ownship`v))")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqrt_gt_0 formula-decl nil sqrt reals)
    (norm const-decl "nnreal" vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (gs const-decl "nnreal" Velocity aviation)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Parameters type-eq-decl nil kinematic_core nil)
    (pc_comp const-decl "bool" kinematic_core nil))
   nil
   (get_kinematic_trk_pre subtype "get_kinematic_bands.ucore`ownship"
    "{air: int_bands.Aircraft | reals.>(vectors_2D.sqv(vect_3D_2D.vect2(air`v)), 0)}")))
 (get_kinematic_trk_pre_TCC3 0
  (get_kinematic_trk_pre_TCC3-1 nil 3683562998
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (nnreal type-eq-decl nil real_types nil)
    (gs const-decl "nnreal" Velocity aviation)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Parameters type-eq-decl nil kinematic_core nil)
    (pc_comp const-decl "bool" kinematic_core nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (round const-decl "{j: int | r - 1 / 2 < j AND j <= r + 1 / 2}"
           kinematic_trk_bands nil))
   nil
   (get_kinematic_trk_pre subtype
    "get_kinematic_bands.ucore`conf_traffic_split"
    "{L: list_adt[[nat, [int_bands.Traffic, int_bands.Traffic]]].list | list_props[[nat, [int_bands.Traffic, int_bands.Traffic]]].length(L) = list_props[AlertTable].length(get_kinematic_bands.par`alertor`2)}")))
 (get_kinematic_vs_pre_TCC1 0
  (get_kinematic_vs_pre_TCC1-2 "" 3813485092
   ("" (skeep)
    (("" (typepred "ucore`ownship")
      (("" (expand "gs")
        (("" (expand "norm")
          (("" (lemma "sqrt_gt_0")
            (("" (inst -1 "sqv(vect2(ucore`ownship`v))")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (get_kinematic_vs_pre subtype "get_kinematic_bands.ucore`ownship"
    "{air: int_bands.Aircraft | reals.>(vectors_2D.sqv(vect_3D_2D.vect2(air`v)), 0)}"))
  (get_kinematic_vs_pre_TCC1-1 nil 3683562998
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (typepred "ucore`ownship")
          (("" (expand "gs")
            (("" (expand "norm")
              (("" (lemma "sqrt_gt_0")
                (("" (inst -1 "sqv(vect2(ucore`ownship`v))")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqrt_gt_0 formula-decl nil sqrt reals)
    (norm const-decl "nnreal" vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (gs const-decl "nnreal" Velocity aviation)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Parameters type-eq-decl nil kinematic_core nil)
    (pc_comp const-decl "bool" kinematic_core nil))
   nil
   (get_kinematic_vs_pre subtype "get_kinematic_bands.ucore`ownship"
    "{air: int_bands.Aircraft | reals.>(vectors_2D.sqv(vect_3D_2D.vect2(air`v)), 0)}")))
 (get_kinematic_vs_pre_TCC2 0
  (get_kinematic_vs_pre_TCC2-1 nil 3683562998
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (nnreal type-eq-decl nil real_types nil)
    (gs const-decl "nnreal" Velocity aviation)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Parameters type-eq-decl nil kinematic_core nil)
    (pc_comp const-decl "bool" kinematic_core nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (round const-decl "{j: int | r - 1 / 2 < j AND j <= r + 1 / 2}"
           kinematic_trk_bands nil))
   nil
   (get_kinematic_vs_pre subtype
    "get_kinematic_bands.ucore`conf_traffic_split"
    "{L: list_adt[[nat, [int_bands.Traffic, int_bands.Traffic]]].list | list_props[[nat, [int_bands.Traffic, int_bands.Traffic]]].length(L) = list_props[AlertTable].length(get_kinematic_bands.par`alertor`2)}")))
 (get_kinematic_gs_pre_TCC1 0
  (get_kinematic_gs_pre_TCC1-2 "" 3813485093
   ("" (skeep)
    (("" (typepred "ucore`ownship")
      (("" (lemma "sqrt_gt_0")
        (("" (expand "gs")
          (("" (expand "norm")
            (("" (inst -1 "sqv(vect2(ucore`ownship`v))")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (get_kinematic_gs_pre subtype "get_kinematic_bands.ucore`ownship"
    "{air: int_bands.Aircraft | reals.>(vectors_2D.sqv(vect_3D_2D.vect2(air`v)), 0)}"))
  (get_kinematic_gs_pre_TCC1-1 nil 3683562998
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (typepred "ucore`ownship")
          (("" (lemma "sqrt_gt_0")
            (("" (expand "gs")
              (("" (expand "norm")
                (("" (inst -1 "sqv(vect2(ucore`ownship`v))")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (sqrt_gt_0 formula-decl nil sqrt reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (gs const-decl "nnreal" Velocity aviation)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Parameters type-eq-decl nil kinematic_core nil)
    (pc_comp const-decl "bool" kinematic_core nil))
   nil
   (get_kinematic_gs_pre subtype "get_kinematic_bands.ucore`ownship"
    "{air: int_bands.Aircraft | reals.>(vectors_2D.sqv(vect_3D_2D.vect2(air`v)), 0)}")))
 (get_kinematic_gs_pre_TCC2 0
  (get_kinematic_gs_pre_TCC2-1 nil 3683562998
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (nnreal type-eq-decl nil real_types nil)
    (gs const-decl "nnreal" Velocity aviation)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Parameters type-eq-decl nil kinematic_core nil)
    (pc_comp const-decl "bool" kinematic_core nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (round const-decl "{j: int | r - 1 / 2 < j AND j <= r + 1 / 2}"
           kinematic_trk_bands nil))
   nil
   (get_kinematic_gs_pre subtype
    "get_kinematic_bands.ucore`conf_traffic_split"
    "{L: list_adt[[nat, [int_bands.Traffic, int_bands.Traffic]]].list | list_props[[nat, [int_bands.Traffic, int_bands.Traffic]]].length(L) = list_props[AlertTable].length(get_kinematic_bands.par`alertor`2)}")))
 (get_kinematic_alt_pre_TCC1 0
  (get_kinematic_alt_pre_TCC1-1 nil 3683562998
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (nnreal type-eq-decl nil real_types nil)
    (gs const-decl "nnreal" Velocity aviation)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Parameters type-eq-decl nil kinematic_core nil)
    (pc_comp const-decl "bool" kinematic_core nil)
    (round const-decl "{j: int | r - 1 / 2 < j AND j <= r + 1 / 2}"
           kinematic_trk_bands nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (get_kinematic_alt_pre subtype "get_kinematic_bands.par`max_alt"
    "{maxalt: real_types.posreal | reals.<(get_kinematic_bands.par`min_alt, maxalt)}")))
 (get_kinematic_alt_pre_TCC2 0
  (get_kinematic_alt_pre_TCC2-2 "" 3813485093
   ("" (skeep)
    (("" (typepred "ucore`ownship")
      (("" (expand "gs")
        (("" (expand "norm")
          (("" (lemma "sqrt_gt_0")
            (("" (inst -1 "sqv(vect2(ucore`ownship`v))")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (get_kinematic_alt_pre subtype "get_kinematic_bands.ucore`ownship"
    "{air: int_bands.Aircraft | reals.>(vectors_2D.sqv(vect_3D_2D.vect2(air`v)), 0)}"))
  (get_kinematic_alt_pre_TCC2-1 nil 3683562998
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (typepred "ucore`ownship")
          (("" (expand "gs")
            (("" (expand "norm")
              (("" (lemma "sqrt_gt_0")
                (("" (inst -1 "sqv(vect2(ucore`ownship`v))")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sqrt_gt_0 formula-decl nil sqrt reals)
    (norm const-decl "nnreal" vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (gs const-decl "nnreal" Velocity aviation)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Parameters type-eq-decl nil kinematic_core nil)
    (pc_comp const-decl "bool" kinematic_core nil))
   nil
   (get_kinematic_alt_pre subtype "get_kinematic_bands.ucore`ownship"
    "{air: int_bands.Aircraft | reals.>(vectors_2D.sqv(vect_3D_2D.vect2(air`v)), 0)}")))
 (get_kinematic_alt_pre_TCC3 0
  (get_kinematic_alt_pre_TCC3-1 nil 3683562998
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (Velocity type-eq-decl nil Velocity aviation)
    (nnreal type-eq-decl nil real_types nil)
    (gs const-decl "nnreal" Velocity aviation)
    (Core type-eq-decl nil kinematic_core nil)
    (updated? const-decl "bool" kinematic_core nil)
    (UpdatedCore type-eq-decl nil kinematic_core nil)
    (Alertor type-eq-decl nil alertor nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Parameters type-eq-decl nil kinematic_core nil)
    (pc_comp const-decl "bool" kinematic_core nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (round const-decl "{j: int | r - 1 / 2 < j AND j <= r + 1 / 2}"
           kinematic_trk_bands nil))
   nil
   (get_kinematic_alt_pre subtype
    "get_kinematic_bands.ucore`conf_traffic_split"
    "{L: list_adt[[nat, [int_bands.Traffic, int_bands.Traffic]]].list | list_props[[nat, [int_bands.Traffic, int_bands.Traffic]]].length(L) = list_props[AlertTable].length(get_kinematic_bands.par`alertor`2)}")))
 (current_region_TCC1 0
  (current_region_TCC1-1 nil 3683562998 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Region type-decl nil alertor nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (RealBand type-eq-decl nil real_bands nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (current_region subtype "get_kinematic_bands.band_index"
    "below[length[RealBand](bands)]")))
 (current_region_TCC2 0
  (current_region_TCC2-1 nil 3683562998 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Region type-decl nil alertor nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (RealBand type-eq-decl nil real_bands nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (current_region subtype "get_kinematic_bands.band_index"
    "below[length[Region](regions)]")))
 (current_region_TCC3 0
  (current_region_TCC3-1 nil 3683562998 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Region type-decl nil alertor nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (RealBand type-eq-decl nil real_bands nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (current_region subtype "get_kinematic_bands.band_index"
    "below[length[Region](regions)]")))
 (current_region_TCC4 0
  (current_region_TCC4-1 nil 3683562998 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Region type-decl nil alertor nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (RealBand type-eq-decl nil real_bands nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (current_region subtype
    "(number_fields.+)(get_kinematic_bands.band_index, 1)"
    "below[length[Region](regions)]")))
 (current_region_TCC5 0
  (current_region_TCC5-1 nil 3683562998 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Region type-decl nil alertor nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (RealBand type-eq-decl nil real_bands nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (current_region subtype
    "(number_fields.-)(list_props[alertor.Region].length(get_kinematic_bands.regions), 1)"
    "below[length[Region](regions)]")))
 (current_region_TCC6 0
  (current_region_TCC6-1 nil 3683562998 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Region type-decl nil alertor nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (RealBand type-eq-decl nil real_bands nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (current_region subtype "get_kinematic_bands.band_index"
    "below[length[Region](regions)]")))
 (current_region_TCC7 0
  (current_region_TCC7-1 nil 3683562998 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Region type-decl nil alertor nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (RealBand type-eq-decl nil real_bands nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (current_region subtype "get_kinematic_bands.band_index"
    "below[length[Region](regions)]")))
 (current_region_TCC8 0
  (current_region_TCC8-1 nil 3683562998 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Region type-decl nil alertor nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (RealBand type-eq-decl nil real_bands nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (in? const-decl "bool" real_bands nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (current_region subtype
    "(number_fields.-)(get_kinematic_bands.band_index, 1)"
    "below[length[Region](regions)]"))))

