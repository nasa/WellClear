(tcasra3d
 (coalt_entry_exit_lookahead_TCC1 0
  (coalt_entry_exit_lookahead_TCC1-1 nil 3548604603
   ("" (skeep) (("" (min_max) (("" (assert) nil nil)) nil)) nil)
   ((TRUE const-decl "bool" booleans nil)
    (min_le formula-decl nil real_defs nil)
    (le_max formula-decl nil real_defs nil)
    (max_ge formula-decl nil real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_le formula-decl nil real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" tcasra3d nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (> const-decl "bool" reals nil)
    (T formal-const-decl "{AB: nnreal | AB > B}" tcasra3d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (coalt_entry_exit_lookahead subtype
    "real_defs.max(tcasra3d.B, real_defs.min(tcasra3d.T, tcasra3d.centry))"
    "Lookahead[B, T]")))
 (coalt_entry_exit_lookahead_TCC2 0
  (coalt_entry_exit_lookahead_TCC2-1 nil 3548604603
   ("" (skeep) (("" (min_max) (("" (assert) nil nil)) nil)) nil)
   ((TRUE const-decl "bool" booleans nil)
    (min_le formula-decl nil real_defs nil)
    (le_max formula-decl nil real_defs nil)
    (max_ge formula-decl nil real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_le formula-decl nil real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" tcasra3d nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (> const-decl "bool" reals nil)
    (T formal-const-decl "{AB: nnreal | AB > B}" tcasra3d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (coalt_entry_exit_lookahead subtype
    "real_defs.max(tcasra3d.B, real_defs.min(tcasra3d.T, tcasra3d.cexit))"
    "Lookahead[B, T]")))
 (coalt_entry_exit_lookahead_TCC3 0
  (coalt_entry_exit_lookahead_TCC3-1 nil 3548604603
   ("" (skeep) (("" (min_max) (("" (ground) nil nil)) nil)) nil)
   ((TRUE const-decl "bool" booleans nil)
    (le_min formula-decl nil real_defs nil)
    (min_le formula-decl nil real_defs nil)
    (le_max formula-decl nil real_defs nil)
    (max_le formula-decl nil real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" tcasra3d nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (> const-decl "bool" reals nil)
    (T formal-const-decl "{AB: nnreal | AB > B}" tcasra3d nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (coalt_entry_exit_lookahead subtype
    "(real_defs.max(tcasra3d.B, real_defs.min(tcasra3d.T, tcasra3d.centry)), real_defs.max(tcasra3d.B, real_defs.min(tcasra3d.T, tcasra3d.cexit)))"
    "{lr: [Lookahead[tcasra3d.B, tcasra3d.T].Lookahead, Lookahead[tcasra3d.B, tcasra3d.T].Lookahead] | reals.<=(lr`1, lr`2)}")))
 (coalt_entry_exit_lookahead_def 0
  (coalt_entry_exit_lookahead_def-1 nil 3548604605
   ("" (skeep)
    (("" (skoletin 1)
      (("" (flatten)
        (("" (lemma "coalt_entry_exit_def")
          (("" (inst?)
            (("" (assert)
              (("" (replace -1)
                (("" (hide -1)
                  (("" (expand "coalt_entry_exit_lookahead")
                    (("" (expand "min")
                      (("" (expand "max")
                        (("" (lift-if)
                          (("" (lift-if)
                            (("" (lift-if)
                              ((""
                                (assert)
                                (("" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (B formal-const-decl "nnreal" tcasra3d nil)
    (> const-decl "bool" reals nil)
    (T formal-const-decl "{AB: nnreal | AB > B}" tcasra3d nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (coalt_entry_exit_lookahead const-decl
     "{lr: [Lookahead[B, T], Lookahead[B, T]] | LET (lr1, lr2) = lr IN lr1 <= lr2}"
     tcasra3d nil)
    (vertical_RA_at const-decl "bool" tcasra nil)
    (HMD formal-const-decl "posreal" tcasra3d nil)
    (ZTHR formal-const-decl "posreal" tcasra3d nil)
    (DMOD formal-const-decl "posreal" tcasra3d nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TCOA formal-const-decl "nnreal" tcasra3d nil)
    (TAU formal-const-decl "nnreal" tcasra3d nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (coalt_entry_exit_def formula-decl nil tcasra nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (ra_cd2d_after 0
  (ra_cd2d_after-1 nil 3574592188
   ("" (skeep)
    (("" (expand "cd2d_TCAS_after")
      (("" (flatten)
        (("" (case "sqv(vect2(vo-vi))=0")
          (("1" (assert)
            (("1" (hide 2)
              (("1" (rewrite "sqv_eq_0")
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (rewrite "vect2_sub")
                      (("1" (rewrite "sub_eq_zero")
                        (("1" (expand "ra_3D?")
                          (("1" (skosimp*)
                            (("1" (expand "TCASII_RA_at")
                              (("1"
                                (expand "TCASII_RA_def")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide (-3 -4))
                                    (("1"
                                      (grind :exclude "sqv")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (hide 2)
              (("2"
                (case "NOT Delta[HMD](vect2(so - si), vect2(vo - vi)) >= 0")
                (("1" (hide 3)
                  (("1" (rewrite "Delta_ge_0_2")
                    (("1" (expand "ra_3D?")
                      (("1" (skosimp*)
                        (("1" (expand "TCASII_RA_at")
                          (("1" (expand "TCASII_RA_def")
                            (("1" (flatten)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst + "t!1+nnt!1")
                                  (("1"
                                    (hide-all-but (-1 1))
                                    (("1"
                                      (grind :exclude "sqv")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (replaces -1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "ra_3D?")
                    (("2" (skosimp*)
                      (("2" (expand "TCASII_RA_at")
                        (("2" (expand "TCASII_RA_def")
                          (("2" (flatten)
                            (("2" (skosimp*)
                              (("2"
                                (lemma "horizontal_sep_outside_Theta")
                                (("2"
                                  (inst - "vo-vi" "so-si" "t!1+nnt!1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide-all-but (-1 -3))
                                      (("2"
                                        (grind :exclude "sqv")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cd2d_TCAS_after const-decl "bool" tcasra nil)
    (Vector type-eq-decl nil vectors_3D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (vect2_sub formula-decl nil vect_3D_2D vectors)
    (ra_3D? const-decl "bool" tcasra3d nil)
    (TCASII_RA_at const-decl "bool" tcasra nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (TCASII_RA_def const-decl "bool" tcasra nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (horizontal_sep_outside_Theta formula-decl nil horizontal ACCoRD)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (T formal-const-decl "{AB: nnreal | AB > B}" tcasra3d nil)
    (B formal-const-decl "nnreal" tcasra3d nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Delta_ge_0_2 formula-decl nil horizontal ACCoRD)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (Delta const-decl "real" horizontal ACCoRD)
    (HMD formal-const-decl "posreal" tcasra3d nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil))
   nil))
 (RA3D_interval_TCC1 0
  (RA3D_interval_TCC1-1 nil 3571573989
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (RA3D_interval subtype "tcasra3d.T" "Lookahead[B, T]")))
 (RA3D_interval_TCC2 0
  (RA3D_interval_TCC2-1 nil 3571573989
   ("" (skeep*) (("" (assert) (("" (assert) nil nil)) nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (RA3D_interval subtype "tcasra3d.T"
    "{AB: real_types.nnreal | reals.>=(AB, tcasra3d.B)}")))
 (RA3D_interval_TCC3 0
  (RA3D_interval_TCC3-2 nil 3571574243
   ("" (skeep*) (("" (assert) (("" (assert) nil nil)) nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (RA3D_interval subtype "tcasra3d.B" "Lookahead[B, T]"))
  (RA3D_interval_TCC3-1 nil 3571573989 ("" (subtype-tcc) nil nil)
   ((vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (det const-decl "real" det_2D vectors)
    (Delta const-decl "real" horizontal ACCoRD)
    (cd2d_inf? const-decl "bool" cd2d_inf ACCoRD))
   nil (RA3D_interval subtype "tcasra3d.B" "Lookahead[B, T]")))
 (RA3D_interval_TCC4 0
  (RA3D_interval_TCC4-2 nil 3571574251
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil (RA3D_interval subtype "tcasra3d.T" "Lookahead[B, T]"))
  (RA3D_interval_TCC4-1 nil 3571573989 ("" (subtype-tcc) nil nil)
   ((vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (det const-decl "real" det_2D vectors)
    (Delta const-decl "real" horizontal ACCoRD)
    (cd2d_inf? const-decl "bool" cd2d_inf ACCoRD))
   nil (RA3D_interval subtype "tcasra3d.T" "Lookahead[B, T]")))
 (RA3D_interval_TCC5 0
  (RA3D_interval_TCC5-2 nil 3571574264
   ("" (skeep*) (("" (assert) (("" (assert) nil nil)) nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (RA3D_interval subtype "tcasra3d.T"
    "{AB: real_types.nnreal | reals.>=(AB, tcasra3d.B)}"))
  (RA3D_interval_TCC5-1 nil 3571573989 ("" (subtype-tcc) nil nil)
   ((vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (det const-decl "real" det_2D vectors)
    (Delta const-decl "real" horizontal ACCoRD)
    (cd2d_inf? const-decl "bool" cd2d_inf ACCoRD)
    (Theta_H const-decl "real" vertical ACCoRD))
   nil
   (RA3D_interval subtype "tcasra3d.T"
    "{AB: real_types.nnreal | reals.>=(AB, tcasra3d.B)}")))
 (RA3D_interval_TCC6 0
  (RA3D_interval_TCC6-1 nil 3571573989
   ("" (skosimp*) (("" (assert) (("" (assert) nil nil)) nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil (RA3D_interval subtype "tcasra3d.B" "Lookahead[B, T]")))
 (RA3D_interval_TCC7 0
  (RA3D_interval_TCC7-2 nil 3571574292
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil))
   nil (RA3D_interval subtype "tcasra3d.nzvz" "nzreal"))
  (RA3D_interval_TCC7-1 nil 3571573989 ("" (subtype-tcc) nil nil)
   ((vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (det const-decl "real" det_2D vectors)
    (Delta const-decl "real" horizontal ACCoRD)
    (cd2d_inf? const-decl "bool" cd2d_inf ACCoRD)
    (Theta_H const-decl "real" vertical ACCoRD))
   nil (RA3D_interval subtype "tcasra3d.nzvz" "nzreal")))
 (RA3D_interval_TCC8 0
  (RA3D_interval_TCC8-2 nil 3571574310
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil (RA3D_interval subtype "tcasra3d.T" "Lookahead[B, T]"))
  (RA3D_interval_TCC8-1 nil 3571573989 ("" (subtype-tcc) nil nil)
   ((sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (det const-decl "real" det_2D vectors)
    (Delta const-decl "real" horizontal ACCoRD)
    (cd2d_inf? const-decl "bool" cd2d_inf ACCoRD)
    (Theta_H const-decl "real" vertical ACCoRD))
   nil (RA3D_interval subtype "tcasra3d.T" "Lookahead[B, T]")))
 (RA3D_interval_TCC9 0
  (RA3D_interval_TCC9-1 nil 3571573989
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (RA3D_interval subtype "tcasra3d.T"
    "{AB: real_types.nnreal | reals.>=(AB, tcasra3d.B)}")))
 (RA3D_interval_TCC10 0
  (RA3D_interval_TCC10-1 nil 3571573989
   ("" (skeep*) (("" (assert) (("" (assert) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil (RA3D_interval subtype "tcasra3d.B" "Lookahead[B, T]")))
 (RA3D_interval_TCC11 0
  (RA3D_interval_TCC11-1 nil 3571752412
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil (RA3D_interval subtype "tcasra3d.tin" "nnreal")))
 (RA3D_interval_TCC12 0
  (RA3D_interval_TCC12-1 nil 3571752412
   ("" (skeep*)
    (("" (replaces (-7 -8))
      (("" (min_max)
        (("" (assert)
          (("" (lift-if -3)
            (("" (split -3)
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T formal-const-decl "{AB: nnreal | AB > B}" tcasra3d nil)
    (B formal-const-decl "nnreal" tcasra3d nil)
    (> const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (min_ge formula-decl nil real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ge_max formula-decl nil real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (RA3D_interval subtype "tcasra3d.tout"
    "{AB: real_types.nnreal | reals.>=(AB, tcasra3d.tin)}")))
 (RA3D_interval_TCC13 0
  (RA3D_interval_TCC13-1 nil 3571752412
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil (RA3D_interval subtype "tcasra3d.T" "Lookahead[B, T]")))
 (RA3D_interval_TCC14 0
  (RA3D_interval_TCC14-2 nil 3574466728
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (RA3D_interval subtype "tcasra3d.T"
    "{AB: real_types.nnreal | reals.>=(AB, tcasra3d.B)}"))
  (RA3D_interval_TCC14-1 nil 3573464150
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis))
   nil
   (RA3D_interval subtype "tcasra3d.T"
    "{AB: real_types.nnreal | reals.>=(AB, tcasra3d.B)}")))
 (RA3D_interval_TCC15 0
  (RA3D_interval_TCC15-2 nil 3574466786
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil (RA3D_interval subtype "tcasra3d.B" "Lookahead[B, T]"))
  (RA3D_interval_TCC15-1 nil 3573464150
   ("" (skeep*)
    (("" (splash 10)
      (("1" (flatten) (("1" (assert) nil nil)) nil)
       ("2" (flatten)
        (("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Delta const-decl "real" horizontal ACCoRD)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors))
   nil (RA3D_interval subtype "tcasra3d.B" "Lookahead[B, T]")))
 (RA3D_interval_TCC16 0
  (RA3D_interval_TCC16-1 nil 3573464150
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil (RA3D_interval subtype "tcasra3d.T" "Lookahead[B, T]")))
 (RA3D_interval_TCC17 0
  (RA3D_interval_TCC17-1 nil 3573464150
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (RA3D_interval subtype "tcasra3d.T"
    "{AB: real_types.nnreal | reals.>=(AB, tcasra3d.B)}")))
 (RA3D_interval_TCC18 0
  (RA3D_interval_TCC18-2 nil 3574467474
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil (RA3D_interval subtype "tcasra3d.B" "Lookahead[B, T]"))
  (RA3D_interval_TCC18-1 nil 3573464150
   ("" (skosimp*)
    (("" (assert)
      (("" (replace -13 +)
        (("" (replace -9 +)
          (("" (replace -8 +)
            (("" (hide-all-but 10) (("" (min_max) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis))
   nil (RA3D_interval subtype "tcasra3d.B" "Lookahead[B, T]")))
 (RA3D_interval_TCC19 0
  (RA3D_interval_TCC19-1 nil 3573811522
   ("" (skeep*)
    (("" (splash 10)
      (("1" (expand "cd2d_TCAS_after") (("1" (assert) nil nil)) nil)
       ("2" (flatten)
        (("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (/= const-decl "boolean" notequal nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (HMD formal-const-decl "posreal" tcasra3d nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cd2d_TCAS_after const-decl "bool" tcasra nil)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (RA3D_interval subtype
    "vect_3D_2D.vect2((vectors_3D.-)(tcasra3d.vo, tcasra3d.vi))"
    "{nzv | reals.>=(horizontal[tcasra3d.HMD].Delta(vect_3D_2D.vect2((vectors_3D.-)(tcasra3d.so, tcasra3d.si)), horizontal.nzv), 0)}")))
 (RA3D_interval_TCC20 0
  (RA3D_interval_TCC20-1 nil 3574465994
   ("" (skeep*)
    (("" (assert)
      (("" (replaces -17)
        (("" (min_max)
          (("" (replaces -12)
            (("" (min_max)
              (("" (replaces -8) (("" (min_max) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_min formula-decl nil real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" tcasra3d nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (> const-decl "bool" reals nil)
    (T formal-const-decl "{AB: nnreal | AB > B}" tcasra3d nil)
    (max_le formula-decl nil real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (RA3D_interval subtype "tcasra3d.RAin2D_lookahead"
    "Lookahead[B, T]")))
 (RA3D_interval_TCC21 0
  (RA3D_interval_TCC21-1 nil 3574465994
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil (RA3D_interval subtype "tcasra3d.RAin2D_lookahead" "nnreal")))
 (RA3D_interval_TCC22 0
  (RA3D_interval_TCC22-2 nil 3574695565
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (RA3D_interval subtype "tcasra3d.minRAoutTheta"
    "{AB: real_types.nnreal | reals.>=(AB, tcasra3d.RAin2D_lookahead)}"))
  (RA3D_interval_TCC22-1 nil 3574465994
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis))
   nil
   (RA3D_interval subtype "tcasra3d.minRAoutTheta"
    "{AB: real_types.nnreal | reals.>=(AB, tcasra3d.RAin2D_lookahead)}")))
 (RA3D_interval_TCC23 0
  (RA3D_interval_TCC23-1 nil 3574465994
   ("" (skeep*)
    ((""
      (typepred
       "time_of_min_tau[TAU, DMOD, RAin2D_lookahead, minRAoutTheta]
                     (vect2(so), vect2(vo), vect2(si), vect2(vi))")
      (("1" (assert)
        (("1" (case "minRAoutTheta <= T")
          (("1" (assert) nil nil)
           ("2" (replaces -20)
            (("2" (replaces -16)
              (("2" (lift-if -18)
                (("2" (split -18)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (replaces -1)
                      (("2" (hide-all-but 2)
                        (("2" (name-replace "ss" "vect2(so-si)")
                          (("2" (name-replace "vv" "vect2(vo-vi)")
                            (("2" (grind :exclude "Theta_D") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil) ("3" (assert) nil nil))
      nil))
    nil)
   ((vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (time_of_min_tau const-decl "Lookahead[B, T]" tcasra2d nil)
    (DMOD formal-const-decl "posreal" tcasra3d nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TAU formal-const-decl "nnreal" tcasra3d nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (T formal-const-decl "{AB: nnreal | AB > B}" tcasra3d nil)
    (> const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (B formal-const-decl "nnreal" tcasra3d nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_3D vectors) nil
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (RA3D_interval subtype
    "tcasra2d[tcasra3d.TAU, tcasra3d.DMOD, tcasra3d.RAin2D_lookahead, tcasra3d.minRAoutTheta].time_of_min_tau(vect_3D_2D.vect2(tcasra3d.so), vect_3D_2D.vect2(tcasra3d.vo), vect_3D_2D.vect2(tcasra3d.si), vect_3D_2D.vect2(tcasra3d.vi))"
    "Lookahead[B, T]")))
 (RA3D_interval_TCC24 0
  (RA3D_interval_TCC24-1 nil 3574465994
   ("" (skeep*)
    ((""
      (typepred
       "time_of_min_tau[TAU, DMOD, RAin2D_lookahead, minRAoutTheta]
                       (vect2(so), vect2(vo), vect2(si), vect2(vi))")
      (("1" (assert)
        (("1" (case "minRAoutTheta <= T")
          (("1" (propax) nil nil)
           ("2" (replaces -20)
            (("2" (replaces -16)
              (("2" (lift-if -18)
                (("2" (split -18)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (replaces -1)
                      (("2" (hide-all-but 2)
                        (("2" (name-replace "ss" "vect2(so-si)")
                          (("2" (name-replace "vv" "vect2(vo-vi)")
                            (("2" (grind :exclude "Theta_D") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil) ("3" (assert) nil nil))
      nil))
    nil)
   ((vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (time_of_min_tau const-decl "Lookahead[B, T]" tcasra2d nil)
    (DMOD formal-const-decl "posreal" tcasra3d nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TAU formal-const-decl "nnreal" tcasra3d nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (T formal-const-decl "{AB: nnreal | AB > B}" tcasra3d nil)
    (> const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (B formal-const-decl "nnreal" tcasra3d nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (Vector type-eq-decl nil vectors_3D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (RA3D_interval subtype "tcasra3d.minRAoutTheta" "Lookahead[B, T]")))
 (RA3D_interval_TCC25 0
  (RA3D_interval_TCC25-1 nil 3574500492
   ("" (skeep*)
    (("" (assert)
      (("" (replaces -17)
        (("" (min_max)
          (("" (replaces (-8 -9))
            (("" (min_max)
              (("" (replaces -10) (("" (min_max) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_min formula-decl nil real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" tcasra3d nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (> const-decl "bool" reals nil)
    (T formal-const-decl "{AB: nnreal | AB > B}" tcasra3d nil)
    (lt_max formula-decl nil real_defs nil)
    (gt_min formula-decl nil real_defs nil)
    (min_le formula-decl nil real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (max_le formula-decl nil real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (RA3D_interval subtype "tcasra3d.RAin2D_lookahead"
    "Lookahead[B, T]")))
 (RA3D_interval_TCC26 0
  (RA3D_interval_TCC26-1 nil 3574500492
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (RA3D_interval subtype "tcasra3d.T"
    "{AB: real_types.nnreal | reals.>=(AB, tcasra3d.B)}")))
 (RA3D_interval_TCC27 0
  (RA3D_interval_TCC27-1 nil 3574516416
   ("" (skeep*)
    (("" (replaces -16)
      (("" (min_max)
        (("" (assert)
          (("" (replaces (-12 -13))
            (("" (min_max)
              (("" (replaces (-8 -9))
                (("" (min_max)
                  (("" (lift-if -12)
                    (("" (split -12)
                      (("1" (flatten) (("1" (assert) nil nil)) nil)
                       ("2" (flatten)
                        (("2" (replaces -1) (("2" (min_max) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (le_max formula-decl nil real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (max_le formula-decl nil real_defs nil)
    (lt_max formula-decl nil real_defs nil)
    (gt_min formula-decl nil real_defs nil) nil
    (Vector type-eq-decl nil vectors_3D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (HMD formal-const-decl "posreal" tcasra3d nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (max_ge formula-decl nil real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T formal-const-decl "{AB: nnreal | AB > B}" tcasra3d nil)
    (> const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (B formal-const-decl "nnreal" tcasra3d nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (min_le formula-decl nil real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min_ge formula-decl nil real_defs nil)
    (le_min formula-decl nil real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (RA3D_interval subtype "tcasra3d.minRAoutTheta" "Lookahead[B, T]")))
 (RA3D_interval_TCC28 0
  (RA3D_interval_TCC28-1 nil 3574516416
   ("" (skeep*)
    (("" (assert)
      (("" (replaces -11)
        (("" (min_max)
          (("" (replaces -7) (("" (min_max) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_le formula-decl nil real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" tcasra3d nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (> const-decl "bool" reals nil)
    (T formal-const-decl "{AB: nnreal | AB > B}" tcasra3d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (RA3D_interval subtype "tcasra3d.RAin2D_lookahead"
    "Lookahead[B, T]")))
 (RA3D_interval_TCC29 0
  (RA3D_interval_TCC29-1 nil 3574516416
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil (RA3D_interval subtype "tcasra3d.RAin2D_lookahead" "nnreal")))
 (RA3D_interval_TCC30 0
  (RA3D_interval_TCC30-1 nil 3574516416
   ("" (skeep*)
    (("" (assert)
      (("" (replaces (-11 -12))
        (("" (hide-all-but 10) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (RA3D_interval subtype "tcasra3d.RAout2D_lookahead"
    "{AB: real_types.nnreal | reals.>=(AB, tcasra3d.RAin2D_lookahead)}")))
 (RA3D_interval_TCC31 0
  (RA3D_interval_TCC31-1 nil 3574516416
   ("" (skeep*)
    ((""
      (typepred
       "time_of_min_tau[TAU, DMOD, RAin2D_lookahead, RAout2D_lookahead]
                 (vect2(so), vect2(vo), vect2(si), vect2(vi))")
      (("1" (assert)
        (("1" (case "RAout2D_lookahead <= T")
          (("1" (assert) nil nil)
           ("2" (replaces -14)
            (("2" (min_max)
              (("2" (replaces -9)
                (("2" (min_max)
                  (("2" (replaces -9)
                    (("2" (min_max)
                      (("2" (replaces -11) (("2" (min_max) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil) ("3" (assert) nil nil))
      nil))
    nil)
   ((vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (time_of_min_tau const-decl "Lookahead[B, T]" tcasra2d nil)
    (DMOD formal-const-decl "posreal" tcasra3d nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TAU formal-const-decl "nnreal" tcasra3d nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (T formal-const-decl "{AB: nnreal | AB > B}" tcasra3d nil)
    (> const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (B formal-const-decl "nnreal" tcasra3d nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_le formula-decl nil real_defs nil)
    (lt_max formula-decl nil real_defs nil)
    (gt_min formula-decl nil real_defs nil)
    (le_max formula-decl nil real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (RA3D_interval subtype
    "tcasra2d[tcasra3d.TAU, tcasra3d.DMOD, tcasra3d.RAin2D_lookahead, tcasra3d.RAout2D_lookahead].time_of_min_tau(vect_3D_2D.vect2(tcasra3d.so), vect_3D_2D.vect2(tcasra3d.vo), vect_3D_2D.vect2(tcasra3d.si), vect_3D_2D.vect2(tcasra3d.vi))"
    "Lookahead[B, T]")))
 (RA3D_interval_TCC32 0
  (RA3D_interval_TCC32-1 nil 3574516416
   ("" (skeep*)
    (("" (assert)
      (("" (replaces -12)
        (("" (min_max)
          (("" (replaces -7) (("" (min_max) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_le formula-decl nil real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" tcasra3d nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (> const-decl "bool" reals nil)
    (T formal-const-decl "{AB: nnreal | AB > B}" tcasra3d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (RA3D_interval subtype "tcasra3d.RAout2D_lookahead"
    "Lookahead[B, T]")))
 (RA3D_interval_def 0
  (RA3D_interval_def-4 nil 3574619717
   (""
    (deftactic oldproof
     (then
      (name-replace "hitsdisk" "cd2d_TCAS_after(so-si,vo-vi,B)" :hide?
       nil)
      (label "hdname" -1) (swap-rel -1) (rotate--)))
    (("" (skeep)
      (("" (skoletin 1)
        (("" (expand "RA3D_interval" :assert? none)
          (("" (oldproof)
            (("" (lemma "ra_cd2d_after")
              (("" (insteep)
                (("" (replace -3 :dir rl)
                  (("" (case "usehmdf AND NOT hitsdisk")
                    (("1" (replace -1)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (hide -1)
                            (("1" (replaces -1)
                              (("1"
                                (assert)
                                (("1"
                                  (case "(T<=t AND t<=B)")
                                  (("1" (ground) nil nil)
                                   ("2"
                                    (replace 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "ra_3D?")
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace 1)
                      (("2"
                        (case "(vo`z = vi`z AND abs(so`z - si`z) > ZTHR)")
                        (("1" (replace -1)
                          (("1" (flatten)
                            (("1" (replace -4)
                              (("1"
                                (assert)
                                (("1"
                                  (case "T<=t AND t<=B")
                                  (("1" (ground) nil nil)
                                   ("2"
                                    (replace 1)
                                    (("2"
                                      (case
                                       "NOT TCASII_RA_at(so, vo, si, vi,usehmdf)(t)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 3)
                                        (("2"
                                          (hide 1)
                                          (("2"
                                            (expand "TCASII_RA_at")
                                            (("2"
                                              (expand "TCASII_RA_def")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (rewrite
                                                   "vz_distr_add")
                                                  (("2"
                                                    (rewrite
                                                     "vz_distr_add")
                                                    (("2"
                                                      (rewrite
                                                       "vz_scal")
                                                      (("2"
                                                        (rewrite
                                                         "vz_scal")
                                                        (("2"
                                                          (replace -4)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "vertical_RA")
                                                              (("2"
                                                                (expand
                                                                 "time_coalt")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace 1)
                          (("2" (skoletin -2)
                            (("2" (skoletin -1)
                              (("2"
                                (skoletin -1)
                                (("2"
                                  (skoletin -1)
                                  (("2"
                                    (skoletin -1)
                                    (("2"
                                      (case "centry <= cexit")
                                      (("1"
                                        (label "centry_le_cexit" -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (case
                                             "(cexit < B OR T < centry)")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "T<=t AND t<=B")
                                                    (("1"
                                                      (hide-all-but -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace 1)
                                                      (("2"
                                                        (case
                                                         "NOT TCASII_RA_at(so, vo, si, vi,usehmdf)(t)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 4)
                                                          (("2"
                                                            (case
                                                             "vo`z=vi`z")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "TCASII_RA_at")
                                                                (("1"
                                                                  (expand
                                                                   "TCASII_RA_def")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (rewrite
                                                                       "vz_distr_add")
                                                                      (("1"
                                                                        (rewrite
                                                                         "vz_distr_add")
                                                                        (("1"
                                                                          (rewrite
                                                                           "vz_scal")
                                                                          (("1"
                                                                            (rewrite
                                                                             "vz_scal")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "coalt_entry_exit_def")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "vo`z-vi`z"
                                                                   "t"
                                                                   "so`z-si`z")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (hide
                                                                         -2)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "TCASII_RA_at")
                                                                            (("2"
                                                                              (expand
                                                                               "TCASII_RA_def")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (hide-all-but
                                                                                   (-3
                                                                                    1))
                                                                                  (("2"
                                                                                    (grind
                                                                                     :exclude
                                                                                     "vertical_RA")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace 1)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (skoletin -1)
                                                  (("2"
                                                    (skoletin -1)
                                                    (("2"
                                                      (skoletin -1)
                                                      (("2"
                                                        (case
                                                         "tin <= tout")
                                                        (("1"
                                                          (label
                                                           "tin_le_tout"
                                                           -1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (case
                                                               "RAin2D > RAout2D OR
                                                                                                                                                                                                                                                                                RAout2D < tin OR
                                                                                                                                                                                                                                                                                 RAin2D > tout")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (replaces
                                                                   -2)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "T<=t AND t<=B")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         1)
                                                                        (("2"
                                                                          (case
                                                                           "NOT TCASII_RA_at(so, vo, si, vi,usehmdf)(t)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             6)
                                                                            (("2"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (expand
                                                                                 "TCASII_RA_at")
                                                                                (("1"
                                                                                  (expand
                                                                                   "TCASII_RA_def")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "RA2D_interval_def[TAU,DMOD,tin,tout]")
                                                                                      (("1"
                                                                                        (insteep
                                                                                         -)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -8
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -9
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "t")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         (-3
                                                                                                          1))
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "horizontal_RA_at")
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "vect2_add")
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "vect2_add")
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "vect2_scal")
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "vect2_scal")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   "coalt_entry_exit_def")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "vo`z-vi`z"
                                                                                                     "t"
                                                                                                     "so`z-si`z")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "vo`z = vi`z")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "tin"
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "tout"
                                                                                                               +)
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (reveal
                                                                                                                   "centry_le_cexit")
                                                                                                                  (("1"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   6)
                                                                                                                  (("1"
                                                                                                                    (hide-all-but
                                                                                                                     (-1
                                                                                                                      +))
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "tin")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "tout")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "centry")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "cexit")
                                                                                                                              (("1"
                                                                                                                                (grind
                                                                                                                                 :exclude
                                                                                                                                 "coalt_entry_exit")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   (-4
                                                                                                                    1))
                                                                                                                  (("2"
                                                                                                                    (grind
                                                                                                                     :exclude
                                                                                                                     "vertical_RA")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "tout"
                                                                                                           +)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "cexit"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "tin"
                                                                                                               +)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "centry"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replaces
                                                                                         (-9
                                                                                          -10))
                                                                                        (("2"
                                                                                          (min_max)
                                                                                          (("2"
                                                                                            (lift-if
                                                                                             -11)
                                                                                            (("2"
                                                                                              (split
                                                                                               -11)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "tin<=t AND t<=RAout2D")
                                                                                (("1"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (case
                                                                                     "tin<=t AND t<=tout")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -3)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "RA2D_interval_def[TAU,DMOD,tin,tout]")
                                                                                            (("1"
                                                                                              (insteep
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -7
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -8
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "t")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "TCASII_RA_at")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "TCASII_RA_def")
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "horizontal_RA_at")
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "vect2_add")
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "vect2_add")
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "vect2_scal")
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "vect2_scal")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "coalt_entry_exit_def")
                                                                                        (("2"
                                                                                          (case
                                                                                           "vo`z=vi`z")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                1))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "tin")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "tout")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "centry")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "cexit")
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             -
                                                                                             "vo`z-vi`z"
                                                                                             "t"
                                                                                             "so`z-si`z")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (-1
                                                                                                        1
                                                                                                        2))
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "tout")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "tin")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "centry")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "cexit")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "nzvz_1")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "sz_1")
                                                                                                                  (("1"
                                                                                                                    (grind
                                                                                                                     :exclude
                                                                                                                     "coalt_entry_exit")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "TCASII_RA_at")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "TCASII_RA_def")
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (hide-all-but
                                                                                                             (-4
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (grind
                                                                                                               :exclude
                                                                                                               "vertical_RA")
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (case
                                                                                   "RAin2D<=t AND t<=tout")
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "tin<=t AND t<=tout")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -3)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "RA2D_interval_def[TAU,DMOD,tin,tout]")
                                                                                          (("1"
                                                                                            (insteep
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "t")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "TCASII_RA_at")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "TCASII_RA_def")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-4
                                                                                                          1))
                                                                                                        (("1"
                                                                                                          (grind
                                                                                                           :exclude
                                                                                                           "horizontal_RA")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "coalt_entry_exit_def")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "vo`z-vi`z"
                                                                                           "t"
                                                                                           "so`z-si`z")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "vo`z=vi`z")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              1))
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "tout")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "tin")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "centry")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "cexit")
                                                                                                                    (("1"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           (-1
                                                                                                            -2
                                                                                                            1
                                                                                                            2))
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "tout")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "cexit")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "tin")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "centry")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (grind
                                                                                                                       :exclude
                                                                                                                       "coalt_entry_exit")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "TCASII_RA_at")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "TCASII_RA_def")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (hide-all-but
                                                                                                           (-4
                                                                                                            1))
                                                                                                          (("2"
                                                                                                            (grind
                                                                                                             :exclude
                                                                                                             "vertical_RA")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                2))
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "tin")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "tout")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "centry")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "cexit")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 1)
                                                                (("2"
                                                                  (case
                                                                   "usehmdf AND HMD < DMOD AND exit_at_centry AND (NOT los_at_centry)")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "(T <= t AND t <= B)")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             1)
                                                                            (("2"
                                                                              (case
                                                                               "NOT TCASII_RA_at(so,vo,si,vi,usehmdf)(t)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "TCASII_RA_at")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "TCASII_RA_def")
                                                                                      (("2"
                                                                                        (case
                                                                                         "FORALL (nnt:nnreal): sqv(vect2(so + centry * vo - (si + centry * vi)) + nnt * vect2(vo - vi)) >
sq(HMD)")
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -3)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "t>=centry")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "t+nnt!1-centry")
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (-2
                                                                                                      -3))
                                                                                                    (("1"
                                                                                                      (grind
                                                                                                       :exclude
                                                                                                       "sqv")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   (-1
                                                                                                    -2
                                                                                                    -3))
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "coalt_entry_exit_def")
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "vo`z=vi`z")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "vo`z-vi`z"
                                                                                                         "t"
                                                                                                         "so`z-si`z")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   (-1
                                                                                                                    1))
                                                                                                                  (("2"
                                                                                                                    (grind
                                                                                                                     :exclude
                                                                                                                     "vertical_RA")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replaces
                                                                                           -2)
                                                                                          (("2"
                                                                                            (replaces
                                                                                             -17)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "vect2(vo-vi) = zero")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      "hdname"
                                                                                                      1
                                                                                                      3))
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "los_at_centry")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "cd2d_TCAS_after")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (-5
                                                                                                    1
                                                                                                    2
                                                                                                    4))
                                                                                                  (("2"
                                                                                                    (skosimp*)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "exit_at_centry")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "los_at_centry")
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "sqv_increasing_after_horizontal_tca")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "vo-vi"
                                                                                                             "so-si")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "centry"
                                                                                                                 "centry+nnt!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "centry>=horizontal_tca(so-si,vo-vi)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (grind
                                                                                                                           :exclude
                                                                                                                           "sqv")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "horizontal_tca"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (cross-mult
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (hide-all-but
                                                                                                                               (-3
                                                                                                                                1))
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "vectors_2D.sqv_eq_0")
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     1)
                                                                    (("2"
                                                                      (case
                                                                       "usehmdf AND HMD < DMOD")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -15)
                                                                              (("1"
                                                                                (skoletin
                                                                                 -2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     8)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (case
                                                                                         "(RAin2D_lookahead <= t AND
t <=RAout2D_lookahead)")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (case
                                                                                             "t<=exitTheta")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "min")
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case
                                                                                               "sqv(vect2(vo-vi))=0")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "vect2(vo-vi)=zero")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (replaces
                                                                                                       -5)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "TCASII_RA_at")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "TCASII_RA_def")
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (hide-all-but
                                                                                                               (-3
                                                                                                                -21
                                                                                                                1
                                                                                                                2
                                                                                                                3))
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "horizontal_sep_outside_Theta")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "vo-vi"
                                                                                                                     "so-si"
                                                                                                                     "t+nnt!1")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "cd2d_TCAS_after")
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             "hdname")
                                                                                                                            (("2"
                                                                                                                              (grind
                                                                                                                               :exclude
                                                                                                                               ("sqv"
                                                                                                                                "Theta_D"))
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           (-2
                                                                                            -3))
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "RA2D_interval_def[TAU,DMOD,tin,tout]")
                                                                                            (("1"
                                                                                              (case
                                                                                               "tin<=t AND t<=tout")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (insteep
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -9
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -8
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "t")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "TCASII_RA_at")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "TCASII_RA_def")
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -5)
                                                                                                                      (("1"
                                                                                                                        (hide-all-but
                                                                                                                         (-1
                                                                                                                          -2
                                                                                                                          -3
                                                                                                                          -4
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "RAin2D_lookahead")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "RAout2D_lookahead")
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-5
                                                                                                                      1))
                                                                                                                    (("2"
                                                                                                                      (grind
                                                                                                                       :exclude
                                                                                                                       "horizontal_RA")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "TCASII_RA_at")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "TCASII_RA_def")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "vo`z=vi`z")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "tin"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "tout"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "centry"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "cexit"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (hide-all-but
                                                                                                             (-3
                                                                                                              1
                                                                                                              2))
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "coalt_entry_exit_def")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "vo`z-vi`z"
                                                                                                                 "t"
                                                                                                                 "so`z-si`z")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -3)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "tin")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "tout")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "centry")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "cexit")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "nzvz_1")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "sz_1")
                                                                                                                                        (("1"
                                                                                                                                          (grind
                                                                                                                                           :exclude
                                                                                                                                           "coalt_entry_exit")
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (grind
                                                                                                                           :exclude
                                                                                                                           "vertical_RA")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (reveal
                                                                                               "tin_le_tout")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "TCASII_RA_at")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "TCASII_RA_def")
                                                                                          (("2"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "cd2d_TCAS_after")
                                                                                              (("1"
                                                                                                (split
                                                                                                 "hdname")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "vectors_2D.sqv_eq_0")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               +
                                                                                                               "0")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "vect2_sub"
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "sub_eq_zero")
                                                                                                                  (("1"
                                                                                                                    (hide-all-but
                                                                                                                     (-1
                                                                                                                      -2
                                                                                                                      1))
                                                                                                                    (("1"
                                                                                                                      (grind
                                                                                                                       :exclude
                                                                                                                       "sqv")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "vect2(vo-vi)=zero")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -6)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (replaces
                                                                                                               -7)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   +
                                                                                                                   "Theta_D[HMD](vect2(so - si), vect2(vo - vi), 1)-t")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "Theta_D_on_D")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "1"
                                                                                                                         "vo-vi"
                                                                                                                         "so-si")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (hide-all-but
                                                                                                                             (-1
                                                                                                                              2))
                                                                                                                            (("1"
                                                                                                                              (grind
                                                                                                                               :exclude
                                                                                                                               ("sqv"
                                                                                                                                "Theta_D"))
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-3
                                                                                                                      -5
                                                                                                                      1))
                                                                                                                    (("2"
                                                                                                                      (name-replace
                                                                                                                       "TT"
                                                                                                                       "Theta_D[HMD](vect2(so - si), vect2(vo - vi), 1)")
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "RA2D_interval_def[TAU,DMOD,tin,tout]")
                                                                                              (("1"
                                                                                                (insteep
                                                                                                 -)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -10
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -9
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "t")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "NOT (RAin2D <= t AND t <= RAout2D)")
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (-2
                                                                                                                    -3
                                                                                                                    1))
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "RAout2D_lookahead")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "RAin2D_lookahead")
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (hide-all-but
                                                                                                                       (-2
                                                                                                                        1))
                                                                                                                      (("2"
                                                                                                                        (grind
                                                                                                                         :exclude
                                                                                                                         "horizontal_RA")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (replaces
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "RAin2D_lookahead"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "RAout2D_lookahead"
                                                                                                                     -2)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "min"
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "max"
                                                                                                                         -2)
                                                                                                                        (("2"
                                                                                                                          (lift-if
                                                                                                                           -2)
                                                                                                                          (("2"
                                                                                                                            (lift-if
                                                                                                                             -2)
                                                                                                                            (("2"
                                                                                                                              (lift-if
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (lift-if
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (lift-if
                                                                                                                                   -2)
                                                                                                                                  (("2"
                                                                                                                                    (lift-if
                                                                                                                                     -2)
                                                                                                                                    (("2"
                                                                                                                                      (lift-if
                                                                                                                                       -2)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (split
                                                                                                                                           -2)
                                                                                                                                          (("1"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (split
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (reveal
                                                                                                                                                       "tin_le_tout")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (reveal
                                                                                                 "tin_le_tout")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (lemma
                                                                                               "coalt_entry_exit_def")
                                                                                              (("3"
                                                                                                (case
                                                                                                 "vo`z=vi`z")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "vz_distr_add")
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "vz_distr_add")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "vz_scal")
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "vz_scal")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "vertical_RA")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "time_coalt")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "vo`z-vi`z"
                                                                                                   "t"
                                                                                                   "so`z-si`z")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (invoke
                                                                                                           (case
                                                                                                            "%1")
                                                                                                           (!
                                                                                                            -1
                                                                                                            1))
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 (-3
                                                                                                                  2))
                                                                                                                (("1"
                                                                                                                  (grind
                                                                                                                   :exclude
                                                                                                                   "vertical_RA")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (replace
                                                                                                             -4)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (hide-all-but
                                                                                                                 (-2
                                                                                                                  -3
                                                                                                                  1))
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "RAout2D_lookahead")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "RAin2D_lookahead")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "tin")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "tout")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "centry")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "cexit")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "nzvz_1")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "sz_1")
                                                                                                                                  (("2"
                                                                                                                                    (grind
                                                                                                                                     :exclude
                                                                                                                                     "coalt_entry_exit")
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (replace
                                                                             1)
                                                                            (("2"
                                                                              (replace
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split
                                                                                   9)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "TCASII_RA_at")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "TCASII_RA_def")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (case
                                                                                             "NOT (tin<=t AND t<=tout)")
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "vo`z = vi`z")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "vz_distr_add")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "vz_distr_add")
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "vz_scal")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "vz_scal")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "max")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "min")
                                                                                                                  (("1"
                                                                                                                    (lift-if)
                                                                                                                    (("1"
                                                                                                                      (lift-if)
                                                                                                                      (("1"
                                                                                                                        (lift-if)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "coalt_entry_exit_def")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "vo`z-vi`z"
                                                                                                       "t"
                                                                                                       "so`z-si`z")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (hide-all-but
                                                                                                                     (-1
                                                                                                                      -2
                                                                                                                      1
                                                                                                                      2))
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "tin")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "tout")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "centry")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "cexit")
                                                                                                                            (("1"
                                                                                                                              (grind
                                                                                                                               :exclude
                                                                                                                               "coalt_entry_exit")
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "vertical_RA_at")
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "vz_distr_add")
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "vz_distr_add")
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "vz_scal")
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "vz_scal")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "RA2D_interval_def[TAU, DMOD,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 tin,tout]")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -10
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -11
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "t")
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (hide-all-but
                                                                                                                     (-1
                                                                                                                      -2
                                                                                                                      -3
                                                                                                                      1
                                                                                                                      2))
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "RAin2D_lookahead")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "RAout2D_lookahead")
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "horizontal_RA_at")
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "vect2_add")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "vect2_add")
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "vect2_scal")
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "vect2_scal")
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (reveal
                                                                                                   "tin_le_tout")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "TCASII_RA_at")
                                                                                      (("2"
                                                                                        (case
                                                                                         "NOT vertical_RA((so + t * vo)`z - (si + t * vi)`z, vo`z - vi`z)")
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (case
                                                                                             "vo`z=vi`z")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "vz_distr_add")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "vz_distr_add")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "vz_scal")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "vz_scal")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "vertical_RA")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "time_coalt")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "coalt_entry_exit_def")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "vo`z-vi`z"
                                                                                                   "t"
                                                                                                   "so`z-si`z")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "vertical_RA_at")
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "vz_distr_add")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "vz_distr_add")
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "vz_scal")
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "vz_scal")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (case
                                                                                                                   "centry<=t AND t<=cexit")
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "tin<=t AND t<=tout")
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide-all-but
                                                                                                                           (-1
                                                                                                                            -2
                                                                                                                            1))
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "RAin2D_lookahead")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "RAout2D_lookahead")
                                                                                                                              (("2"
                                                                                                                                (case
                                                                                                                                 "tin<=tout")
                                                                                                                                (("1"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (reveal
                                                                                                                                   "tin_le_tout")
                                                                                                                                  (("2"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (case
                                                                                             "NOT horizontal_RA[TAU, DMOD]
vect2(so + t * vo), vect2(vo), vect2(si + t * vi), vect2(vi))")
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "NOT tin<=tout")
                                                                                                (("1"
                                                                                                  (reveal
                                                                                                   "tin_le_tout")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "NOT (tin<=t AND t<=tout)")
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (-1
                                                                                                        -2
                                                                                                        -3
                                                                                                        -4
                                                                                                        1))
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "RAout2D_lookahead")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "RAin2D_lookahead")
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "RA2D_interval_def[TAU,DMOD,tin,tout]")
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "t")
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "RAin2D<=t AND t<=RAout2D")
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "horizontal_RA_at")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "vect2_add")
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               "vect2_add")
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "vect2_scal")
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "vect2_scal")
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       (-1
                                                                                                                        2))
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         "hdname")
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "NOT (centry <= t AND t<=cexit)")
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "vo`z = vi`z")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (rewrite
                                                                                                                                 "vz_distr_add")
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "vz_distr_add")
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "vz_scal")
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "vz_scal")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "coalt_entry_exit_def")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "vo`z-vi`z"
                                                                                                                                 "t"
                                                                                                                                 "so`z-si`z")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "RAin2D <= RAin2D_lookahead")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "RAout2D_lookahead <= RAout2D")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (replaces
                                                                                                                                                     -11
                                                                                                                                                     +)
                                                                                                                                                    (("2"
                                                                                                                                                      (min_max)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (replaces
                                                                                                                                                 -11
                                                                                                                                                 +)
                                                                                                                                                (("2"
                                                                                                                                                  (min_max)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (expand
                                                                                                                                           "vertical_RA_at")
                                                                                                                                          (("2"
                                                                                                                                            (rewrite
                                                                                                                                             "vz_distr_add")
                                                                                                                                            (("2"
                                                                                                                                              (rewrite
                                                                                                                                               "vz_distr_add")
                                                                                                                                              (("2"
                                                                                                                                                (rewrite
                                                                                                                                                 "vz_scal")
                                                                                                                                                (("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   "vz_scal")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     8)
                                                                                                                                    (("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       (-1
                                                                                                                                        -2
                                                                                                                                        -3
                                                                                                                                        -4
                                                                                                                                        -5
                                                                                                                                        -6
                                                                                                                                        -7
                                                                                                                                        -8
                                                                                                                                        -9
                                                                                                                                        -10
                                                                                                                                        -11
                                                                                                                                        -12
                                                                                                                                        -13
                                                                                                                                        +))
                                                                                                                                      (("2"
                                                                                                                                        (case
                                                                                                                                         "RAin2D <= RAin2D_lookahead")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (case
                                                                                                                                             "RAout2D_lookahead <= RAout2D")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replaces
                                                                                                                                               -10
                                                                                                                                               +)
                                                                                                                                              (("2"
                                                                                                                                                (min_max)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (replaces
                                                                                                                                           -10
                                                                                                                                           +)
                                                                                                                                          (("2"
                                                                                                                                            (min_max)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "TCASII_RA_def")
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (replaces
                                                                                                     -5)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -18)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "cd2d_TCAS_after_rewrite")
                                                                                                        (("2"
                                                                                                          (hide-all-but
                                                                                                           (-1
                                                                                                            -2
                                                                                                            -4
                                                                                                            -5
                                                                                                            -20
                                                                                                            1
                                                                                                            2))
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "horizontal_RA")
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "norm(vect2(so + t * vo) - vect2(si + t * vi)) <= DMOD")
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -3)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   +
                                                                                                                   "0")
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     (-2
                                                                                                                      -5))
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "sqrt_le"
                                                                                                                       1
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "sqrt_sqv_norm")
                                                                                                                        (("1"
                                                                                                                          (grind
                                                                                                                           :exclude
                                                                                                                           "norm")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (replace
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "vect2(vo-vi)=zero")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "vect2_sub"
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (replaces
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (name
                                                                                                                             "tca2"
                                                                                                                             "horizontal_tca(so-si,vo-vi)")
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "t<=tca2")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 +
                                                                                                                                 "tca2-t")
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "sqv(vect2((so-si)+tca2*(vo-vi)))<=sq(HMD)")
                                                                                                                                  (("1"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-1
                                                                                                                                      4))
                                                                                                                                    (("1"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide
                                                                                                                                     5)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       4)
                                                                                                                                      (("2"
                                                                                                                                        (inst?)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (skeep
                                                                                                                                             -3)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "horizontal_tca_min")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "vo-vi"
                                                                                                                                                 "so-si"
                                                                                                                                                 "nnt")
                                                                                                                                                (("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   "horizontal_sq_dtca_eq")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -3)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         (-1
                                                                                                                                                          -4
                                                                                                                                                          1))
                                                                                                                                                        (("2"
                                                                                                                                                          (grind
                                                                                                                                                           :exclude
                                                                                                                                                           "sqv")
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 -)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   (4
                                                                                                                                    5))
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "horizontal_tca_dot_zero")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "vo-vi"
                                                                                                                                       "so-si")
                                                                                                                                      (("1"
                                                                                                                                        (typepred
                                                                                                                                         "sqv(vect2(vo-vi))")
                                                                                                                                        (("1"
                                                                                                                                          (mult-by
                                                                                                                                           -1
                                                                                                                                           "t-tca2")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "tca2")
                                                                                                                                            (("1"
                                                                                                                                              (grind
                                                                                                                                               :exclude
                                                                                                                                               "horizontal_tca")
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "tin")
                                                          (("2"
                                                            (expand
                                                             "tout")
                                                            (("2"
                                                              (reveal
                                                               "centry_le_cexit")
                                                              (("2"
                                                                (rewrite
                                                                 "max_le"
                                                                 1)
                                                                (("2"
                                                                  (rewrite
                                                                   "le_min"
                                                                   1)
                                                                  (("2"
                                                                    (rewrite
                                                                     "le_min"
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-4 -5 1))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case-replace
                                             "vo`z = vi`z")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (ra_cd2d_after formula-decl nil tcasra3d nil)
    (RA2D_interval_def formula-decl nil tcasra2d nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (horizontal_RA_at const-decl "bool" horizontal_RA nil)
    (vect2_scal formula-decl nil vect_3D_2D vectors)
    (vect2_add formula-decl nil vect_3D_2D vectors)
    (ge_max formula-decl nil real_defs nil)
    (min_ge formula-decl nil real_defs nil)
    (sqv_increasing_after_horizontal_tca formula-decl nil definitions
     ACCoRD)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_neg_ge2 formula-decl nil extra_real_props nil)
    (horizontal_tca const-decl "real" definitions ACCoRD)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (Theta_D_on_D formula-decl nil horizontal ACCoRD)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (vect2_sub formula-decl nil vect_3D_2D vectors)
    (dot_zero_right formula-decl nil vectors_2D vectors)
    (horizontal_sep_outside_Theta formula-decl nil horizontal ACCoRD)
    (norm const-decl "nnreal" vectors_2D vectors)
    (sqrt_le formula-decl nil sqrt reals)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (scal_0 formula-decl nil vectors_2D vectors)
    (sqrt_sq formula-decl nil sqrt reals)
    (sqrt_sqv_norm formula-decl nil vectors_2D vectors)
    (horizontal_tca_min formula-decl nil definitions ACCoRD)
    (horizontal_sq_dtca_eq formula-decl nil definitions ACCoRD)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (horizontal_tca_dot_zero formula-decl nil definitions ACCoRD)
    (cd2d_TCAS_after_rewrite formula-decl nil tcasra nil)
    (max_le formula-decl nil real_defs nil)
    (le_min formula-decl nil real_defs nil)
    (le_max formula-decl nil real_defs nil)
    (horizontal_RA const-decl "bool" horizontal_RA nil)
    (vertical_RA_at const-decl "bool" tcasra nil)
    (+ const-decl "Vector" vectors_3D vectors)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (coalt_entry_exit_def formula-decl nil tcasra nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (time_of_min_tau const-decl "Lookahead[B, T]" tcasra2d nil)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (Sign type-eq-decl nil sign reals)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (Delta const-decl "real" horizontal ACCoRD)
    (zero const-decl "Vector" vectors_2D vectors)
    (RA2D_interval const-decl "[real, real]" tcasra2d nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (sq const-decl "nonneg_real" sq reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (coalt_entry_exit const-decl
     "{r12: [real, real] | LET (r1, r2) = r12 IN r1 < r2}" tcasra nil)
    (< const-decl "bool" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TCASII_RA_def const-decl "bool" tcasra nil)
    (* const-decl "Vector" vectors_3D vectors)
    (vz_distr_add formula-decl nil vectors_3D vectors)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (vz_scal formula-decl nil vectors_3D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (vertical_RA const-decl "bool" tcasra nil)
    (time_coalt const-decl "real" tcasra nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ra_3D? const-decl "bool" tcasra3d nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (cd2d_TCAS_after const-decl "bool" tcasra nil)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TAU formal-const-decl "nnreal" tcasra3d nil)
    (TCOA formal-const-decl "nnreal" tcasra3d nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DMOD formal-const-decl "posreal" tcasra3d nil)
    (ZTHR formal-const-decl "posreal" tcasra3d nil)
    (HMD formal-const-decl "posreal" tcasra3d nil)
    (TCASII_RA_at const-decl "bool" tcasra nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (RA3D_interval const-decl "TCAS3D" tcasra3d nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (TCAS3D type-eq-decl nil tcasra3d nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (T formal-const-decl "{AB: nnreal | AB > B}" tcasra3d nil)
    (> const-decl "bool" reals nil)
    (B formal-const-decl "nnreal" tcasra3d nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (RA3D_def 0
  (RA3D_def-1 nil 3573836537
   ("" (skeep)
    (("" (lemma "RA3D_interval_def")
      (("" (inst - "si" "so" _ "usehmdf" "vi" "vo")
        (("" (expand "ra_3D?")
          (("" (name "disrant" "RA3D_interval(so, vo, si, vi,usehmdf)")
            (("" (replace -1)
              (("" (expand "RA3D")
                (("" (replace -1)
                  (("" (ground)
                    (("1" (skeep -1)
                      (("1" (inst - "t")
                        (("1" (assert) (("1" (ground) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst - "disrant`time_in")
                      (("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RA3D_interval_def formula-decl nil tcasra3d nil)
    (ra_3D? const-decl "bool" tcasra3d nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (RA3D const-decl "bool" tcasra3d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (B formal-const-decl "nnreal" tcasra3d nil)
    (> const-decl "bool" reals nil)
    (T formal-const-decl "{AB: nnreal | AB > B}" tcasra3d nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (TCAS3D type-eq-decl nil tcasra3d nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (RA3D_interval const-decl "TCAS3D" tcasra3d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (real nonempty-type-from-decl nil reals nil))
   nil))
 (time_of_min_tau_3D_def_TCC1 0
  (time_of_min_tau_3D_def_TCC1-1 nil 3573985354
   ("" (skeep*)
    (("" (grind :exclude ("time_of_min_tau_3D" "TCASII_RA_at" "Delta"))
      nil nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (- const-decl "Vector" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (- const-decl "Vector" vectors_3D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (time_of_min_tau_3D_def subtype "vect_3D_2D.vect2(tcasra3d.vi)"
    "{vi_1 | vectors_2D.*(((vectors_2D.-)(vect_3D_2D.vect2((vectors_3D.+)(tcasra3d.so, vectors_3D.*(tcasra3d.t, tcasra3d.vo))), vect_3D_2D.vect2((vectors_3D.+)(tcasra3d.si, vectors_3D.*(tcasra3d.t, tcasra3d.vi))))), ((vectors_2D.-)(vect_3D_2D.vect2(tcasra3d.vo), vi_1))) /= 0}")))
 (time_of_min_tau_3D_def_TCC2 0
  (time_of_min_tau_3D_def_TCC2-1 nil 3573985354
   ("" (skosimp*)
    (("" (grind :exclude ("time_of_min_tau_3D" "TCASII_RA_at" "Delta"))
      nil nil))
    nil)
   ((nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (- const-decl "Vector" vectors_3D vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (* const-decl "real" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (time_of_min_tau_3D_def subtype "vect_3D_2D.vect2(tcasra3d.vi)"
    "{vi_1 | vectors_2D.*(((vectors_2D.-)(vect_3D_2D.vect2((vectors_3D.+)(tcasra3d.so, vectors_3D.*(tcasra3d.mt3D, tcasra3d.vo))), vect_3D_2D.vect2((vectors_3D.+)(tcasra3d.si, vectors_3D.*(tcasra3d.mt3D, tcasra3d.vi))))), ((vectors_2D.-)(vect_3D_2D.vect2(tcasra3d.vo), vi_1))) /= 0}")))
 (time_of_min_tau_3D_def 0
  (time_of_min_tau_3D_def-3 nil 3574629107
   ("" (skeep)
    (("" (skoletin 1)
      (("" (label "mt3dname" -1)
        (("" (lemma "RA3D_def")
          (("" (insteep -)
            (("" (case "NOT ra_3D?(so, vo, si, vi, usehmdf)")
              (("1" (hide -1)
                (("1" (expand "ra_3D?")
                  (("1" (split)
                    (("1" (skosimp*) (("1" (inst + "t!1") nil nil))
                      nil)
                     ("2" (skosimp*) (("2" (inst + "t!1") nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "RA3D" :assert? none)
                  (("2" (skoletin -2)
                    (("2"
                      (expand "time_of_min_tau_3D" -4 :assert? none)
                      (("2" (skoletin -4 :postfix "mt")
                        (("2" (replace -4 :dir rl)
                          (("2" (replaces -2)
                            (("2" (copy -3)
                              (("2"
                                (label "int" -1)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (expand
                                     "RA3D_interval"
                                     :assert?
                                     none)
                                    (("2"
                                      (case
                                       "usehmdf AND
                             NOT cd2d_TCAS_after(vect2(so - si), vect2(vo - vi), B)")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace 1)
                                        (("2"
                                          (case
                                           "(vo`z = vi`z AND abs(so`z - si`z) > ZTHR)")
                                          (("1"
                                            (replace -1)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (replace 1)
                                            (("2"
                                              (skoletin*
                                               -3
                                               :postfix
                                               "mt")
                                              (("2"
                                                (case
                                                 "(cexitmt < B OR T < centrymt)")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace 1)
                                                  (("2"
                                                    (skoletin*
                                                     -1
                                                     :postfix
                                                     "mt")
                                                    (("2"
                                                      (case
                                                       "RAin2Dmt > RAout2Dmt OR RAout2Dmt < tinmt OR RAin2Dmt > toutmt")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace 1)
                                                        (("2"
                                                          (case
                                                           "usehmdf AND
                                                                                                        HMD < DMOD AND
                                                                                                         exit_at_centrymt AND (NOT los_at_centrymt)")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace 1)
                                                            (("2"
                                                              (case
                                                               "usehmdf AND HMD < DMOD")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (skoletin*
                                                                   -2
                                                                   :postfix
                                                                   "mt")
                                                                  (("1"
                                                                    (lemma
                                                                     "RA3D_interval_def")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "si"
                                                                       "so"
                                                                       _
                                                                       "usehmdf"
                                                                       "vi"
                                                                       "vo")
                                                                      (("1"
                                                                        (reveal
                                                                         "int")
                                                                        (("1"
                                                                          (replaces
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (replaces
                                                                             -2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     6)
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "t")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (case
                                                                                               "Delta[DMOD](vect2(so - si), vect2(vo - vi)) >= 0")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "min_tau_Delta_nonneg[TAU, DMOD, RAin2D_lookaheadmt, minRAoutThetamt]")
                                                                                                    (("1"
                                                                                                      (insteep
                                                                                                       -)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "t")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 "mt3dname"
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (-1
                                                                                                                    2))
                                                                                                                  (("1"
                                                                                                                    (grind
                                                                                                                     :exclude
                                                                                                                     "sqv")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (grind
                                                                                                               :exclude
                                                                                                               "Delta")
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   4)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "min_tau_dot_lt[TAU, DMOD, RAin2D_lookaheadmt, minRAoutThetamt]")
                                                                                                    (("2"
                                                                                                      (insteep
                                                                                                       -)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             "mt3dname"
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -)
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 (-1
                                                                                                                  1))
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (inst
                                                                                                                 +
                                                                                                                 "t")
                                                                                                                (("2"
                                                                                                                  (hide-all-but
                                                                                                                   (1
                                                                                                                    4))
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (hide-all-but
                                                                                                                 (1
                                                                                                                  3))
                                                                                                                (("3"
                                                                                                                  (grind
                                                                                                                   :exclude
                                                                                                                   "Delta")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "nominal_tau_min[TAU, DMOD, RAin2D_lookaheadmt, minRAoutThetamt]")
                                                                                                              (("2"
                                                                                                                (insteep
                                                                                                                 -)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       "mt3dname"
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (hide-all-but
                                                                                                                         (-1
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (grind
                                                                                                                           :exclude
                                                                                                                           "tau_current")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       (1
                                                                                                                        3))
                                                                                                                      (("2"
                                                                                                                        (grind
                                                                                                                         :exclude
                                                                                                                         "Delta")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (hide-all-but
                                                                                                                       (1
                                                                                                                        4))
                                                                                                                      (("3"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (inst-cp
                                                                                         -
                                                                                         "t")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "mt3D")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "RA3D_interval_def")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "si"
                                                                       "so"
                                                                       _
                                                                       "usehmdf"
                                                                       "vi"
                                                                       "vo")
                                                                      (("2"
                                                                        (reveal
                                                                         "int")
                                                                        (("2"
                                                                          (replaces
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (replaces
                                                                             -2)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 7)
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "t")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (case
                                                                                           "Delta[DMOD](vect2(so - si), vect2(vo - vi)) >= 0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide
                                                                                               1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "min_tau_Delta_nonneg[TAU, DMOD, RAin2D_lookaheadmt, RAout2D_lookaheadmt]")
                                                                                                (("1"
                                                                                                  (insteep
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "t")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             "mt3dname"
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (hide-all-but
                                                                                                               (-1
                                                                                                                2))
                                                                                                              (("1"
                                                                                                                (grind
                                                                                                                 :exclude
                                                                                                                 "sqv")
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         (-1
                                                                                                          1))
                                                                                                        (("2"
                                                                                                          (grind
                                                                                                           :exclude
                                                                                                           "Delta")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               4)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "min_tau_dot_lt[TAU, DMOD, RAin2D_lookaheadmt, RAout2D_lookaheadmt]")
                                                                                                (("2"
                                                                                                  (insteep
                                                                                                   -)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         "mt3dname"
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              1))
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (inst
                                                                                                             +
                                                                                                             "t")
                                                                                                            (("2"
                                                                                                              (hide-all-but
                                                                                                               (1
                                                                                                                4))
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (hide-all-but
                                                                                                             (1
                                                                                                              3))
                                                                                                            (("3"
                                                                                                              (grind
                                                                                                               :exclude
                                                                                                               "Delta")
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "nominal_tau_min[TAU, DMOD, RAin2D_lookaheadmt, RAout2D_lookaheadmt]")
                                                                                                          (("2"
                                                                                                            (insteep
                                                                                                             -)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   "mt3dname"
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (hide-all-but
                                                                                                                     (-1
                                                                                                                      1))
                                                                                                                    (("1"
                                                                                                                      (grind
                                                                                                                       :exclude
                                                                                                                       "tau_current")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   (1
                                                                                                                    3))
                                                                                                                  (("2"
                                                                                                                    (grind
                                                                                                                     :exclude
                                                                                                                     "Delta")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (hide-all-but
                                                                                                                   (1
                                                                                                                    4))
                                                                                                                  (("3"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (inst-cp
                                                                                     -
                                                                                     "t")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "mt3D")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (B formal-const-decl "nnreal" tcasra3d nil)
    (> const-decl "bool" reals nil)
    (T formal-const-decl "{AB: nnreal | AB > B}" tcasra3d nil)
    (Lookahead type-eq-decl nil Lookahead ACCoRD)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect3 type-eq-decl nil vectors_3D_def vectors)
    (time_of_min_tau_3D const-decl "Lookahead[B, T]" tcasra3d nil)
    (< const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (vect2 const-decl "Vect2" vect_3D_2D vectors)
    (Vector type-eq-decl nil vectors_3D vectors)
    (+ const-decl "Vector" vectors_3D vectors)
    (* const-decl "Vector" vectors_3D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (DMOD formal-const-decl "posreal" tcasra3d nil)
    (Delta const-decl "real" horizontal ACCoRD)
    (TAU formal-const-decl "nnreal" tcasra3d nil)
    (TCOA formal-const-decl "nnreal" tcasra3d nil)
    (ZTHR formal-const-decl "posreal" tcasra3d nil)
    (HMD formal-const-decl "posreal" tcasra3d nil)
    (TCASII_RA_at const-decl "bool" tcasra nil)
    (/= const-decl "boolean" notequal nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (tau_current const-decl "{rr: real |
   (so - si) * (vo - vi) < 0 AND norm(so - si) >= DMOD IMPLIES rr >= 0}"
     tcas_tau nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (RA3D_def formula-decl nil tcasra3d nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ra_3D? const-decl "bool" tcasra3d nil)
    (RA3D const-decl "bool" tcasra3d nil)
    (cd2d_TCAS_after const-decl "bool" tcasra nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Theta_D const-decl "real" horizontal ACCoRD)
    (Sign type-eq-decl nil sign reals)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (RA2D_interval const-decl "[real, real]" tcasra2d nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (sq const-decl "nonneg_real" sq reals)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (coalt_entry_exit const-decl
     "{r12: [real, real] | LET (r1, r2) = r12 IN r1 < r2}" tcasra nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (time_of_min_tau const-decl "Lookahead[B, T]" tcasra2d nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     vect_analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (min_tau_Delta_nonneg formula-decl nil tcasra2d nil)
    (nominal_tau_min formula-decl nil tcasra2d nil)
    (min_tau_dot_lt formula-decl nil tcasra2d nil)
    (RA3D_interval_def formula-decl nil tcasra3d nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (TCAS3D type-eq-decl nil tcasra3d nil)
    (RA3D_interval const-decl "TCAS3D" tcasra3d nil))
   nil)))

